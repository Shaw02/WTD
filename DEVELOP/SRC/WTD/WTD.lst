Microsoft (R) Macro Assembler Version 6.11		    10/20/11 12:11:05
WTD.asm							     Page 1 - 1


				;=======================================================================|
				;									|
				;		Wander Swan Total Sound Driver				|
				;				Main program				|
				;									|
				;					Programmed by			|
				;						A.Watanabe		|
				;									|
				;=======================================================================|

					.186

				;=======================================================================|
				;				define					|
				;=======================================================================|
				include process.inc			;定義ファイル　プロセス
			      C ;=======================================================================|
			      C ;									|
			      C ;			ＷａｎｄｅｒＳｗａｎ				|
			      C ;				汎用定義ファイル			|
			      C ;				ＯＳ編　−プロセス			|
			      C ;									|
			      C ; Copyright (c) 1999-2000, Qute Corporation. All rights reserved.	|
			      C ;									|
			      C ; FreyaOS process control block structure				|
			      C ;	$Id: process.h,v 1.4 2001/09/27 07:39:36 satoo Exp $		|
			      C ;									|
			      C ;						A.Watanabe (S.W.)	|
			      C ;									|
			      C ;=======================================================================|
			      C ;===============ProcIL return codes
 = 0000			      C E_PROC_SUCCESS		equ	0
 =-0001			      C E_PROC_CANTLOAD		equ	-1
			      C 
			      C ;===============process status codes */
 = 0000			      C S_PCB_NOT_USED		equ	0
 = 0001			      C S_PCB_LOAD		equ	1
 = 0002			      C S_PCB_RUN		equ	2
 = 0003			      C S_PCB_SUSPEND		equ	3
			      C 
			      C ;===============maximum process count: 0 for FreyaOS itself */
 = 0003			      C MAXPROCESSES		equ	3
			      C 
 0010			      C ProcControl		struc			;
 0000  0000		      C ProcControl_status	dw	?		;status of process
 0002  0000		      C ProcControl_exit_code	dw	?		;process exit code
			      C ;if			HOLD_TIME_INFO
 0004  00000000		      C ProcControl_born	dd	?		;process born time
 0008  00000000		      C ProcControl_started	dd	?		;recent starting time
 000C  00000000		      C ProcControl_ellapse	dd	?		;total ellapse time
			      C ;endif
			      C ProcControl		ends			;
			      C 
 0060			      C ProcContext		struc			;
 0000  0004 [		      C ProcContext_id		db	4	dup(?)	; mark: "LCC"/"TCC"
        00
       ]
 0004  0000		      C ProcContext_pid		dw	?		; pid of process
 0006  0000		      C ProcContext_ppid	dw	?		; pid of parent process
 0008  0000		      C ProcContext_pcbid	dw	?		; pcbid of process
 000A  0000		      C ProcContext_ppcbib	dw	?		; parent's pcbid
 000C  00000000		      C ProcContext_ilib	dd	?		; IlibIL for this process
 0010  00000000		      C ProcContext_proc	dd	?		; ProcIL for this process
 0014  00000000		      C ProcContext_cwfs	dd	?		; current working filesystem
 0018  0040 [		      C ProcContext_currentdir	db	64	dup(?)	; current working directory
        00
       ]
 0058  0000		      C ProcContext_argv	dw 	?		; execution arguments
 005A  00000000		      C ProcContext_resource	dd	?		; poiter to resource
 005E  0000		      C ProcContext_heap	dw	?		; poiter to free heap area
			      C ProcContext		ends			;
			      C 
			      C ;手動で書いて！！
			      C ;#define pcbid2bankno(id)	(BANK_OSWORK - (id))
			      C 
			      C ;使う命令のコメントを外して！！
			      C ;int near pcb_get_pcbid(void);
			      C ;EXTRN	_pcb_get_pcbid:near
			      C ;int near pcb_get_ppcbid(int id);
			      C ;EXTRN	_pcb_get_ppcbid:near
			      C ;int near pcb_get_pid(int id);
			      C ;EXTRN	_pcb_get_pid:near
			      C ;int near pcb_get_ppid(int id);
			      C ;EXTRN	_pcb_get_ppid:near
			      C ;int near pcb_get_status(int id);
			      C ;EXTRN	_pcb_get_status:near
			      C ;int near pcb_get_argv(int id, int index, char far *buf, int len);
			      C ;EXTRN	_pcb_get_argv:near
			      C ;int near pcb_get_srambank(void);
			      C ;EXTRN	_pcb_get_srambank:near
			      C 
			      C ;if	HOLD_TIME_INFO
			      C 
			      C ;time_t near pcb_get_born_time(int id);
			      C ;EXTRN	_pcb_get_born_time:near
			      C ;unsigned long near pcb_get_started_tick(int id);
			      C ;EXTRN	_pcb_get_started_tick:near
			      C ;unsigned long near pcb_get_ellapsed_tick(int id);
			      C ;EXTRN	_pcb_get_ellapsed_tick:near
			      C 
			      C ;endif
			      C 
			      C 
			      C 
				include	service.inc			;定義ファイル　割り込み
			      C ;=======================================================================|
			      C ;									|
			      C ;			ＷａｎｄｅｒＳｗａｎ				|
			      C ;				汎用定義ファイル			|
			      C ;				割り込み編				|
			      C ;									|
			      C ;						A.Watanabe (S.W.)	|
			      C ;									|
			      C ;=======================================================================|
			      C ;************************************************************************
			      C ;*									*
			      C ;*			ＢＩＯＳファンクション定義			*
			      C ;*									*
			      C ;************************************************************************
 = 0010			      C INT_BIOS_VECTOR_BASE		equ	010h
			      C ;===============割り込み番号定義
 = 0010			      C INT_EXIT	equ	INT_BIOS_VECTOR_BASE + 0	;プログラムの終了
 = 0011			      C INT_KEY		equ	INT_BIOS_VECTOR_BASE + 1	;キー制御
 = 0012			      C INT_DISP	equ	INT_BIOS_VECTOR_BASE + 2	;画面制御
 = 0013			      C INT_TEXT	equ	INT_BIOS_VECTOR_BASE + 3	;テキスト制御
 = 0014			      C INT_COMM	equ	INT_BIOS_VECTOR_BASE + 4	;シリアル通信制御
 = 0015			      C INT_SOUND	equ	INT_BIOS_VECTOR_BASE + 5	;サウンド制御
 = 0016			      C INT_TIMER	equ	INT_BIOS_VECTOR_BASE + 6	;カレンダ／タイマ制御
 = 0017			      C INT_SYSTEM	equ	INT_BIOS_VECTOR_BASE + 7	;システム制御
 = 0018			      C INT_BANK	equ	INT_BIOS_VECTOR_BASE + 8	;バンク制御
			      C 
			      C 
			      C ;************************************************************************
			      C ;*									*
			      C ;*			ハードウェア割り込み定義			*
			      C ;*									*
			      C ;************************************************************************
 = 0028			      C INT_HARDHAEW_VECTOR_BASE	equ	028h
			      C ;===============割り込み番号定義
 = 0000			      C SYS_INT_SENDREADY		equ	0	;シリアル送信データエンプティー
 = 0001			      C SYS_INT_KEY			equ	1	;キー割り込み
 = 0002			      C SYS_INT_CASETTE			equ	2	;カセット割り込み
 = 0003			      C SYS_INT_RECEIVEREADY		equ	3	;シリアル受信データレディー
 = 0004			      C SYS_INT_DISPLINE		equ	4	;描画ライン番号検知割り込み
 = 0005			      C SYS_INT_VBLANK_COUNTUP		equ	5	;垂直同期タイマー割り込み
 = 0006			      C SYS_INT_VBLANK			equ	6	;垂直同期期間開始
 = 0007			      C SYS_INT_HBLANK_COUNTUP		equ	7	;水平同期タイマー割り込み
			      C 
 = 0028			      C INT_SENDREADY		equ INT_HARDHAEW_VECTOR_BASE + SYS_INT_SENDREADY
 = 0029			      C INT_KEY_PUSH		equ INT_HARDHAEW_VECTOR_BASE + SYS_INT_KEY
 = 002A			      C INT_CASETTE		equ INT_HARDHAEW_VECTOR_BASE + SYS_INT_CASETTE
 = 002B			      C INT_RECEIVEREADY	equ INT_HARDHAEW_VECTOR_BASE + SYS_INT_RECEIVEREADY
 = 002C			      C INT_DISPLINE		equ INT_HARDHAEW_VECTOR_BASE + SYS_INT_DISPLINE
 = 002D			      C INT_VBLANK_COUNTUP	equ INT_HARDHAEW_VECTOR_BASE + SYS_INT_VBLANK_COUNTUP
 = 002E			      C INT_VBLANK		equ INT_HARDHAEW_VECTOR_BASE + SYS_INT_VBLANK
 = 002F			      C INT_HBLANK_COUNTUP	equ INT_HARDHAEW_VECTOR_BASE + SYS_INT_HBLANK_COUNTUP
			      C 
			      C 
			      C ;************************************************************************
			      C ;*									*
			      C ;*			システム割り込み定義				*
			      C ;*									*
			      C ;************************************************************************
 = 0030			      C INT_SYSCALL_VECTOR_BASE		equ	030h
			      C ;===============割り込み番号定義
 = 0030			      C INT_PROCESS	equ	INT_SYSCALL_VECTOR_BASE + 0	;不明
 = 0031			      C INT_FILESYS	equ	INT_SYSCALL_VECTOR_BASE + 1	;不明
 = 0032			      C INT_ILIB	equ	INT_SYSCALL_VECTOR_BASE + 2	;不明
			      C 
			      C 
			      C 
				include	timer.inc			;定義ファイル　タイマー
			      C ;=======================================================================|
			      C ;									|
			      C ;			ＷａｎｄｅｒＳｗａｎ				|
			      C ;				汎用定義ファイル			|
			      C ;				ＢＩＯＳ編　−カレンダ／タイマー制御	|
			      C ;									|
			      C ;						A.Watanabe (S.W.)	|
			      C ;									|
			      C ;=======================================================================|
			      C ;===============機能番号定義	（AHレジスタに代入し、割り込みをかける。）
 = 0000			      C RTC_RESET			equ	00h	;RTCリセット
 = 0001			      C RTC_GET_DATETIME		equ	01h	;RTC日付時間取得
 = 0002			      C RTC_SET_DATETIME		equ	02h	;RTC日付時間設定
 = 0003			      C RTC_SET_DATETIME_STRUCT		equ	03h	;RTC日付時間一括設定
 = 0004			      C RTC_GET_DATETIME_STRUCT		equ	04h	;RTC日付時間一括取得
 = 0005			      C RTC_ENABLE_ALARM		equ	05h	;RTCアラーム割り込み設定
 = 0006			      C RTC_DISABLE_ALARM		equ	06h	;RTC割り込み解除
 = 0007			      C TIMER_ENABLE			equ	07h	;タイマー割り込み設定
 = 0008			      C TIMER_DISABLE			equ	08h	;タイマー割り込み禁止
 = 0009			      C TIMER_GET_COUNT			equ	09h	;タイマーカウント値取得
			      C ;===============カレンダ・時計
 = 0000			      C RTC_YEAR			equ	00h	;年
 = 0001			      C RTC_MONTH			equ	01h	;月
 = 0002			      C RTC_DATE			equ	02h	;日
 = 0003			      C RTC_DAY_OF_WEEK			equ	03h	;曜日
 = 0004			      C RTC_HOUR			equ	04h	;時間
 = 0005			      C RTC_MIN				equ	05h	;分
 = 0006			      C RTC_SEC				equ	06h	;秒
			      C ;===============timer_type
 = 0000			      C TIMER_HBLANK			equ	00h	;HBLANK_CoundUp
 = 0001			      C TIMER_VBLANK			equ	01h	;VBLANK_CountUp
			      C ;===============timer_preset_type
 = 0000			      C TIMER_ONESHOT			equ	00h	;OneShotType
 = 0001			      C TIMER_AUTOPRESET		equ	01h	;AutoPresetType
			      C 
				include	comm.inc			;定義ファイル　通信
			      C ;=======================================================================|
			      C ;									|
			      C ;			ＷａｎｄｅｒＳｗａｎ				|
			      C ;				汎用定義ファイル			|
			      C ;				ＢＩＯＳ編　−シリアル制御		|
			      C ;									|
			      C ;						A.Watanabe (S.W.)	|
			      C ;									|
			      C ;=======================================================================|
			      C ;===============機能番号定義	（AHレジスタに代入し、割り込みをかける。）
 = 0000			      C COMM_OPEN			equ	00h	;通信開始
 = 0001			      C COMM_CLOSE			equ	01h	;通信終了
 = 0002			      C COMM_SEND_CHAR			equ	02h	;１バイト送信
 = 0003			      C COMM_RECEIVE_CHAR		equ	03h	;１バイト受信
 = 0004			      C COMM_RECEIVE_WITH_TIMEOUT	equ	04h	;ﾀｲﾑｱｳﾄ指定１バイト受信
 = 0005			      C COMM_SEND_STRING		equ	05h	;文字列送信
 = 0006			      C COMM_SEND_BLOCK			equ	06h	;ブロック送信
 = 0007			      C COMM_RECEIVE_BLOCK		equ	07h	;ブロック受信
 = 0008			      C COMM_SET_TIMEOUT		equ	08h	;タイムアウト設定
 = 0009			      C COMM_SET_BAUDRATE		equ	09h	;通信ボーレート設定
 = 000A			      C COMM_GET_BAUDRATE		equ	0ah	;通信ボーレート所得
 = 000B			      C COMM_SET_CANCEL_KEY		equ	0bh	;通信キャンセルキーパターン設定
 = 000C			      C COMM_GET_CANCEL_KEY		equ	0ch	;通信キャンセルキーパターン所得
 = 000D			      C COMM_XMODEM			equ	0dh	;X-modem送受信
			      C ;===============ボーレート
 = 0000			      C COMM_SPEED_9600			equ	0	; 9600[bps]
 = 0001			      C COMM_SPEED_38400		equ	1	;38400[bps]
			      C ;===============XMODEM structure
 0010			      C xmodeminfo			struc
 0000  0000		      C xmodeminfo_state		dw	?	;メーカ未公開
 0002  00		      C xmodeminfo_mode			db	?	;
 0003  00		      C xmodeminfo_retry_c		db	?	;
 0004  0000		      C xmodeminfo_block_c		dw	?	;
 0006  0000		      C xmodeminfo_block_max		dw	?	;
 0008  0000		      C xmodeminfo_block_sixa		dw	?	;
 000A  0000		      C xmodeminfo_bank			dw	?	;
 000C  0000		      C xmodeminfo_offset		dw	?	;
 000E  0000		      C xmodeminfo_timeout_c		dw	?	;
			      C xmodeminfo			ends
			      C ;===============XMODEM state codes
 = 0001			      C XM_START			equ	1	;メーカ未公開
 = 0002			      C XM_NEGO				equ	2	;
 = 0003			      C XM_BLOCK			equ	3	;
 = 0004			      C XM_BLOCK_RETRY			equ	4	;
 = 0005			      C XM_CLOSE			equ	5	;
 = 0006			      C XM_ABORT			equ	6	;
 = 0007			      C XM_DONE				equ	7	;
 = 0008			      C XM_ERASE_BANK			equ	8	;
			      C ;===============XMODEM transfer modes
 = 0000			      C XMODE_SEND			equ	0	;送信　メーカ未公開
 = 0001			      C XMODE_RECEIVE			equ	1	;受信
 = 0002			      C XMODE_SEND_ENCRYPTED		equ	2	;
 = 0003			      C XMODE_RECEIVE_ENCRYPTED		equ	3	;
 = 0004			      C XMODE_AUTO_ERASE		equ	4	;
			      C ;===============SIO error codes
 = 0000			      C ERR_SIO_OK			equ	0000h	;エラー無し
 = 8100			      C ERR_SIO_BUSY			equ	8100h	;ビジー
 = 8101			      C ERR_SIO_TIMEOUT			equ	8101h	;タイムアウト
 = 8102			      C ERR_SIO_OVERRUN			equ	8102h	;オーバーラン
 = 8103			      C ERR_SIO_CANCEL			equ	8103h	;キャンセル
			      C ;===============XMODEM error codes
 = 8104			      C ERR_XM_STATECODE		equ	8104h	;ステータスコード
 = 8105			      C ERR_XM_CANCELED			equ	8105h	;キャンセルされた。
 = 8106			      C ERR_XM_BLOCK_LOST		equ	8106h	;ブロックが消えた。
 = 8107			      C ERR_XM_TOO_LARGE		equ	8107h	;大きすぎ。
			      C 
				include	sound.inc			;定義ファイル　サウンド
			      C ;=======================================================================|
			      C ;									|
			      C ;			ＷａｎｄｅｒＳｗａｎ				|
			      C ;				汎用定義ファイル			|
			      C ;				ＢＩＯＳ編　−サウンド制御		|
			      C ;									|
			      C ;						A.Watanabe (S.W.)	|
			      C ;									|
			      C ;=======================================================================|
			      C ;===============機能番号定義	（AHレジスタに代入し、割り込みをかける。）
 = 0000			      C SOUND_INIT			equ	00h		;サウンド初期化
 = 0001			      C SOUND_SET_CHANNEL		equ	01h		;出力・モード設定
 = 0002			      C SOUND_GET_CHANNEL		equ	02h		;出力・モード取得
 = 0003			      C SOUND_SET_OUTPUT		equ	03h		;サウンド出力設定
 = 0004			      C SOUND_GET_OUTPUT		equ	04h		;サウンド出力取得
 = 0005			      C SOUND_SET_WAVE			equ	05h		;波形設定
 = 0006			      C SOUND_SET_PITCH			equ	06h		;サウンド周波数設定
 = 0007			      C SOUND_GET_PITCH			equ	07h		;サウンド周波数所得
 = 0008			      C SOUND_SET_VOLUME		equ	08h		;サウンド音量設定
 = 0009			      C SOUND_GET_VOLUME		equ	09h		;サウンド音量所得
 = 000A			      C SOUND_SET_SWEEP			equ	0Ah		;ﾁｬﾝﾈﾙ3ｽｳｨｰﾌﾟ設定
 = 000B			      C SOUND_GET_SWEEP			equ	0Bh		;ﾁｬﾝﾈﾙ3ｽｳｨｰﾌﾟ所得
 = 000C			      C SOUND_SET_NOISE			equ	0Ch		;ﾁｬﾝﾈﾙ4ﾉｲｽﾞ設定
 = 000D			      C SOUND_GET_NOISE			equ	0Dh		;ﾁｬﾝﾈﾙ4ﾉｲｽﾞ所得
 = 000E			      C SOUND_GET_RANDOM		equ	0Eh		;ﾁｬﾝﾈﾙ4疑似乱数ﾃﾞｰﾀ所得
			      C 
				include	bank.inc			;定義ファイル　バンク
			      C ;=======================================================================|
			      C ;									|
			      C ;			ＷａｎｄｅｒＳｗａｎ				|
			      C ;				汎用定義ファイル			|
			      C ;				ＢＩＯＳ編　−バンク制御		|
			      C ;									|
			      C ;						A.Watanabe (S.W.)	|
			      C ;									|
			      C ;=======================================================================|
			      C ;===============機能番号定義	（AHレジスタに代入し、割り込みをかける。）
 = 0000			      C BANK_SET_MAP			equ	00h	;バンクマッピング設定
 = 0001			      C BANK_GET_MAP			equ	01h	;バンクマッピング取得
 = 0002			      C BANK_READ_BYTE			equ	02h	;バンク指定１バイト読みこみ
 = 0003			      C BANK_WRITE_BYTE			equ	03h	;バンク指定１バイト書きこみ
 = 0004			      C BANK_READ_WORD			equ	04h	;バンク指定１ワード読みこみ
 = 0005			      C BANK_WRITE_WORD			equ	05h	;バンク指定１ワード書きこみ
 = 0006			      C BANK_READ_BLOCK			equ	06h	;バンク指定ブロック読みこみ
 = 0007			      C BANK_WRITE_BLOCK		equ	07h	;バンク指定ブロック書きこみ
 = 0008			      C BANK_FILL_BLOCK			equ	08h	;バンク指定ブロックフィル
 = 0009			      C BANK_ERASE_FLASH		equ	09h	;ﾌﾗｯｼｭﾛﾑのﾌﾗｯｼｭ（メーカ未公開）
			      C ;===============bank identifiers
 = 0000			      C BANK_SRAM			equ	0	;バンク SRAM
 = 0001			      C BANK_ROM0			equ	1	;バンク ROM0
 = 0002			      C BANK_ROM1			equ	2	;バンク ROM1
			      C 
 = 1000			      C BANK_SRAM_ADDRESS		equ	01000h	;SRAM　のセグメントアドレス
 = 2000			      C BANK_ROM0_ADDRESS		equ	02000h	;ROM0　のセグメントアドレス
 = 3000			      C BANK_ROM1_ADDRESS		equ	03000h	;ROM1　のセグメントアドレス
			      C 
 = 007F			      C BANK_MAX_BANKS			equ	7Fh	;バンクの最大
			      C 
 = 0000			      C BANK_SOFTFS			equ	00h	;SRAM FreyaOS Filesys
 = 0001			      C BANK_USERDS1			equ	01h	;SRAM FreyaOS Process 2
 = 0002			      C BANK_USERDS0			equ	02h	;SRAM FreyaOS Peocess 1
 = 0003			      C BANK_OSWORK			equ	03h	;SRAM FreyaOS Work
			      C 
			      C ;#define sram_get_map()		bank_get_map(BANK_SRAM)
			      C SRAM_GET_MAP	macro
			      C 		mov	ah,BANK_GET_MAP		;ファンクション番号
			      C 		mov	bl,BANK_SRAM		;バンクの種類　SRAM
			      C 		int	INT_BANK		;ファンクション呼び出し
			      C 		endm
			      C 
			      C ;#define sram_set_map(bank)	bank_set_map(BANK_SRAM, bank)
			      C SRAM_SET_MAP	macro	bank
			      C 		mov	ah,BANK_SET_MAP		;ファンクション番号
			      C 		mov	bl,BANK_SRAM		;バンクの種類　SRAM
			      C 		mov	cx,bank			;バンク番号
			      C 		int	INT_BANK		;ファンクション呼び出し
			      C 		endm
			      C 
			      C ;#define rom0_get_map()		bank_get_map(BANK_ROM0)
			      C ROM0_GET_MAP	macro
			      C 		mov	ah,BANK_GET_MAP		;ファンクション番号
			      C 		mov	bl,BANK_ROM0		;バンクの種類　ROM0
			      C 		int	INT_BANK		;ファンクション呼び出し
			      C 		endm
			      C 
			      C ;#define rom0_set_map(bank)	bank_set_map(BANK_ROM0, bank)
			      C ROM0_SET_MAP	macro	bank
			      C 		mov	ah,BANK_SET_MAP		;ファンクション番号
			      C 		mov	bl,BANK_ROM0		;バンクの種類　ROM0
			      C 		mov	cx,bank			;バンク番号
			      C 		int	INT_BANK		;ファンクション呼び出し
			      C 		endm
			      C 
			      C ;#define rom1_get_map()		bank_get_map(BANK_ROM1)
			      C ROM1_GET_MAP	macro
			      C 		mov	ah,BANK_GET_MAP		;ファンクション番号
			      C 		mov	bl,BANK_ROM1		;バンクの種類　ROM1
			      C 		int	INT_BANK		;ファンクション呼び出し
			      C 		endm
			      C 
			      C ;#define rom1_set_map(bank)	bank_set_map(BANK_ROM1, bank)
			      C ROM1_SET_MAP	macro	bank
			      C 		mov	ah,BANK_SET_MAP		;ファンクション番号
			      C 		mov	bl,BANK_ROM1		;バンクの種類　ROM1
			      C 		mov	cx,bank			;バンク番号
			      C 		int	INT_BANK		;ファンクション呼び出し
			      C 		endm
			      C 
				include	wtd_def.inc			;定義ファイル　ドライバー
			      C ;=======================================================================|
			      C ;									|
			      C ;		Wander Swan Total Sound Driver				|
			      C ;				define file				|
			      C ;					for Assemble Language		|
			      C ;									|
			      C ;					Programmed by			|
			      C ;						A.Watanabe		|
			      C ;									|
			      C ;=======================================================================|
			      C ;****************************************************************
			      C ;*								*
			      C ;*			マクロ定義				*
			      C ;*								*
			      C ;****************************************************************
			      C ;===============================================================|
			      C ;	マクロ	ワークエリアのアドレスを取得する		|
			      C ;===============================================================|
			      C ;	●マクロ書式						|
			      C ;		WTD_WorkGet	reg1,reg2			|
			      C ;	●引数							|
			      C ;		DS	DGROUP					|
			      C ;	●返値							|
			      C ;		reg1	Segment Address				|
			      C ;		reg2	Offset  Address				|
			      C ;===============================================================|
			      C WTD_WorkGet	macro	seg,off		;
			      C ifdef	library	;------------------------	;※　ライブラリ版のみ必要
			      C 
			      C ifdef	IRAM	;---------------		;D-GROUP ＝ I-RAMの場合
			      C 		push	IRAM_Segment		;
			      C 		pop	seg			;
			      C 		mov	off,offset DGROUP:_WTD_Work
			      C 
			      C else	;-----------------------		;D-GROUP ≠ S-RAMの場合
			      C 		push	SRAM_Segment		;（WonderWitch等）
			      C 		pop	seg			;
			      C 		mov	off,offset DGROUP:_WTD_Work
			      C endif	;-----------------------
			      C 
			      C else	;--------------------------------	;WonderWitch版
			      C 		push	SRAM_Segment		;
			      C 		pop	seg			;
			      C 		mov	off,ds:[ProcContext_heap]
			      C endif	;--------------------------------
			      C 		endm				;
			      C 
			      C ;****************************************************************
			      C ;*								*
			      C ;*			定数					*
			      C ;*								*
			      C ;****************************************************************
			      C ;===============================================================|
			      C ;		ハードウェア割り込み				|
			      C ;===============================================================|
 = INT_HARDHAEW_VECTOR_BASE   C InterruptVectorBase_WW	equ	INT_HARDHAEW_VECTOR_BASE	;WonderWitch
 = InterruptVectorBase_WW     C InterruptVectorBase	equ	InterruptVectorBase_WW		;割り込みベクタ
			      C 
			      C ;===============================================================|
			      C ;		Wander Swan Segment Address			|
			      C ;===============================================================|
			      C ;セグメントアドレス定義
 = 0000			      C IRAM_Segment		equ	0000h			;本体RAM
 = BANK_SRAM_ADDRESS	      C SRAM_Segment		equ	BANK_SRAM_ADDRESS	;SRAM
 = BANK_ROM0_ADDRESS	      C FROM_Segment		equ	BANK_ROM0_ADDRESS	;ROM
			      C 
			      C ;===============================================================|
			      C ;		本体RAM Work Address				|
			      C ;===============================================================|
			      C ;CommEnpty_intvector	equ	000a0h		;割り込みベクタ(028h×4)
			      C ;Hblank_intvector	equ	000bch		;割り込みベクタ(02fh×4)
			      C 
 = 0180			      C IRAM_SoundVoiceTable_WW	equ	00180h			;WonderWitch設定
 = IRAM_SoundVoiceTable_WW    C IRAM_SoundVoiceTable	equ	IRAM_SoundVoiceTable_WW	;音色テーブル
			      C 
			      C ;===============================================================|
			      C ;		ワーク領域アドレス				|
			      C ;===============================================================|
			      C ;構造体位置
 = 0000			      C WTD_WorkAdd_User	equ	0000h		;ユーザ用ワーク
 = 0100			      C WTD_WorkAdd_Wave	equ	0100h		;音色
 = 0200			      C WTD_WorkAdd_Emb		equ	0200h		;エンベロープ
 = 0380			      C WTD_WorkAdd_System	equ	0380h		;パート共通構造体
			      C 
 = 0400			      C WTD_WorkAdd_Ech0	equ	0400h		;Effect ch1
 = 0480			      C WTD_WorkAdd_Ech1	equ	0480h		;Effect ch2
 = 0500			      C WTD_WorkAdd_Ech2	equ	0500h		;Effect ch3
 = 0580			      C WTD_WorkAdd_PCM		equ	0580h		;Effect PCM Voice
			      C 
 = 0600			      C WTD_WorkAdd_Ch0		equ	0600h		;ch0
 = 0680			      C WTD_WorkAdd_Ch1		equ	0680h		;ch1
 = 0700			      C WTD_WorkAdd_Ch2		equ	0700h		;ch2
 = 0780			      C WTD_WorkAdd_Ch3		equ	0780h		;ch3
 = 0800			      C WTD_WorkAdd_Ch4		equ	0800h		;ch4
 = 0880			      C WTD_WorkAdd_Ch5		equ	0880h		;ch5
 = 0900			      C WTD_WorkAdd_Ch6		equ	0900h		;ch6
 = 0980			      C WTD_WorkAdd_Ch7		equ	0980h		;ch7
 = 0A00			      C WTD_WorkAdd_Ch8		equ	0a00h		;ch8
 = 0A80			      C WTD_WorkAdd_Ch9		equ	0a80h		;ch9
 = 0B00			      C WTD_WorkAdd_Ch10	equ	0b00h		;ch10
 = 0B80			      C WTD_WorkAdd_Ch11	equ	0b80h		;ch11
 = 0C00			      C WTD_WorkAdd_Ch12	equ	0c00h		;ch12
 = 0C80			      C WTD_WorkAdd_Ch13	equ	0c80h		;ch13
 = 0D00			      C WTD_WorkAdd_Ch14	equ	0d00h		;ch14
 = 0D80			      C WTD_WorkAdd_Ch15	equ	0d80h		;ch15
 = 0E00			      C WTR_WorkAdd_Ch16	equ	0e00h		;ch16
 = 0E80			      C WTD_WorkAdd_Ch17	equ	0e80h		;ch17
 = 0F00			      C WTD_WorkAdd_Ch18	equ	0f00h		;ch18
 = 0F80			      C WTD_WorkAdd_Ch19	equ	0f80h		;ch19
			      C 
 = 0080			      C WTD_WorkChSize		equ	080h		;ワークのサイズ
 = 1000			      C WTD_WorkSize		equ	1000h		;ワークのサイズ
 = 0800			      C WTD_WorkSize_H		equ	0800h		;ワークのサイズ
			      C 
 = WTD_WorkSize		      C WTD_WorkAdd_End		equ	WTD_WorkSize	;ワークの最後＋１
			      C 
			      C ;****************************************************************
			      C ;*								*
			      C ;*			構造体定義				*
			      C ;*								*
			      C ;****************************************************************
			      C ;===============================================================|
			      C ;		Micro Soft  RIFF and Wave data formats		|
			      C ;===============================================================|
			      C ;構造体定義 RIFF Header
 000D			      C Riff			struc			;
 0000  0004 [		      C Riff_Head		db	4	dup(?)	;'RIFF'
        00
       ]
 0004  00000000		      C Riff_Size		dd	?		;File Size(全体-8)
 0008  0004 [		      C Riff_Type		db	4	dup(?)	;'WAVE'
        00
       ]
 000C  00		      C Riff_Data		db	?		;データ
			      C Riff			ends
			      C 
			      C ;構造体定義	RIFF struct
 0009			      C RiffHed			struc			;
 0000  0004 [		      C RiffHed_Head		db	4	dup(?)	;ヘッダ
        00
       ]
 0004  00000000		      C RiffHed_Size		dd	?		;ヘッダのデータのサイズ
 0008  00		      C RiffHed_Data		db	?		;ヘッダのデータ
			      C RiffHed			ends			;
			      C 
			      C ;構造体定義	WAVE fmt
 0018			      C WaveFmt			struc			;
 0000  0004 [		      C WaveFmt_Head		db	4	dup(?)	;'fmt '
        00
       ]
 0004  00000000		      C WaveFmt_Size		dd	?		;16	[byte]
 0008  0000		      C WaveFmt_Type		dw	?		;1	(wave)
 000A  0000		      C WaveFmt_Channel		dw	?		;1	(mono)
 000C  00000000		      C WaveFmt_SamplingRate	dd	?		;11025	[Hz]
 0010  00000000		      C WaveFmt_SamplingSec	dd	?		;11025	[Byte]
 0014  0000		      C WaveFmt_DataSize	dw	?		;1	[Byte]
 0016  0000		      C WaveFmt_ChannelSize	dw	?		;8	[bit]
			      C WaveFmt			ends			;
			      C 
			      C ;構造体定義	WAVE Data
 0009			      C WaveData		struc			;
 0000  0004 [		      C WaveData_Head		db	4	dup(?)	;'data'
        00
       ]
 0004  00000000		      C WaveData_Size		dd	?		;Data Size
 0008  00		      C WaveData_Data		db	?		;wave data
			      C WaveData		ends			;
			      C 
			      C ;===============================================================|
			      C ;		パート個別ワーク構造体				|
			      C ;===============================================================|
			      C ;構造体定数定義
 = WTD_SweepLevel	      C WTD_NoiseMode		equ	WTD_SweepLevel	;
 = WTD_Program		      C WTD_Voice		equ	WTD_Program	;
 = WTD_ProgramRate	      C WTD_VoiceRate		equ	WTD_ProgramRate	;
 = WTD_ProgramCnt	      C WTD_VoiceCnt		equ	WTD_ProgramCnt	;
 = WTD_Program1st	      C WTD_Voice1st		equ	WTD_Program1st	;
 = WTD_Program2nd	      C WTD_Voice2nd		equ	WTD_Program2nd	;
 = WTD_Program3rd	      C WTD_Voice3rd		equ	WTD_Program3rd	;
 = WTD_Bend		      C WTD_Frection		equ	WTD_Bend	;
 = WTD_BendSet		      C WTD_FrectionSet		equ	WTD_BendSet	;
 = WTD_ExprPanSet	      C WTD_Velocity		equ	WTD_ExprPanSet	;
 = WTD_LoopCount	      C WTD_PcmAddress		equ	WTD_LoopCount	;発生中アドレス
 = WTD_LoopCount+4	      C WTD_PcmSize		equ	WTD_LoopCount+4	;発生終了アドレス
			      C ;---------------------------------------------------------------
			      C ;パート個別構造体定義
 0077			      C WTD			struc			;各パート個別用	
 0000  0000		      C WTD_FlagControl		dw	?		;00-01	フラグ
 0002  00		      C WTD_FlagTai		db	?		;02	タイフラグ
 0003  00		      C WTD_FlagSharp		db	?		;03	#フラグ
 0004  00		      C WTD_FlagFlat		db	?		;04	bフラグ
 0005  00		      C WTD_Channel		db	?		;05	ﾁｬﾝﾈﾙ/ﾄﾗｯｸ
 0006  0000		      C WTD_Address		dw	?		;06-07	演奏中のｱﾄﾞﾚｽ
 0008  0008 [		      C WTD_LoopCount		db	8	dup(?)	;08-0F	ループ回数/PCM Address
        00
       ]
 0010  00		      C WTD_LoopCountPointer	db	?		;10	上記ﾎﾟｲﾝﾀ
 0011  00		      C WTD_Program		db	?		;11	出力した音色
 0012  00		      C WTD_SweepLevel		db	?		;12	ｽｳｨｰﾌﾟ値/ﾉｲｽﾞﾓｰﾄﾞ
 0013  00		      C WTD_SweepTime		db	?		;13	ｽｳｨｰﾌﾟ時間
 0014  0000		      C WTD_Leng		dw	?		;14-15	音長
 0016  0000		      C WTD_LengCounter		dw	?		;16-17	音長カウンター
 0018  0000		      C WTD_LengDefault		dw	?		;18-19	ﾃﾞﾌｫﾙﾄの音長
 001A  0000		      C WTD_KeyOffTime		dw	?		;1A-1B	ｹﾞｰﾄﾀｲﾑ制御値
 001C  0000		      C WTD_KeyOnDelay		dw	?		;1C-1D	ｷｰｵﾝﾃﾞｨﾚｲ
 001E  00		      C WTD_KeyShift		db	?		;1E	移調値
 001F  00		      C WTD_Key			db	?		;1F	音程
 0020  0008 [		      C WTD_KeySet		db	8	dup(?)	;20-27	出力した音程
        00
       ]
 0028  00		      C WTD_KeySetPointer	db	?		;28	上記ﾎﾟｲﾝﾀ
 0029  00		      C WTD_AcsentVelocity	db	?		;29	アクセント値
 002A  0000		      C WTD_BendSet		dw	?		;2A-2B	出力した周波数
 002C  0000		      C WTD_Bend		dw	?		;2C-2D	指定周波数
 002E  0000		      C WTD_BendDetune		dw	?		;2E-2F	ディチューン
 0030  00		      C WTD_BendLfoDecayRate	db	?		;30	LFOディケイレイト
 0031  00		      C WTD_BendLfoSpeedRate	db	?		;31	LFOスピード
 0032  0000		      C WTD_BendLfoLevel	dw	?		;32-33	LFO変位ﾚﾍﾞﾙ
 0034  00		      C WTD_BendLfoCount	db	?		;34	LFO変化回数
 0035  00		      C WTD_BendLfoRateCounter	db	?		;35	LFOレイト用カウンタ
 0036  0000		      C WTD_BendLfoLevelSet	dw	?		;36-37	LFO現在の変位ﾚﾍﾞﾙ
 0038  00		      C WTD_BendLfoCountCounter	db	?		;38	LFO回数用カウンタ
 0039  00		      C WTD_BendEmbAddress	db	?		;39	EMB番号（ｱﾄﾞﾚｽ）
 003A  00		      C WTD_BendEmbRate		db	?		;3A	EMBレイト
 003B  00		      C WTD_BendEmbCounter	db	?		;3B	EMBカウンター
 003C  00		      C WTD_BendEmbMaxMin	db	?		;3C	EMB最大／最小値
 003D  00		      C WTD_BendEmbLevelSet	db	?		;3D	EMB変位ﾚﾍﾞﾙ
 003E  00		      C WTD_Null_3E		db	?		;3E	未使用
 003F  00		      C WTD_ExprPanSet		db	?		;3F	出力/ｳﾞｪﾛｼﾃｨｰ
 0040  00		      C WTD_ExprSet		db	?		;40	出力音量/ｴｸｽﾌﾟﾚｯｼｮﾝ
 0041  00		      C WTD_Expr		db	?		;41	音量/ｴｸｽﾌﾟﾚｯｼｮﾝ
 0042  0000		      C WTD_ExprDetune		dw	?		;42-43	音量増減値
 0044  00		      C WTD_ExprLfoDecayRate	db	?		;44	LFOディケイレイト
 0045  00		      C WTD_ExprLfoSpeedRate	db	?		;45	LFOスピード
 0046  0000		      C WTD_ExprLfoLevel	dw	?		;46-47	LFO変位ﾚﾍﾞﾙ
 0048  00		      C WTD_ExprLfoCount	db	?		;48	LFO変化回数
 0049  00		      C WTD_ExprLfoRateCounter	db	?		;49	LFOレイト用カウンタ
 004A  0000		      C WTD_ExprLfoLevelSet	dw	?		;4A-4B	LFO現在の変位ﾚﾍﾞﾙ
 004C  00		      C WTD_ExprLfoCountCounter	db	?		;4C	LFO回数用カウンタ
 004D  00		      C WTD_ExprEmbAddress	db	?		;4D	EMB番号（ｱﾄﾞﾚｽ）
 004E  00		      C WTD_ExprEmbRate		db	?		;4E	EMBレイト
 004F  00		      C WTD_ExprEmbCounter	db	?		;4F	EMBカウンター
 0050  00		      C WTD_ExprEmbMaxMin	db	?		;50	EMB最大／最小値
 0051  00		      C WTD_ExprEmbLevelSet	db	?		;51	EMB変位ﾚﾍﾞﾙ
 0052  00		      C WTD_WorkAddress		db	?		;52	ワークｱﾄﾞﾚｽ上位8BIT
 0053  00		      C WTD_OctaveSet		db	?		;53	出力したオクターブ
 0054  00		      C WTD_Octave		db	?		;54	指定オクターブ
 0055  00		      C WTD_GateTime8		db	?		;55	ｹﾞｰﾄﾀｲﾑ（Q,U)
 0056  0000		      C WTD_GateTimeStepLast	dw	?		;56-57	ｹﾞｰﾄﾀｲﾑ(q)
 0058  0000		      C WTD_GateTimeStepFirst	dw	?		;58-59	ｹﾞｰﾄﾀｲﾑ(u)
 005A  00		      C WTD_VolumeUpDown	db	?		;5A	相対ボリュームの増減値
 005B  0000		      C WTD_ModDecay		dw	?		;5B-5C	ﾓｼﾞｭﾚｰｼｮﾝ ﾃﾞｨｹｲﾚｲﾄ
 005D  00		      C WTD_ModLevel		db	?		;5D	ﾓｼﾞｭﾚｰｼｮﾝ ﾚﾍﾞﾙ
 005E  00		      C WTD_ModLevelSet		db	?		;5E	現在のﾓｼﾞｭﾚｰｼｮﾝ ﾚﾍﾞﾙ
 005F  00		      C WTD_Null_5F		db	?		;5F	未使用
 0060  00		      C WTD_PanSet		db	?		;60	出力パンポット
 0061  00		      C WTD_Pan			db	?		;61	パンポット
 0062  0000		      C WTD_PanDetune		dw	?		;62-63	音量増減値
 0064  00		      C WTD_PanLfoDecayRate	db	?		;64	LFOディケイレイト
 0065  00		      C WTD_PanLfoSpeedRate	db	?		;65	LFOスピード
 0066  0000		      C WTD_PanLfoLevel		dw	?		;66-67	LFO変位ﾚﾍﾞﾙ
 0068  00		      C WTD_PanLfoCount		db	?		;68	LFO変化回数
 0069  00		      C WTD_PanLfoRateCounter	db	?		;69	LFOレイト用カウンタ
 006A  0000		      C WTD_PanLfoLevelSet	dw	?		;6A-6B	LFO現在の変位ﾚﾍﾞﾙ
 006C  00		      C WTD_PanLfoCountCounter	db	?		;6C	LFO回数用カウンタ
 006D  00		      C WTD_PanEmbAddress	db	?		;6D	EMB番号（ｱﾄﾞﾚｽ）
 006E  00		      C WTD_PanEmbRate		db	?		;6E	EMBレイト
 006F  00		      C WTD_PanEmbCounter	db	?		;6F	EMBカウンター
 0070  00		      C WTD_PanEmbMaxMin	db	?		;60	EMB最大／最小値
 0071  00		      C WTD_PanEmbLevelSet	db	?		;61	EMB変位ﾚﾍﾞﾙ
 0072  0000		      C WTD_ProgramRate		dw	?		;62-63	音色を変える。
 0074  00		      C WTD_Program1st		db	?		;64	音色の初期値
 0075  00		      C WTD_Program2nd		db	?		;65	経時変化
 0076  00		      C WTD_Program3rd		db	?		;66	KeyOff後音色
			      C WTD			ends
			      C ;---------------------------------------------------------------
			      C ;構造体位置
 = WTD_BendLfoDecayRate	      C WTD_BendLFO		equ	WTD_BendLfoDecayRate	;ChLFO構造体先頭
 = WTD_ExprLfoDecayRate	      C WTD_ExprLFO		equ	WTD_ExprLfoDecayRate	;ChLFO構造体先頭
 = WTD_PanLfoDecayRate	      C WTD_PanLFO		equ	WTD_PanLfoDecayRate	;ChLFO構造体先頭
 = WTD_BendEmbAddress	      C WTD_BendEmb		equ	WTD_BendEmbAddress	;ChEmb構造体先頭
 = WTD_ExprEmbAddress	      C WTD_ExprEmb		equ	WTD_ExprEmbAddress	;ChEmb構造体先頭
 = WTD_PanEmbAddress	      C WTD_PanEmb		equ	WTD_PanEmbAddress	;ChEmb構造体先頭
			      C 
			      C ;ChLFO構造体
 0009			      C WTD_ChLfo		struc
 0000  00		      C WTD_ChLfo_DecayRate	db	?		;	LFOディケイレイト
 0001  00		      C WTD_ChLfo_SpeedRate	db	?		;	LFOスピード
 0002  0000		      C WTD_ChLfo_Level		dw	?		;	LFO変位ﾚﾍﾞﾙ
 0004  00		      C WTD_ChLfo_Count		db	?		;	LFO変化回数
 0005  00		      C WTD_ChLfo_RateCounter	db	?		;	LFOレイト用カウンタ
 0006  0000		      C WTD_ChLfo_LevelSet	dw	?		;	LFO現在の変位ﾚﾍﾞﾙ
 0008  00		      C WTD_ChLfo_CountCounter	db	?		;	LFO回数用カウンタ
			      C WTD_ChLfo		ends
			      C ;ChEmb構造体
 0005			      C WTD_ChEmb		struc
 0000  00		      C WTD_ChEmb_Address	db	?		;	EMB番号（ｱﾄﾞﾚｽ）
 0001  00		      C WTD_ChEmb_Rate		db	?		;	EMBレイト
 0002  00		      C WTD_ChEmb_Counter	db	?		;	EMBカウンター
 0003  00		      C WTD_ChEmb_MaxMin	db	?		;	EMB最大／最小値
 0004  00		      C WTD_ChEmb_LevelSet	db	?		;	EMB変位ﾚﾍﾞﾙ
			      C WTD_ChEmb		ends
			      C ;---------------------------------------------------------------
			      C ;フラグビット・セット
 = 0001			      C WTD_Ctrl_BendLfo	equ	00001h		;音程ＬＦＯスイッチ
 = 0002			      C WTD_Ctrl_BendEmb	equ	00002h		;音程エンベロープスイッチ
 = 0004			      C WTD_Ctrl_ExprLfo	equ	00004h		;音量ＬＦＯスイッチ
 = 0008			      C WTD_Ctrl_ExprEmb	equ	00008h		;音量エンベロープスイッチ
 = 0010			      C WTD_Ctrl_PanLfo		equ	00010h		;パンＬＦＯスイッチ
 = 0020			      C WTD_Ctrl_PanEmb		equ	00020h		;パンエンベロープスイッチ
 = 0040			      C WTD_Ctrl_Acsent		equ	00040h		;次の音階はアクセント
 = 0080			      C WTD_Ctrl_EmbFreq	equ	00080h		;音程エンベロープ 上位bit
 = 0100			      C WTD_Ctrl_EmbVol		equ	00100h		;音量エンベロープ 上位bit
 = 0200			      C WTD_Ctrl_EmbPan		equ	00200h		;パンエンベロープ 上位bit
 = 0400			      C WTD_Ctrl_Vol0		equ	00400h		;音量＝０ & Relase
 = 0800			      C WTD_Ctrl_WorkSw		equ	00800h		;次のコマンドは、ワーク参照
 = 1000			      C WTD_Ctrl_WorkCy		equ	01000h		;ワーク演算結果、オーバーフロー
 = 2000			      C WTD_Ctrl_WorkZe		equ	02000h		;ワーク演算結果、０になった。
 = 4000			      C WTD_Ctrl_Effect		equ	04000h		;このパートは効果音か？
 = 8000			      C WTD_Ctrl_PlayEnd	equ	08000h		;演奏終了
			      C ;---------------------------------------------------------------
			      C ;フラグビット・リセット
 = FFFE			      C WTD_Ctrl_BendLfoR	equ	0fffeh		;音程ＬＦＯスイッチ
 = FFFD			      C WTD_Ctrl_BendEmbR	equ	0fffdh		;音程エンベロープスイッチ
 = FFFB			      C WTD_Ctrl_ExprLfoR	equ	0fffbh		;音量ＬＦＯスイッチ
 = FFF7			      C WTD_Ctrl_ExprEmbR	equ	0fff7h		;音量エンベロープスイッチ
 = FFEF			      C WTD_Ctrl_PanLfoR	equ	0ffefh		;パンＬＦＯスイッチ
 = FFDF			      C WTD_Ctrl_PamEmbR	equ	0ffdfh		;パンエンベロープスイッチ
 = FFBF			      C WTD_Ctrl_AcsentR	equ	0ffbfh		;次の音階はアクセント
 = FF7F			      C WTD_Ctrl_EmbFreqR	equ	0ff7fh		;音程エンベロープ 上位bit
 = FEFF			      C WTD_Ctrl_EmbVolR	equ	0feffh		;音量エンベロープ 上位bit
 = FDFF			      C WTD_Ctrl_EmbPanR	equ	0fdffh		;パンエンベロープ 上位bit
 = FBFF			      C WTD_Ctrl_Vol0R		equ	0fbffh		;音量＝０ & Relase
 = F7FF			      C WTD_Ctrl_WorkSwR	equ	0f7ffh		;次のコマンドは、ワーク参照
 = EFFF			      C WTD_Ctrl_WorkCyR	equ	0efffh		;ワーク演算結果、オーバーフロー
 = DFFF			      C WTD_Ctrl_WorkZeR	equ	0dfffh		;ワーク演算結果、０になった。
 = BFFF			      C WTD_Ctrl_EffectR	equ	0bfffh		;このパートは効果音か？
 = 7FFF			      C WTD_Ctrl_PlayEndR	equ	07fffh		;演奏終了
			      C 
			      C ;===============================================================|
			      C ;		パート共通ワーク構造体				|
			      C ;===============================================================|
 0034			      C WTD_Sys			struc			;システム全体	
 0000  0000		      C WTD_Sys_Flag		dw	?		;00	Flag
 0002  0000		      C WTD_Sys_ProgramOffset	dw	?		;02	Program Offset Address
 0004  0000		      C WTD_Sys_ProgramSegment	dw	?		;04	Program Segment Address
 0006  0000		      C WTD_Sys_MusicOffset	dw	?		;06	Music Offset Address
 0008  0000		      C WTD_Sys_MusicSegment	dw	?		;08	Music Segment Address
 000A  0000		      C WTD_Sys_EffectOffset	dw	?		;0a	Effect Offset Address
 000C  0000		      C WTD_Sys_EffectSegment	dw	?		;0c	Effect Segment Address
 000E  0000		      C WTD_Sys_PcmOffset	dw	?		;0e	Pcm Offset Address
 0010  0000		      C WTD_Sys_PcmSegment	dw	?		;10	Pcm Segment Address
 0012  0000		      C WTD_Sys_StayOutMask	dw	?		;12	常駐解除禁止
 0014  0002 [		      C WTD_Sys_OldIntvector	dw	2	dup(?)	;14-17	前の割り込みベクタ
        0000
       ]
 0018  0002 [		      C WTD_Sys_OldIntvectorCom	dw	2	dup(?)	;18-1B	前の割り込みベクタ
        0000
       ]
 001C  0000		      C WTD_Sys_ComFIFO_Offset	dw	?		;1C-1D	FIFO Offset Address
 001E  0000		      C WTD_Sys_ComFIFO_Segment	dw	?		;1E-1F	FIFO Segment Address
 0020  00		      C WTD_Sys_PCMVoice	db	?		;20	ハードウェア音量 PCM Voice
 0021  00		      C WTD_Sys_VolumeMusic	db	?		;21	ソフトウェア音量 演奏
 0022  00		      C WTD_Sys_VolumeEffect	db	?		;22	ソフトウェア音量 効果音
 0023  00		      C WTD_Sys_VolumePCM	db	?		;23	ソフトウェア音量 PCM
 0024  0000		      C WTD_Sys_Tempo		dw	?		;24	テンポ
 0026  0000		      C WTD_Sys_TempoCounter	dw	?		;26	テンポカウンタ
 0028  00		      C WTD_Sys_MusicPart	db	?		;28	演奏のパート数(最大20)
 0029  00		      C WTD_Sys_EffectPart	db	?		;29	効果音のパート数(最大3)
 002A  0000		      C WTD_Sys_ComFIFO_Cnt	dw	?		;2A-2B	FIFO ポインタ 書き込み
 002C  0000		      C WTD_Sys_ComFIFO_Adr	dw	?		;2C-2D	FIFO ポインタ 送信
 002E  0000		      C WTD_Sys_ComFIFO_Size	dw	?		;2E-2F	FIFO サイズ
 0030  00		      C WTD_Sys_RunningStatus	db	?		;30	MIDI Running Status
 0031  00		      C WTD_Sys_InterruptBase	db	?		;31	割り込みベースベクタ
 0032  0000		      C WTD_Sys_VoiceTableOffset dw	?		;32	音色Table(IRAM)Address
			      C WTD_Sys			ends			
			      C ;---------------------------------------------------------------
			      C ;フラグビット・セット
 = 0001			      C WTD_Sys_Music		equ	00001h		;演奏中
 = 0002			      C WTD_Sys_Effect		equ	00002h		;効果音発声中
 = 0004			      C WTD_Sys_Pcm		equ	00004h		;PCMボイス発生中
 = 0008			      C WTD_Sys_3		equ	00008h		;	(元：PCM Voice終了)
 = 0010			      C WTD_Sys_Midi		equ	00010h		;MIDIモード(システムでは未使用)
 = 0020			      C WTD_Sys_5		equ	00020h		;
 = 0040			      C WTD_Sys_6		equ	00040h		;
 = 0080			      C WTD_Sys_TimerEmulate	equ	00080h		;タイマーをエミュレート中
 = 0100			      C WTD_Sys_ChannelMode1	equ	00100h		;チャンネルモード ch1
 = 0200			      C WTD_Sys_ChannelMode2	equ	00200h		;チャンネルモード ch2
 = 0400			      C WTD_Sys_ChannelMode3	equ	00400h		;チャンネルモード ch3
 = 0800			      C WTD_Sys_ChannelMode4	equ	00800h		;チャンネルモード ch4
 = 1000			      C WTD_Sys_EffectMask1	equ	01000h		;効果音パートマスク ch1
 = 2000			      C WTD_Sys_EffectMask2	equ	02000h		;効果音パートマスク ch2
 = 4000			      C WTD_Sys_EffectMask3	equ	04000h		;効果音パートマスク ch3
 = 8000			      C WTD_Sys_EffectMask4	equ	08000h		;効果音パートマスク ch4
			      C ;---------------------------------------------------------------
			      C ;フラグビット・リセット
 = FFFE			      C WTD_Sys_MusicR		equ	0fffeh		;演奏中
 = FFFD			      C WTD_Sys_EffectR		equ	0fffdh		;効果音発声中
 = FFFB			      C WTD_Sys_PcmR		equ	0fffbh		;PCMボイス発生中
 = FFF7			      C WTD_Sys_3R		equ	0fff7h		;	(元：PCM Voice終了)
 = FFEF			      C WTD_Sys_MidiR		equ	0ffefh		;MIDIモード(システムでは未使用)
 = FFDF			      C WTD_Sys_5R		equ	0ffdfh		;
 = FFBF			      C WTD_Sys_6R		equ	0ffbfh		;
 = FF7F			      C WTD_Sys_TimerEmulateR	equ	0ff7fh		;タイマーをエミュレート中
 = FEFF			      C WTD_Sys_ChannelMode1R	equ	0feffh		;チャンネルモード ch1
 = FDFF			      C WTD_Sys_ChannelMode2R	equ	0fdffh		;チャンネルモード ch2
 = FBFF			      C WTD_Sys_ChannelMode3R	equ	0fbffh		;チャンネルモード ch3
 = F7FF			      C WTD_Sys_ChannelMode4R	equ	0f7ffh		;チャンネルモード ch4
 = EFFF			      C WTD_Sys_EffectMask1R	equ	0efffh		;効果音パートマスク ch1
 = DFFF			      C WTD_Sys_EffectMask2R	equ	0dfffh		;効果音パートマスク ch2
 = BFFF			      C WTD_Sys_EffectMask3R	equ	0bfffh		;効果音パートマスク ch3
 = 7FFF			      C WTD_Sys_EffectMask4R	equ	07fffh		;効果音パートマスク ch4
			      C 
			      C ;===============================================================|
			      C ;		ソフトウェアエンベロープ構造体			|
			      C ;===============================================================|
 0010			      C WTD_Emb			struc
 0000  00		      C WTD_Emb_AR		db	?		;00h	:Attack Rate
 0001  00		      C WTD_Emb_AS		db	?		;01h	:Attack Speed (001h)
 0002  00		      C WTD_Emb_AL		db	?		;02h	:Attack Level (0FFh)
 0003  00		      C WTD_Emb_FL		db	?		;03h	:First Level
 0004  00		      C WTD_Emb_DR		db	?		;04h	:Decay Rate
 0005  00		      C WTD_Emb_DS		db	?		;05h	:Decay Speed (081h)
 0006  00		      C WTD_Emb_DL		db	?		;06h	:Decay Level
 0007  00		      C WTD_Emb_Null1		db	?		;07h	:未使用
 0008  00		      C WTD_Emb_SR		db	?		;08h	:Sustain Rate
 0009  00		      C WTD_Emb_SS		db	?		;09h	:Sustain Speed (081h)
 000A  00		      C WTD_Emb_SL		db	?		;0Ah	:Sustain Level (000h)
 000B  00		      C WTD_Emb_Null2		db	?		;0Bh	:未使用
 000C  00		      C WTD_Emb_RR		db	?		;0Ch	:Relase Rate
 000D  00		      C WTD_Emb_RS		db	?		;0Dh	:Relase Speed (081h)
 000E  00		      C WTD_Emb_RL		db	?		;0Eh	:Relase Level (000h)
 000F  00		      C WTD_Emb_Null3		db	?		;0Fh	:未使用
			      C WTD_Emb			ends				
			      C 
			      C ;===============================================================|
			      C ;			曲データ構造体				|
			      C ;===============================================================|
 0012			      C WTD_Mus			struc
 0000  0004 [		      C WTD_Mus_Name		db	4	dup(?)	;00-03h	:選別子
        00
       ]
 0004  0000		      C WTD_Mus_Version		dw	?		;04-05h	:Version
 0006  0000		      C WTD_Mus_Extr		dw	?		;06-07h	:拡張ヘッダサイズ
 0008  00		      C WTD_Mus_Emb		db	?		;08h	:エンベロープ数量
 0009  00		      C WTD_Mus_Voice		db	?		;09h	:波形データ数量
 000A  00		      C WTD_Mus_Part		db	?		;0Ah	:パート数
 000B  00		      C WTD_Mus_TimeBase	db	?		;0Bh	:４部音符の分割数
 000C  0000		      C WTD_Mus_ExtrAdr		dw	?		;0Ch	:拡張ヘッダのアドレス
 000E  0000		      C WTD_Mus_DataAdr		dw	?		;0Eh	:データのアドレス
 0010  0000		      C WTD_Mus_PartAdr		dw	?		;10h	:曲データアドレス
			      C WTD_Mus			ends
			      C 
			      C ;===============================================================|
			      C ;			拡張ヘッダー構造体定義			|
			      C ;===============================================================|
 0000			      C WTD_MusEx		struc
			      C ;
			      C ;			現在、未使用
			      C ;
			      C WTD_MusEx		ends
			      C 
			      C 
				include	wtd_ver.inc			;定義ファイル　バージョン情報
			      C ;=======================================================================|
			      C ;									|
			      C ;		Wander Swan Total Sound Driver				|
			      C ;				IL Struct define			|
			      C ;				IL Function Routine			|
			      C ;					Programmed by			|
			      C ;						A.Watanabe		|
			      C ;									|
			      C ;=======================================================================|
 = '1.0c',0		      C WtdIL_Version		equ	'1.0c',0	;文字列
 = 010C			      C WTdIL_Version_N		equ	010ch		;数値
			      C 
				;
				;	　演奏開始ファンクションのところで、チェックする。
				;	パート数を追加する場合は、その分だけワークを確保する事。
				;
				ifdef	hyoka	;------------------------
				WtdIL_Name		equ	'WTD_h',0
				MusicMaxPart		equ	4	;廉価版は4 パート
				else	;--------------------------------
 = 'WTD',0			WtdIL_Name		equ	'WTD',0
 = 0014				MusicMaxPart		equ	20	;製品版は20パート
				endif	;--------------------------------
 = 0003				EffectMaxPart		equ	3	;効果音は3 パート

				;=======================================================================|
				;				Segment define				|
				;=======================================================================|
				ifdef	library	;---------------------	※　ライブラリ版

 0000				_TEXT	segment	para public 'CODE'
 0000				_TEXT	ends

 0000				DATA	segment	para public 'DATA'
 0000				DATA	ends

 0000				_BSS	segment	para public 'BSS'
 0000				_BSS	ends

				CGROUP	group	_TEXT
				DGROUP	group	DATA,_BSS

					assume	cs:CGROUP, ds:DGROUP, es:DGROUP

				else		;---------------------	※　IL版

				_TEXT	segment para public 'CODE'
				_TEXT	ends

				CGROUP	group	_TEXT
					assume	cs:CGROUP

				endif		;---------------------

				;=======================================================================|
				;				プログラム・コード			|
				;=======================================================================|
 0000				_TEXT	segment para public 'CODE'

					org	0000h			;明示の必要性？

					public	WanderSwanTotalSoundDriver_
 0000				WanderSwanTotalSoundDriver_:

				include	wtd_ilf.asm			;IL構造体,ILinfo構造体,ILファンクション
			      C ;=======================================================================|
			      C ;									|
			      C ;		Wander Swan Total Sound Driver				|
			      C ;				IL Struct define			|
			      C ;				IL Function Routine			|
			      C ;									|
			      C ;					Programmed by			|
			      C ;						A.Watanabe		|
			      C ;									|
			      C ;=======================================================================|
			      C ;****************************************************************
			      C ;*								*
			      C ;*		ＩＬの定義／データ群				*
			      C ;*								*
			      C ;****************************************************************
			      C ;===============================================================|
			      C ;		IL構造体定義					|
			      C ;===============================================================|
 0000			      C IL:							;IL構造体先頭
 0000 0000		      C IL_Link_Pos	dw	0				;未使用
 0002  0000		      C 		dw	0				;
 0004 0019		      C IL_N_Methods	dw	((offset IL_F_End)-(offset IL_GetInfo))/4	;ファンクション数
 0006 00C2 R		      C IL_GetInfo	dw	offset CGROUP:_GetInfo		;ILinfo構造体を得る
 0008  0000		      C 		dw	0				;far *TEST_GetInfo();
 000A 00C8 R		      C IL_F00		dw	offset CGROUP:_Stay		;
 000C  0000		      C 		dw	0				;
 000E 0178 R		      C IL_F01		dw	offset CGROUP:_StayOut		;
 0010  0000		      C 		dw	0				;
 0012 01C4 R		      C IL_F02		dw	offset CGROUP:_Init		;
 0014  0000		      C 		dw	0				;
 0016 01F4 R		      C IL_F03		dw	offset CGROUP:_MusicPlay	;
 0018  0000		      C 		dw	0				;
 001A 0364 R		      C IL_F04		dw	offset CGROUP:_MusicStop	;
 001C  0000		      C 		dw	0				;
 001E 03FD R		      C IL_F05		dw	offset CGROUP:_EffectPlay	;
 0020  0000		      C 		dw	0				;
 0022 0566 R		      C IL_F06		dw	offset CGROUP:_EffectStop	;
 0024  0000		      C 		dw	0				;
 0026 05C1 R		      C IL_F07		dw	offset CGROUP:_PcmPlay		;
 0028  0000		      C 		dw	0				;
 002A 06B5 R		      C IL_F08		dw	offset CGROUP:_PcmStop		;
 002C  0000		      C 		dw	0				;
 002E 06DB R		      C IL_F09		dw	offset CGROUP:_PcmVoiceSet	;
 0030  0000		      C 		dw	0				;
 0032 0717 R		      C IL_F10		dw	offset CGROUP:_SoftEmbSet	;
 0034  0000		      C 		dw	0				;
 0036 0753 R		      C IL_F11		dw	offset CGROUP:_ChangeFar	;
 0038  0000		      C 		dw	0				;
 003A 0766 R		      C IL_F12		dw	offset CGROUP:_SoundSetChannel	;
 003C  0000		      C 		dw	0				;
 003E 0773 R		      C IL_F13		dw	offset CGROUP:_SoundGetChannel	;
 0040  0000		      C 		dw	0				;
 0042 0777 R		      C IL_F14		dw	offset CGROUP:_SoundSetOutput	;
 0044  0000		      C 		dw	0				;
 0046 0784 R		      C IL_F15		dw	offset CGROUP:_SoundGetOutput	;
 0048  0000		      C 		dw	0				;
 004A 0788 R		      C IL_F16		dw	offset CGROUP:_SoundGetRandom	;
 004C  0000		      C 		dw	0				;
 004E 078C R		      C IL_F17		dw	offset CGROUP:_SetMusicVolume	;
 0050  0000		      C 		dw	0				;
 0052 07A9 R		      C IL_F18		dw	offset CGROUP:_GetMusicVolume	;
 0054  0000		      C 		dw	0				;
 0056 07BF R		      C IL_F19		dw	offset CGROUP:_SetEffectVolume	;
 0058  0000		      C 		dw	0				;
 005A 07DC R		      C IL_F20		dw	offset CGROUP:_GetEffectVolume	;
 005C  0000		      C 		dw	0				;
 005E 07F2 R		      C IL_F21		dw	offset CGROUP:_SetPcmVolume	;
 0060  0000		      C 		dw	0				;
 0062 0814 R		      C IL_F22		dw	offset CGROUP:_GetPcmVolume	;
 0064  0000		      C 		dw	0				;
 0066 082A R		      C IL_F23		dw	offset CGROUP:_SetFIFO		;
 0068  0000		      C 		dw	0				;
 006A			      C IL_F_End:
			      C ;===============================================================|
			      C ;		ILinfo構造体定義（全てポインタ）		|
			      C ;===============================================================|
 006A			      C ILinfo:							;ILinfo構造体先頭
 006A 007E R		      C ILinfo_ClassName	dw	offset CGROUP:ILinfoD_ClassName	;未使用
 006C  0000		      C 			dw	0				;
 006E 0085 R		      C ILinfo_Name		dw	offset CGROUP:ILinfoD_Name	;名前
 0070  0000		      C 			dw	0				;
 0072 0089 R		      C ILinfo_Version		dw	offset CGROUP:ILinfoD_Version	;バージョン
 0074  0000		      C 			dw	0				;
 0076 008E R		      C ILinfo_Description	dw	offset CGROUP:ILinfoD_Description
 0078  0000		      C 			dw	0				;
 007A 008F R		      C ILinfo_Depends		dw	offset CGROUP:ILinfoD_Depends	;未使用
 007C  0000		      C 			dw	0				;
			      C ;===============================================================|
			      C ;		ILinfo構造体の内容				|
			      C ;===============================================================|
 007E			      C ILinfoD_WTD:					;内容
 007E 57 54 44 5F 49 4C	      C ILinfoD_ClassName	db	'WTD_IL',0	;未使用
       00
 0085 57 54 44 00	      C ILinfoD_Name		db	wtdIL_Name	;名前
 0089 31 2E 30 63 00	      C ILinfoD_Version		db	wtdIL_Version	;バージョン
 008E 00		      C ILinfoD_Description	db	0		;未使用
 008F 0000		      C ILinfoD_Depends		dw	0		;未使用（ポインタ）
 0091  0000		      C 			dw	0		;
			      C ;****************************************************************
			      C ;*								*
			      C ;*		IL構造体の設定					*
			      C ;*								*
			      C ;****************************************************************
			      C ;===============================================================|
			      C ;		void	WTD_FucntionLoad()			|
			      C ;===============================================================|
			      C ;	引き数							|
			      C ;		WtdIL	Wtd_Function	/*構造体のポインタを*/	|
			      C ;	返り値							|
			      C ;		無し						|
			      C ;	処理							|
			      C ;		・WtdIL構造体の設定				|
			      C ;		　WtdIL構造体は、ライブラリを呼ぶ側が用意する。	|
			      C ;===============================================================|
			      C ifdef	library				;※　ライブラリ版のみ必要
			      C 
			      C 	public	WTD_FunctionLoad	;外部宣言
			      C 
 0093			      C WTD_FunctionLoad	proc	near c	uses ax cx si di ds es,
			      C 	Wtd_Function:word
			      C 
 0093  55		   *	    push   bp
 0094  8B EC		   *	    mov    bp, sp
 0096  50		   *	    push   ax
 0097  51		   *	    push   cx
 0098  56		   *	    push   si
 0099  57		   *	    push   di
 009A  1E		   *	    push   ds
 009B  06		   *	    push   es
 009C  1E		      C 	push	ds			;
 009D  07		      C 	pop	es			;es←DGROUP
 009E  8B 7E 04		      C 	mov	di,Wtd_Function		;di←Wtd_Functionのポインタ
			      C 
 00A1  0E		      C 	push	cs			;
 00A2  1F		      C 	pop	ds			;ds←CGROUP
 00A3  BE 0000 R	      C 	mov	si,offset CGROUP:IL	;di←IL構造体用のデータ
			      C 
 00A6  FC		      C 	cld				;インクリメントモード
 00A7  B9 0003		      C 	mov	cx,3			;
 00AA  F3/ A5		      C 	rep	movsw			;IL_Link_Pos, IL_Link_Methodの転送
			      C 
 00AC  2E: 8B 0E 0004 R	      C 	mov	cx,word ptr CS:[IL_N_Methods]	;構造体のサイズ計算
 00B1  8C C8		      C 	mov	ax,cs			;
			      C 	.repeat
 00B3			   *@C0001:
 00B3  A5		      C 		movsw			;
 00B4  AB		      C 		stosw			;
 00B5  83 C6 02		      C 		add	si,2		;
			      C 	.untilcxz
 00B8  E2 F9		   *	    loop   @C0001
			      C 
			      C 	ret				;
 00BA  07		   *	    pop    es
 00BB  1F		   *	    pop    ds
 00BC  5F		   *	    pop    di
 00BD  5E		   *	    pop    si
 00BE  59		   *	    pop    cx
 00BF  58		   *	    pop    ax
 00C0  5D		   *	    pop    bp
 00C1  C3		   *	    ret    00000h
 00C2			      C WTD_FunctionLoad	endp		;
			      C endif
			      C ;****************************************************************
			      C ;*								*
			      C ;*		ＩＬのファンクション				*
			      C ;*								*
			      C ;****************************************************************
			      C ;===============================================================|
			      C ;		far *TEST_GetInfo()				|
			      C ;===============================================================|
			      C ;	引き数							|
			      C ;		無し						|
			      C ;	返り値							|
			      C ;		dx,ax←ILinfo構造体のポインタ			|
			      C ;	処理							|
			      C ;		ILinfoポインタの取得				|
			      C ;===============================================================|
 00C2			      C _GetInfo	proc far c		;
 00C2  0E		      C 	push	cs			;
 00C3  5A		      C 	pop	dx			;LSI-C86
 00C4  B8 006A R	      C 	mov	ax,offset CGROUP:ILinfo	;dx:ax←far pointer
 00C7  CB		      C 	ret				;
 00C8			      C _GetInfo	endp			;
			      C ;===============================================================|
			      C ;	int	(far *Stay)();					|
			      C ;===============================================================|
			      C ;	引き数							|
			      C ;		無し						|
			      C ;	返り値							|
			      C ;		ax	00h	正常終了			|
			      C ;		ax	01h	heap領域が足りない		|
			      C ;	処理							|
			      C ;		WTD本体の常駐					|
			      C ;===============================================================|
 00C8			      C _Stay		proc far c	uses bx cx dx si di ds es	;
			      C 
 00C8  53		   *	    push   bx
 00C9  51		   *	    push   cx
 00CA  52		   *	    push   dx
 00CB  56		   *	    push   si
 00CC  57		   *	    push   di
 00CD  1E		   *	    push   ds
 00CE  06		   *	    push   es
 00CF  9C		      C 	pushf				;レジスタ保存
			      C 
 00D0  FA		      C 	cli				;割り込み禁止
			      C 
			      C ;---------------------------------------------------------------
			      C ;ワークエリアアドレスの取得
			      C 
			      C ;ワークエリアの取得
			      C 	WTD_WorkGet	ds,bx		;ワークエリアアドレス
			     1C ifdef	library	;------------------------	;※　ライブラリ版のみ必要
			     1C 
			     1C ifdef	IRAM	;---------------		;D-GROUP ＝ I-RAMの場合
 00D1  6A 00		     1C 		push	IRAM_Segment		;
 00D3  1F		     1C 		pop	ds			;
 00D4  BB 0000 R	     1C 		mov	bx,offset DGROUP:_WTD_Work
			     1C 
			     1C else	;-----------------------		;D-GROUP ≠ S-RAMの場合
			     1C 		push	SRAM_Segment		;（WonderWitch等）
			     1C 		pop	ds			;
			     1C 		mov	bx,offset DGROUP:_WTD_Work
			     1C endif	;-----------------------
			     1C 
			     1C else	;--------------------------------	;WonderWitch版
			     1C 		push	SRAM_Segment		;
			     1C 		pop	ds			;
			     1C 		mov	bx,ds:[ProcContext_heap]
			     1C endif	;--------------------------------
			      C 
			      C ;エラーチェック
 00D7  81 FB F000	      C 	cmp	bx,0f000h		;/* S-RAMは4096byte以上ある？ */
 00DB  72 06		      C 	jc	_Stay_00		;if (bx>0xF000) then ax=1:Retuen
 00DD  B8 0001		      C 	mov	ax,0001h		;/* 本体RAM容量が足りない。 */
 00E0  E9 008C		      C 	jmp	_Stay_End		;
 00E3			      C _Stay_00:
			      C 
			      C 
			      C ;ワーク全体の初期化(00hで埋める)
			      C ;メモリ書き込み
 00E3  FC		      C 	cld				;インクリメントモード
 00E4  1E		      C 	push	ds
 00E5  07		      C 	pop	es
 00E6  8D 3F		      C 	lea	di,[bx]			;es:di←ワークファーアドレス
 00E8  B9 1000		      C 	mov	cx,WTD_WorkSize		;ワークのサイズ分(1000h)
 00EB  33 C0		      C 	xor	ax,ax			;ax←0
 00ED  F3/ AA		      C 	rep	stosb			;書き込み
			      C 
			      C ;構造体アドレスの設定
 00EF  8D B7 0380	      C 	lea	si,[bx + WTD_WorkAdd_System]	;ds:si←System
			      C 
			      C ;---------------------------------------------------------------
			      C ;共通ワークの初期化
			      C 
			      C ;レジスタの設定　構造体のベースポインタの設定。
 00F3  6A 00		      C 	push	IRAM_Segment		;
 00F5  07		      C 	pop	es			;es←本体RAMセグメント
			      C 
			      C ;IntVectorの設定
 00F6  53		      C 	push	bx					;
			      C 
 00F7  B8 0000		      C 	mov	ax,0					;
 00FA  E8 16D3		      C 	call	IntVector_Get				;al←割り込みベクタ
 00FD  88 44 31		      C 	mov	ds:[si].WTD_Sys_InterruptBase,al	;保存
 0100  C1 E0 02		      C 	shl	ax,2			;読み込んだ値を4倍
 0103  8B D8		      C 	mov	bx,ax			;割り込みベクタのアドレス
			      C 
 0105  26: 8B 47 1C	      C 	mov	ax,es:[bx+SYS_INT_HBLANK_COUNTUP*4+0]	;タイマー
 0109  89 44 14		      C 	mov	ds:[si].WTD_Sys_OldIntvector+0,ax	;割り込み
 010C  26: 8B 47 1E	      C 	mov	ax,es:[bx+SYS_INT_HBLANK_COUNTUP*4+2]	;
 0110  89 44 16		      C 	mov	ds:[si].WTD_Sys_OldIntvector+2,ax	;復帰用に保存
			      C 
 0113  26: C7 47 1C 0000      C 	mov	es:[bx+SYS_INT_HBLANK_COUNTUP*4+0],offset CGROUP:I_Start
 0119  26: 8C 4F 1E	      C 	mov	es:[bx+SYS_INT_HBLANK_COUNTUP*4+2],cs	;アドレスの設定
			      C 
			      C ifndef	hyoka	;------------------------廉価版は無し
 011D  26: 8B 07	      C 	mov	ax,es:[bx+SYS_INT_SENDREADY*4+0]	;シリアルエンプティー
 0120  89 44 18		      C 	mov	ds:[si].WTD_Sys_OldIntvectorCom+0,ax	;割り込み
 0123  26: 8B 47 02	      C 	mov	ax,es:[bx+SYS_INT_SENDREADY*4+2]	;
 0127  89 44 1A		      C 	mov	ds:[si].WTD_Sys_OldIntvectorCom+2,ax	;復帰用に保存
			      C 
 012A  26: C7 07 17B4 R	      C 	mov	es:[bx+SYS_INT_SENDREADY*4+0],offset CGROUP:IC_Start
 012F  26: 8C 4F 02	      C 	mov	es:[bx+SYS_INT_SENDREADY*4+2],cs	;アドレスの設定
			      C endif	;--------------------------------
 0133  5B		      C 	pop	bx					;
			      C 
			      C ;タイマー
 0134  B8 007D		      C 	mov	ax,Timer_Tempo120			;
 0137  89 44 24		      C 	mov	ds:[si].WTD_Sys_Tempo,ax		;
 013A  33 C0		      C 	xor	ax,ax					;
 013C  89 44 26		      C 	mov	ds:[si].WTD_Sys_TempoCounter,ax		;
			      C 
			      C ;音色テーブル
 013F  B8 0180		      C 	mov	ax,IRAM_SoundVoiceTable			;
 0142  89 44 32		      C 	mov	ds:[si].WTD_Sys_VoiceTableOffset,ax	;
			      C 
			      C ;ソフト音量
 0145  B8 FFFF		      C 	mov	ax,0ffffh				;音量設定
 0148  88 44 21		      C 	mov	ds:[si].WTD_Sys_VolumeMusic,al		;
 014B  88 44 22		      C 	mov	ds:[si].WTD_Sys_VolumeEffect,al		;
 014E  B0 0F		      C 	mov	al,0fh					;
 0150  88 44 23		      C 	mov	ds:[si].WTD_Sys_VolumePcm,al		;
			      C 
			      C ;	mov	ax,bx					;
			      C ;	add	ax,WTD_WorkSize				;
 0153  8D 87 1000	      C 	lea	ax,[bx + WTD_WorkSize]			;FIFOバッファの設定
 0157  1E		      C 	push	ds					;ワークエリアの次
 0158  50		      C 	push	ax					;
 0159  68 1000		      C 	push	4096					;4096[Byte]確保
 015C  0E		      C 	push	cs					;
 015D  E8 06CA		      C 	call	near ptr _SetFIFO			;
 0160  83 C4 06		      C 	add	sp,+6					;
			      C 
			      C ;
			      C ;	その他、ワーク内容の初期化をする。
			      C ;
			      C 
			      C ;---------------------------------------------------------------
			      C ;デバイスの初期化
			      C 
			      C ifndef	hyoka	;------------------------廉価版は無し
 0163  E8 191C		      C 	call	C_open			;通信回線の初期化
			      C endif	;--------------------------------
			      C 
 0166  0E		      C 	push	cs			;
 0167  E8 005A		      C 	call	near ptr _Init		;ドライバーの初期化
 016A  E8 1667		      C 	call	T_open			;タイマーの初期化
			      C 
			      C ;---------------------------------------------------------------
			      C 
			      C ;正常終了
 016D  33 C0		      C 	xor	ax,ax			;正常終了(ax=0000h)
			      C 
 016F			      C _Stay_End:
			      C 
 016F  9D		      C 	popf				;レジスタ復帰
			      C 
			      C 	ret				;終了
 0170  07		   *	    pop    es
 0171  1F		   *	    pop    ds
 0172  5F		   *	    pop    di
 0173  5E		   *	    pop    si
 0174  5A		   *	    pop    dx
 0175  59		   *	    pop    cx
 0176  5B		   *	    pop    bx
 0177  CB		   *	    ret    00000h
 0178			      C _Stay		endp			;
			      C ;===============================================================|
			      C ;	int	(far *StayOut)();				|
			      C ;===============================================================|
			      C ;	引き数							|
			      C ;		無し						|
			      C ;	返り値							|
			      C ;		ax	00h	正常終了			|
			      C ;		ax	01h	常駐していない。		|
			      C ;	処理							|
			      C ;		WTD本体の常駐解除				|
			      C ;===============================================================|
 0178			      C _StayOut	proc far c	uses bx di si ds es
 0178  53		   *	    push   bx
 0179  57		   *	    push   di
 017A  56		   *	    push   si
 017B  1E		   *	    push   ds
 017C  06		   *	    push   es
 017D  9C		      C 	pushf				;
			      C 
 017E  FA		      C 	cli				;割り込み禁止
			      C 
			      C ;---------------------------------------------------------------
			      C ;デバイスの初期化
			      C 
 017F  E8 1664		      C 	call	T_close			;タイマー割り込みの停止、復帰
 0182  0E		      C 	push	cs			;
 0183  E8 003E		      C 	call	near ptr _Init		;ドライバーの初期化
			      C 
			      C ifndef	hyoka	;------------------------廉価版は無し
 0186  E8 1901		      C 	call	C_close			;通信回線の遮断
			      C endif	;--------------------------------
			      C 
			      C ;---------------------------------------------------------------
			      C ;ワークエリアの取得
			      C 
			      C 	WTD_WorkGet	ds,bx			;ワークエリアアドレスの取得
			     1C ifdef	library	;------------------------	;※　ライブラリ版のみ必要
			     1C 
			     1C ifdef	IRAM	;---------------		;D-GROUP ＝ I-RAMの場合
 0189  6A 00		     1C 		push	IRAM_Segment		;
 018B  1F		     1C 		pop	ds			;
 018C  BB 0000 R	     1C 		mov	bx,offset DGROUP:_WTD_Work
			     1C 
			     1C else	;-----------------------		;D-GROUP ≠ S-RAMの場合
			     1C 		push	SRAM_Segment		;（WonderWitch等）
			     1C 		pop	ds			;
			     1C 		mov	bx,offset DGROUP:_WTD_Work
			     1C endif	;-----------------------
			     1C 
			     1C else	;--------------------------------	;WonderWitch版
			     1C 		push	SRAM_Segment		;
			     1C 		pop	ds			;
			     1C 		mov	bx,ds:[ProcContext_heap]
			     1C endif	;--------------------------------
			      C 
			      C 	;構造体アドレスの設定
 018F  8D B7 0380	      C 	lea	si,[bx + WTD_WorkAdd_System]
			      C 
			      C ;---------------------------------------------------------------
			      C ;割り込み設定の復帰
			      C 
			      C ;レジスタの設定　構造体のベースポインタの設定。
 0193  6A 00		      C 	push	IRAM_Segment		;
 0195  07		      C 	pop	es			;es←本体RAMセグメント
			      C 
			      C ;IntVectorの復帰
 0196  53		      C 	push	bx					;
			      C 
 0197  33 DB		      C 	xor	bx,bx					;
 0199  8A 5C 31		      C 	mov	bl,ds:[si].WTD_Sys_InterruptBase	;bx←割り込みベクタ
 019C  C1 E3 02		      C 	shl	bx,2					;読み込んだ値を4倍(割り込みベクタのアドレス)
			      C ;	mov	bx,ax					;
			      C 
 019F  8B 44 14		      C 	mov	ax,ds:[si].WTD_Sys_OldIntvector+0	;
 01A2  26: 89 47 1C	      C 	mov	es:[bx+SYS_INT_HBLANK_COUNTUP*4+0],ax	;
 01A6  8B 44 16		      C 	mov	ax,ds:[si].WTD_Sys_OldIntvector+2	;
 01A9  26: 89 47 1E	      C 	mov	es:[bx+SYS_INT_HBLANK_COUNTUP*4+2],ax	;
			      C 
			      C ifndef	hyoka	;------------------------廉価版は無し
 01AD  8B 44 18		      C 	mov	ax,ds:[si].WTD_Sys_OldIntvectorCom+0	;
 01B0  26: 89 07	      C 	mov	es:[bx+SYS_INT_SENDREADY*4+0],ax	;
 01B3  8B 44 1A		      C 	mov	ax,ds:[si].WTD_Sys_OldIntvectorCom+2	;
 01B6  26: 89 47 02	      C 	mov	es:[bx+SYS_INT_SENDREADY*4+2],ax	;
			      C endif	;--------------------------------
 01BA  5B		      C 	pop	bx					;
			      C 
			      C ;
			      C ;	その他、設定の復帰を行う。
			      C ;
			      C ;---------------------------------------------------------------
			      C ;正常終了
			      C 
 01BB  33 C0		      C 	xor	ax,ax			;正常終了(ax=0000h)
			      C ;	jmp	_StayOut_End		;
			      C 
			      C ;---------------------------------------------------------------
 01BD			      C _StayOut_End:
			      C 
 01BD  9D		      C 	popf				;
			      C 	ret				;終了
 01BE  07		   *	    pop    es
 01BF  1F		   *	    pop    ds
 01C0  5E		   *	    pop    si
 01C1  5F		   *	    pop    di
 01C2  5B		   *	    pop    bx
 01C3  CB		   *	    ret    00000h
 01C4			      C _StayOut	endp			;
			      C ;===============================================================|
			      C ;	void	(far *Init)();					|
			      C ;===============================================================|
			      C ;	引き数							|
			      C ;		無し						|
			      C ;	返り値							|
			      C ;		無し						|
			      C ;	処理							|
			      C ;		デバイスの初期化				|
			      C ;===============================================================|
 01C4			      C _Init	proc far c	uses bp ax si ds
			      C 
			      C ;---------------------------------------------------------------
			      C ;ワークエリアの取得
			      C 
			      C 	WTD_WorkGet	ds,bp			;ワークエリアアドレスの取得
			     1C ifdef	library	;------------------------	;※　ライブラリ版のみ必要
			     1C 
			     1C ifdef	IRAM	;---------------		;D-GROUP ＝ I-RAMの場合
 01C4  55		   *	    push   bp
 01C5  50		   *	    push   ax
 01C6  56		   *	    push   si
 01C7  1E		   *	    push   ds
 01C8  6A 00		     1C 		push	IRAM_Segment		;
 01CA  1F		     1C 		pop	ds			;
 01CB  BD 0000 R	     1C 		mov	bp,offset DGROUP:_WTD_Work
			     1C 
			     1C else	;-----------------------		;D-GROUP ≠ S-RAMの場合
			     1C 		push	SRAM_Segment		;（WonderWitch等）
			     1C 		pop	ds			;
			     1C 		mov	bp,offset DGROUP:_WTD_Work
			     1C endif	;-----------------------
			     1C 
			     1C else	;--------------------------------	;WonderWitch版
			     1C 		push	SRAM_Segment		;
			     1C 		pop	ds			;
			     1C 		mov	bp,ds:[ProcContext_heap]
			     1C endif	;--------------------------------
			      C 
			      C 	;構造体アドレスの設定
 01CE  8D B6 0380	      C 	lea	si,[bp + WTD_WorkAdd_System]
			      C 
			      C 
			      C ;---------------------------------------------------------------
			      C ;演奏・効果音・PCMの停止。個別ワークの初期化
			      C 
 01D2  0E		      C 	push	cs			;
 01D3  E8 018E		      C 	call	near ptr _MusicStop	;演奏停止・割込周期の初期化
 01D6  0E		      C 	push	cs			;
 01D7  E8 038C		      C 	call	near ptr _EffectStop	;効果音発生停止
 01DA  0E		      C 	push	cs			;
 01DB  E8 04D7		      C 	call	near ptr _PcmStop	;PcmVoice発生停止
			      C 
			      C ;---------------------------------------------------------------
			      C ;デバイスの初期化
			      C 
 01DE  E8 1631		      C 	call	SP_init			;デバイスの初期化
			      C 
			      C ifndef	hyoka	;------------------------廉価版は無し
 01E1  E8 17C0		      C 	call	SM_init			;GM Resetの送信
			      C 
			      C 	;FIFO送信まで待つ。		;
			      C 	.repeat
 01E4			   *@C0002:
 01E4  E8 1931		      C 		call	IC_Send			;送信
 01E7  8B 44 2A		      C 		mov	ax,ds:[si].WTD_Sys_ComFIFO_Cnt
			      C 	.until	(ax==ds:[si].WTD_Sys_ComFIFO_Adr)
 01EA  3B 44 2C		   *	    cmp    ax, ds : [si] . WTD_Sys_ComFIFO_Adr
 01ED  75 F5		   *	    jne    @C0002
			      C endif	;--------------------------------
			      C 
			      C ;---------------------------------------------------------------
			      C 	ret				;終了
 01EF  1F		   *	    pop    ds
 01F0  5E		   *	    pop    si
 01F1  58		   *	    pop    ax
 01F2  5D		   *	    pop    bp
 01F3  CB		   *	    ret    00000h
 01F4			      C _Init	endp				;
			      C ;===============================================================|
			      C ;	char	(far *MusicPlay)(char far *Music);		|
			      C ;===============================================================|
			      C ;	引き数							|
			      C ;		char far *Music		曲データのアドレス	|
			      C ;	返り値							|
			      C ;		ax		Error Code			|
			      C ;				00h	正常終了		|
			      C ;				01h	曲データじゃ無い。	|
			      C ;				02h	ヴァージョンが違う。	|
			      C ;	処理							|
			      C ;		演奏を開始する					|
			      C ;===============================================================|
 01F4			      C _MusicPlay	proc far c	uses bx cx dx di si ds es,
			      C 	fptMusic:far ptr byte
			      C 
			      C ;---------------------------------------------------------------
			      C ;演奏の停止
			      C 
 01F4  55		   *	    push   bp
 01F5  8B EC		   *	    mov    bp, sp
 01F7  53		   *	    push   bx
 01F8  51		   *	    push   cx
 01F9  52		   *	    push   dx
 01FA  57		   *	    push   di
 01FB  56		   *	    push   si
 01FC  1E		   *	    push   ds
 01FD  06		   *	    push   es
 01FE  0E		      C 	push	cs			;
 01FF  E8 0162		      C 	call	near ptr _MusicStop	;演奏停止・割込周期の初期化
			      C 
			      C ;---------------------------------------------------------------
			      C ;割り込み禁止
			      C 
 0202  E4 B2		      C 	in	al,Int_Enable		;
 0204  24 7F		      C 	and	al,Int_HblankReset	;
 0206  E6 B2		      C 	out	Int_Enable,al		;
			      C 
			      C ;---------------------------------------------------------------
			      C ;ワークアドレスの取得
			      C 
			      C 	WTD_WorkGet	ds,bx			;ワークエリアアドレスの取得
			     1C ifdef	library	;------------------------	;※　ライブラリ版のみ必要
			     1C 
			     1C ifdef	IRAM	;---------------		;D-GROUP ＝ I-RAMの場合
 0208  6A 00		     1C 		push	IRAM_Segment		;
 020A  1F		     1C 		pop	ds			;
 020B  BB 0000 R	     1C 		mov	bx,offset DGROUP:_WTD_Work
			     1C 
			     1C else	;-----------------------		;D-GROUP ≠ S-RAMの場合
			     1C 		push	SRAM_Segment		;（WonderWitch等）
			     1C 		pop	ds			;
			     1C 		mov	bx,offset DGROUP:_WTD_Work
			     1C endif	;-----------------------
			     1C 
			     1C else	;--------------------------------	;WonderWitch版
			     1C 		push	SRAM_Segment		;
			     1C 		pop	ds			;
			     1C 		mov	bx,ds:[ProcContext_heap]
			     1C endif	;--------------------------------
			      C 
			      C ;構造体アドレスの設定
 020E  8D BF 0600	      C 	lea	di,[bx + WTD_WorkAdd_Ch0]
 0212  8D B7 0380	      C 	lea	si,[bx + WTD_WorkAdd_System]
			      C 
			      C ;---------------------------------------------------------------
			      C ;演奏アドレスの設定
			      C 
 0216  C4 46 06		      C 	les	ax,fptMusic
 0219  06		      C 	push	es
 021A  50		      C 	push	ax
 021B  0E		      C 	push	cs			;データ変換
 021C  E8 0534		      C 	call	near ptr _ChangeFar	;dxax = wtdIL.ChangeFar(*Music);
 021F  83 C4 04		      C 	add	sp,+4			;
 0222  89 44 06		      C 	mov	ds:[si].WTD_Sys_MusicOffset,ax	;アドレスの設定
 0225  89 54 08		      C 	mov	ds:[si].WTD_Sys_MusicSegment,dx	;
			      C 
			      C ;ポインタの設定
 0228  8E C2		      C 	mov	es,dx			;
 022A  8B D8		      C 	mov	bx,ax			;es:bx←曲データ先頭アドレス
			      C 
			      C ;---------------------------------------------------------------
			      C ;データ形式チェック
			      C 
			      C 	;ヘッダー文字列チェック
			      C 	.if	(word ptr es:[bx].WTD_Mus_Name!='TW')	;'WTD',0
 022C  26: 81 3F 5457	   *	    cmp    word ptr es : [bx] . WTD_Mus_Name, 'TW'
 0231  74 06		   *	    je     @C0004
 0233  B8 0001		      C 		mov	ax,1				;
 0236  E9 011C		      C 		jmp	_MusicPlay_End			;
			      C 	.endif
 0239			   *@C0004:
			      C 
			      C 	;バージョンチェック
 0239  26: 8B 47 04	      C 	mov	ax,es:[bx].WTD_Mus_Version	;
 023D  86 E0		      C 	xchg	ah,al				;ax←Music Data Version
			      C 	.if	(ax>WTdIL_Version_N)
 023F  3D 010C		   *	    cmp    ax, WTdIL_Version_N
 0242  76 06		   *	    jbe    @C0006
 0244  B8 0002		      C 		mov	ax,2			;
 0247  E9 010B		      C 		jmp	_MusicPlay_End		;
			      C 	.endif
 024A			   *@C0006:
 024A			      C _MusicPlay_Chk2:
			      C 
			      C 
			      C ;---------------------------------------------------------------
			      C ;データ登録
			      C 
			      C 	;初期設定
 024A  26: 8A 6F 09	      C 	mov	ch,es:[bx].WTD_Mus_Voice	;数の取得 Voice
 024E  26: 8A 4F 08	      C 	mov	cl,es:[bx].WTD_Mus_Emb		;数の取得 Emb
 0252  53		      C 	push	bx				;
 0253  26: 8B 5F 0E	      C 	mov	bx,es:[bx].WTD_Mus_DataAdr	;
			      C 
			      C 	;WS内蔵PCM波形データの登録
			      C 	.while	(ch!=0)
 0257  EB 15		   *	    jmp    @C0008
 0259			   *@C0009:
 0259  33 C0		      C 		xor	ax,ax				;
 025B  26: 8A 07	      C 		mov	al,es:[bx]			;音色番号
 025E  43		      C 		inc	bx				;
 025F  06		      C 		push	es				;
 0260  53		      C 		push	bx				;波形データ
 0261  50		      C 		push	ax				;
 0262  0E		      C 		push	cs				;
 0263  E8 0475		      C 		call	near ptr _PcmVoiceSet		;登録
 0266  83 C4 06		      C 		add	sp,+6				;
 0269  83 C3 10		      C 		add	bx,16				;
 026C  FE CD		      C 		dec	ch				;
			      C 	.endw
 026E			   *@C0008:
 026E  0A ED		   *	    or	ch, ch
 0270  75 E7		   *	    jne    @C0009
			      C 
			      C 	;エンベロープデータの登録
			      C 	.while	(cl!=0)
 0272  EB 15		   *	    jmp    @C000B
 0274			   *@C000C:
 0274  33 C0		      C 		xor	ax,ax				;
 0276  26: 8A 07	      C 		mov	al,es:[bx]			;音色番号
 0279  43		      C 		inc	bx				;
 027A  06		      C 		push	es				;
 027B  53		      C 		push	bx				;エンベロープデータ
 027C  50		      C 		push	ax				;
 027D  0E		      C 		push	cs				;
 027E  E8 0496		      C 		call	near ptr _SoftEmbSet		;登録
 0281  83 C4 06		      C 		add	sp,+6				;
 0284  83 C3 10		      C 		add	bx,16				;
 0287  FE C9		      C 		dec	cl				;
			      C 	.endw
 0289			   *@C000B:
 0289  0A C9		   *	    or	cl, cl
 028B  75 E7		   *	    jne    @C000C
			      C 
 028D  5B		      C 	pop	bx				;レジスタ復帰
			      C 
			      C ;---------------------------------------------------------------
			      C ;個別ワークの設定
			      C 
			      C ;チャンネル数の取得
 028E  26: 8A 6F 0A	      C 	mov	ch,es:[bx].WTD_Mus_Part	;チャンネル数の取得
			      C 	.if	(ch>MusicMaxPart)	;パート数チェック
 0292  80 FD 14		   *	    cmp    ch, MusicMaxPart
 0295  76 02		   *	    jbe    @C000E
 0297  B5 14		      C 		mov	ch,MusicMaxPart		;最大値を越えてたら最大値に。
			      C 	.endif
 0299			   *@C000E:
			      C 
			      C ;演奏パート数保存
 0299  51		      C 	push	cx			;レジスタ保存
 029A  B1 00		      C 	mov	cl,0			;トラック番号用カウンタ
 029C  83 C3 10		      C 	add	bx,WTD_Mus_PartAdr	;演奏アドレス
			      C 
			      C ;ワーク全体の初期化(00hで埋める)
			      C ;メモリ書き込み
 029F  FC		      C 	cld				;インクリメントモード
 02A0  57		      C 	push	di			;es:di←ワークファーアドレス
 02A1  51		      C 	push	cx			;
 02A2  06		      C 	push	es			;
			      C ;	mov	ax,ds			;
			      C ;	mov	es,ax			;
 02A3  1E		      C 	push	ds
 02A4  07		      C 	pop	es
 02A5  B0 40		      C 	mov	al,WTD_WorkChSize / 2	;Wordなので、2で割る。
 02A7  F6 E5		      C 	mul	ch			;
 02A9  8B C8		      C 	mov	cx,ax			;パート個別構造体(080h * 20 / 2)
 02AB  33 C0		      C 	xor	ax,ax			;ax←0
 02AD  F3/ AB		      C 	rep	stosw			;書き込み
 02AF  07		      C 	pop	es			;
 02B0  59		      C 	pop	cx			;
 02B1  5F		      C 	pop	di			;
			      C 
			      C 	.repeat
 02B2			   *@C0010:
			      C ;	xor	ax,ax				;Stosbによる初期化
			      C ;	mov	ds:[di].WTD_FlagControl,ax	;
			      C ;	mov	ds:[di].WTD_FlagTai,al		;
			      C ;	mov	ds:[di].WTD_FlagSharp,al	;
			      C ;	mov	ds:[di].WTD_FlagFlat,al		;
			      C ;	mov	ds:[di].WTD_Channel,cl		;
			      C ;	mov	ds:[di].WTD_KeyOffTime,ax	;
			      C ;	mov	ds:[di].WTD_KeyOnDelay,ax	;
			      C ;	mov	ds:[di].WTD_KeyShift,al		;
			      C ;	mov	ds:[di].WTD_KeySetPointer,al	;
			      C ;	mov	ds:[di].WTD_ModDecay,ax		;
			      C ;	mov	ds:[di].WTD_ModLevel,al		;
			      C ;	mov	ds:[di].WTD_BendDetune,ax	;
			      C ;	mov	ds:[di].WTD_BendEmbRate,al	;
			      C ;	mov	ds:[di].WTD_BendEmbMaxMin,al	;
			      C ;	mov	ds:[di].WTD_BendEmbLevelSet,al	;
			      C ;	mov	ds:[di].WTD_ExprDetune,ax	;
			      C ;	mov	ds:[di].WTD_ExprEmbRate,al	;
			      C ;	mov	ds:[di].WTD_ExprEmbMaxMin,al	;
			      C ;	mov	ds:[di].WTD_ExprEmbLevelSet,al	;
			      C ;	mov	ds:[di].WTD_PanDetune,ax	;
			      C ;	mov	ds:[di].WTD_PanEmbRate,al	;
			      C ;	mov	ds:[di].WTD_PanEmbMaxMin,al	;
			      C ;	mov	ds:[di].WTD_PanEmbLevelSet,al	;
			      C ;	mov	ds:[di].WTD_GateTimeStepLast,ax	;
			      C ;	mov	ds:[di].WTD_GateTimeStepFirst,ax
			      C ;	mov	ds:[di].WTD_Expr,al		;
			      C ;	mov	ds:[di].WTD_ExprSet,al		;初期値0にしておくこと。
 02B2  B8 0001		      C 	mov	ax,1				;
 02B5  88 45 3B		      C 	mov	ds:[di].WTD_BendEmbCounter,al	;
 02B8  88 45 4F		      C 	mov	ds:[di].WTD_ExprEmbCounter,al	;
 02BB  88 45 6F		      C 	mov	ds:[di].WTD_PanEmbCounter,al	;
 02BE  89 45 14		      C 	mov	ds:[di].WTD_Leng,ax		;
 02C1  89 45 16		      C 	mov	ds:[di].WTD_LengCounter,ax	;
 02C4  88 45 5A		      C 	mov	ds:[di].WTD_VolumeUpDown,al	;
 02C7  B8 0004		      C 	mov	ax,04h				;
 02CA  88 45 54		      C 	mov	ds:[di].WTD_Octave,al		;
 02CD  B8 0008		      C 	mov	ax,08h				;
 02D0  88 45 55		      C 	mov	ds:[di].WTD_GateTime8,al	;
 02D3  B8 000C		      C 	mov	ax,0ch				;
 02D6  88 45 39		      C 	mov	ds:[di].WTD_BendEmbAddress,al	;
 02D9  88 45 4D		      C 	mov	ds:[di].WTD_ExprEmbAddress,al	;
 02DC  88 45 6D		      C 	mov	ds:[di].WTD_PanEmbAddress,al	;
 02DF  B8 0030		      C 	mov	ax,48				;
 02E2  89 45 18		      C 	mov	ds:[di].WTD_LengDefault,ax	;
 02E5  B8 0040		      C 	mov	ax,64				;
 02E8  88 45 61		      C 	mov	ds:[di].WTD_Pan,al		;
 02EB  B8 0064		      C 	mov	ax,100				;
 02EE  88 45 3F		      C 	mov	ds:[di].WTD_Velocity,al		;ExprPanと同一
 02F1  B8 007F		      C 	mov	ax,127				;
 02F4  88 45 29		      C 	mov	ds:[di].WTD_AcsentVelocity,al	;
 02F7  B8 2000		      C 	mov	ax,8192				;
 02FA  89 45 2C		      C 	mov	ds:[di].WTD_Bend,ax		;
 02FD  B8 FFFF		      C 	mov	ax,0ffffh			;
 0300  88 45 11		      C 	mov	ds:[di].WTD_Program,al		;
 0303  88 45 75		      C 	mov	ds:[di].WTD_Program2nd,al	;
 0306  88 45 76		      C 	mov	ds:[di].WTD_Program3rd,al	;
 0309  88 45 10		      C 	mov	ds:[di].WTD_LoopCountPointer,al	;
 030C  88 45 1F		      C 	mov	ds:[di].WTD_Key,al		;
 030F  88 45 20		      C 	mov	ds:[di].WTD_KeySet + 0,al	;
 0312  88 45 21		      C 	mov	ds:[di].WTD_KeySet + 1,al	;
 0315  88 45 22		      C 	mov	ds:[di].WTD_KeySet + 2,al	;
 0318  88 45 23		      C 	mov	ds:[di].WTD_KeySet + 3,al	;
 031B  88 45 24		      C 	mov	ds:[di].WTD_KeySet + 4,al	;
 031E  88 45 25		      C 	mov	ds:[di].WTD_KeySet + 5,al	;
 0321  88 45 26		      C 	mov	ds:[di].WTD_KeySet + 6,al	;
 0324  88 45 27		      C 	mov	ds:[di].WTD_KeySet + 7,al	;
 0327  26: 8B 07	      C 	mov	ax,es:[bx]			;
 032A  89 45 06		      C 	mov	ds:[di].WTD_Address,ax		;
			      C 
			      C ;	その他の設定
 032D  81 C7 0080	      C 	add	di,WTD_WorkChSize	;構造体分、加算
 0331  83 C3 02		      C 	add	bx,2			;アドレスインクリメント
 0334  FE C1		      C 	inc	cl			;
 0336  FE CD		      C 	dec	ch			;
			      C 	.until	(zero?)
 0338  74 03 E9 FF75	   *	    jne    @C0010
			      C 
 033D  59		      C 	pop	cx			;レジスタ復帰
			      C ;---------------------------------------------------------------
			      C ;共通ワークの設定
			      C 
			      C ;演奏フラグのセット
 033E  8B 04		      C 	mov	ax,ds:[si].WTD_Sys_Flag			;
 0340  83 C8 01		      C 	or	ax,WTD_Sys_Music			;演奏イネーブル
 0343  89 04		      C 	mov	ds:[si].WTD_Sys_Flag,ax			;終了リセット
			      C 
 0345  88 6C 28		      C 	mov	ds:[si].WTD_Sys_MusicPart,ch		;パート数
			      C ;
			      C ;	その他の設定
			      C ;
			      C 
			      C ;タイマー（効果音、PCMは必要無し）
 0348  B8 007D		      C 	mov	ax,Timer_Tempo120			;
 034B  89 44 24		      C 	mov	ds:[si].WTD_Sys_Tempo,ax		;
 034E  33 C0		      C 	xor	ax,ax					;
 0350  89 44 26		      C 	mov	ds:[si].WTD_Sys_TempoCounter,ax		;
			      C 
			      C ;---------------------------------------------------------------
			      C 
			      C ;エラー無し
 0353  33 C0		      C 	xor	ax,ax			;ax←0
			      C 
 0355			      C _MusicPlay_End:
			      C 
 0355  E4 B2		      C 	in	al,Int_Enable		;
 0357  0C 80		      C 	or	al,Int_HblankSet	;
 0359  E6 B2		      C 	out	Int_Enable,al		;
			      C 
			      C 	ret				;終了
 035B  07		   *	    pop    es
 035C  1F		   *	    pop    ds
 035D  5E		   *	    pop    si
 035E  5F		   *	    pop    di
 035F  5A		   *	    pop    dx
 0360  59		   *	    pop    cx
 0361  5B		   *	    pop    bx
 0362  5D		   *	    pop    bp
 0363  CB		   *	    ret    00000h
 0364			      C _MusicPlay	endp			;
			      C ;===============================================================|
			      C ;	void	(far *MusicStop)();				|
			      C ;===============================================================|
			      C ;	引き数							|
			      C ;		無し						|
			      C ;	返り値							|
			      C ;		無し						|
			      C ;	処理							|
			      C ;		演奏の終了					|
			      C ;===============================================================|
 0364			      C _MusicStop	proc far c	uses bp ax cx dx di si ds
			      C 
 0364  55		   *	    push   bp
 0365  50		   *	    push   ax
 0366  51		   *	    push   cx
 0367  52		   *	    push   dx
 0368  57		   *	    push   di
 0369  56		   *	    push   si
 036A  1E		   *	    push   ds
 036B  E4 B2		      C 	in	al,Int_Enable		;
 036D  24 7F		      C 	and	al,Int_HblankReset	;
 036F  E6 B2		      C 	out	Int_Enable,al		;
			      C 
			      C ;---------------------------------------------------------------
			      C ;ワークアドレスの取得
			      C 
			      C 	WTD_WorkGet	ds,bp			;ワークエリアアドレスの取得
			     1C ifdef	library	;------------------------	;※　ライブラリ版のみ必要
			     1C 
			     1C ifdef	IRAM	;---------------		;D-GROUP ＝ I-RAMの場合
 0371  6A 00		     1C 		push	IRAM_Segment		;
 0373  1F		     1C 		pop	ds			;
 0374  BD 0000 R	     1C 		mov	bp,offset DGROUP:_WTD_Work
			     1C 
			     1C else	;-----------------------		;D-GROUP ≠ S-RAMの場合
			     1C 		push	SRAM_Segment		;（WonderWitch等）
			     1C 		pop	ds			;
			     1C 		mov	bp,offset DGROUP:_WTD_Work
			     1C endif	;-----------------------
			     1C 
			     1C else	;--------------------------------	;WonderWitch版
			     1C 		push	SRAM_Segment		;
			     1C 		pop	ds			;
			     1C 		mov	bp,ds:[ProcContext_heap]
			     1C endif	;--------------------------------
			      C 
			      C ;構造体アドレスの設定
 0377  8D BE 0600	      C 	lea	di,[bp + WTD_WorkAdd_Ch0]
 037B  8D B6 0380	      C 	lea	si,[bp + WTD_WorkAdd_System]
			      C 
			      C ;---------------------------------------------------------------
			      C ;個別構造体設定
			      C 
			      C ;チャンネル数
 037F  33 C9		      C 	xor	cx,cx					;
 0381  8A 6C 28		      C 	mov	ch,ds:[si].WTD_Sys_MusicPart		;使用トラック数
			      C 	.while	(ch!=0)
 0384  EB 53		   *	    jmp    @C0012
 0386			   *@C0013:
 0386  8A 4D 05		      C 		mov	cl,ds:[di].WTD_Channel		;
			      C 
			      C 		;初期化すべき事項
 0389  B8 003F		      C 		mov	ax,003Fh		;演奏終了
 038C  09 05		      C 		or	ds:[di].WTD_FlagControl,ax
			      C 
 038E  BA 1634 R	      C 		mov	dx,offset CGROUP:I_Table_KeyOff
 0391  E8 1214		      C 		call	I_Table_Jump		;キーオフ
			      C 
 0394  B8 0000		      C 		mov	ax,0			;エクスプレッション = 0
 0397  BA 165A R	      C 		mov	dx,offset CGROUP:I_Table_Volume
 039A  E8 120B		      C 		call	I_Table_Jump		;(エンベロープ音量。)
			      C 
 039D  B8 2000		      C 		mov	ax,8192			;ベンド = 8192
 03A0  BA 16EC R	      C 		mov	dx,offset CGROUP:I_Table_Frection
 03A3  E8 1202		      C 		call	I_Table_Jump		;
			      C 
 03A6  B8 0000		      C 		mov	ax,0			;音色 = 0
 03A9  BA 1720 R	      C 		mov	dx,offset CGROUP:I_Table_Voice
 03AC  E8 11F9		      C 		call	I_Table_Jump		;
			      C 
			      C ifndef	hyoka	;------------------------廉価版は無し
 03AF  B8 0040		      C 		mov	ax,64			;パンポット = 64
 03B2  B1 0A		      C 		mov	cl,MIDI_Ctrl_Pan	;
 03B4  BA 1760 R	      C 		mov	dx,offset CGROUP:I_Table_CtrlChgB
 03B7  E8 11EE		      C 		call	I_Table_Jump		;
			      C endif	;--------------------------------
			      C 
			      C ifndef	hyoka	;------------------------廉価版は無し
 03BA  B8 0064		      C 		mov	ax,100			;音量 = 100
 03BD  B1 07		      C 		mov	cl,MIDI_Ctrl_Volume	;
 03BF  BA 1760 R	      C 		mov	dx,offset CGROUP:I_Table_CtrlChgB
 03C2  E8 11E3		      C 		call	I_Table_Jump		;
			      C endif	;--------------------------------
			      C 
 03C5  B8 0000		      C 		mov	ax,0			;モード　初期化
 03C8  BA 178C R	      C 		mov	dx,offset CGROUP:I_Table_Mode
 03CB  E8 11DA		      C 		call	I_Table_Jump		;
			      C 
 03CE  B8 8000		      C 		mov	ax,8000h		;演奏終了
 03D1  09 05		      C 		or	ds:[di].WTD_FlagControl,ax
			      C 
			      C ;		その他
			      C ;		to do	あれば
			      C 
 03D3  81 C7 0080	      C 		add	di,WTD_WorkChSize	;構造体分、加算
 03D7  FE CD		      C 		dec	ch			;
			      C 	.endw
 03D9			   *@C0012:
 03D9  0A ED		   *	    or	ch, ch
 03DB  75 A9		   *	    jne    @C0013
			      C 
			      C ;---------------------------------------------------------------
			      C ;共通構造体設定
			      C 
 03DD  8B 04		      C 	mov	ax,ds:[si].WTD_Sys_Flag			;
 03DF  83 E0 FE		      C 	and	ax,WTD_Sys_MusicR			;演奏ディセーブル
 03E2  89 04		      C 	mov	ds:[si].WTD_Sys_Flag,ax			;終了リセット
			      C ;
			      C ;	その他
			      C ;
			      C 
			      C ;タイマー（効果音、PCMは必要無し）
 03E4  B8 007D		      C 	mov	ax,Timer_Tempo120			;
 03E7  89 44 24		      C 	mov	ds:[si].WTD_Sys_Tempo,ax		;
 03EA  33 C0		      C 	xor	ax,ax					;
 03EC  89 44 26		      C 	mov	ds:[si].WTD_Sys_TempoCounter,ax		;
			      C 
			      C ;---------------------------------------------------------------
			      C 
 03EF  E4 B2		      C 	in	al,Int_Enable		;
 03F1  0C 80		      C 	or	al,Int_HblankSet	;
 03F3  E6 B2		      C 	out	Int_Enable,al		;
			      C 
			      C 	ret				;終了
 03F5  1F		   *	    pop    ds
 03F6  5E		   *	    pop    si
 03F7  5F		   *	    pop    di
 03F8  5A		   *	    pop    dx
 03F9  59		   *	    pop    cx
 03FA  58		   *	    pop    ax
 03FB  5D		   *	    pop    bp
 03FC  CB		   *	    ret    00000h
 03FD			      C _MusicStop	endp			;
			      C ;===============================================================|
			      C ;	char	(far *EffectPlay)(char far *Effect);		|
			      C ;===============================================================|
			      C ;	引き数							|
			      C ;		char far *Effect	効果音データのアドレス	|
			      C ;	返り値							|
			      C ;		ax			Error Code		|
			      C ;				00h	正常終了		|
			      C ;				01h	曲データじゃ無い。	|
			      C ;				02h	ヴァージョンが違う。	|
			      C ;	処理							|
			      C ;		効果音の発生					|
			      C ;===============================================================|
 03FD			      C _EffectPlay	proc far c	uses bx cx dx di si ds es,
			      C 	fptEffect:far ptr byte
			      C 
			      C ;---------------------------------------------------------------
			      C ;演奏の停止
			      C 
 03FD  55		   *	    push   bp
 03FE  8B EC		   *	    mov    bp, sp
 0400  53		   *	    push   bx
 0401  51		   *	    push   cx
 0402  52		   *	    push   dx
 0403  57		   *	    push   di
 0404  56		   *	    push   si
 0405  1E		   *	    push   ds
 0406  06		   *	    push   es
 0407  0E		      C 	push	cs			;
 0408  E8 015B		      C 	call	near ptr _EffectStop	;演奏停止・割込周期の初期化
			      C 
			      C ;---------------------------------------------------------------
			      C ;割り込み禁止
			      C 
 040B  E4 B2		      C 	in	al,Int_Enable		;
 040D  24 7F		      C 	and	al,Int_HblankReset	;
 040F  E6 B2		      C 	out	Int_Enable,al		;
			      C 
			      C ;---------------------------------------------------------------
			      C ;ワークアドレスの取得
			      C 
			      C 	WTD_WorkGet	ds,bx			;ワークエリアアドレスの取得
			     1C ifdef	library	;------------------------	;※　ライブラリ版のみ必要
			     1C 
			     1C ifdef	IRAM	;---------------		;D-GROUP ＝ I-RAMの場合
 0411  6A 00		     1C 		push	IRAM_Segment		;
 0413  1F		     1C 		pop	ds			;
 0414  BB 0000 R	     1C 		mov	bx,offset DGROUP:_WTD_Work
			     1C 
			     1C else	;-----------------------		;D-GROUP ≠ S-RAMの場合
			     1C 		push	SRAM_Segment		;（WonderWitch等）
			     1C 		pop	ds			;
			     1C 		mov	bx,offset DGROUP:_WTD_Work
			     1C endif	;-----------------------
			     1C 
			     1C else	;--------------------------------	;WonderWitch版
			     1C 		push	SRAM_Segment		;
			     1C 		pop	ds			;
			     1C 		mov	bx,ds:[ProcContext_heap]
			     1C endif	;--------------------------------
			      C 
			      C ;構造体アドレスの設定
 0417  8D BF 0400	      C 	lea	di,[bx + WTD_WorkAdd_ECh0]
 041B  8D B7 0380	      C 	lea	si,[bx + WTD_WorkAdd_System]
			      C 
			      C ;---------------------------------------------------------------
			      C ;演奏アドレスの設定
			      C 
 041F  C4 46 06		      C 	les	ax,fptEffect
 0422  06		      C 	push	es
 0423  50		      C 	push	ax
 0424  0E		      C 	push	cs			;データ変換
 0425  E8 032B		      C 	call	near ptr _ChangeFar	;dxax = wtdIL.ChangeFar(*Effect);
 0428  83 C4 04		      C 	add	sp,+4			;
 042B  89 44 0A		      C 	mov	ds:[si].WTD_Sys_EffectOffset,ax		;アドレスの設定
 042E  89 54 0C		      C 	mov	ds:[si].WTD_Sys_EffectSegment,dx	;
			      C 
			      C ;ポインタの設定
 0431  8E C2		      C 	mov	es,dx			;
 0433  8B D8		      C 	mov	bx,ax			;es:bx←曲データ先頭アドレス
			      C 
			      C ;---------------------------------------------------------------
			      C ;データ形式チェック
			      C 
			      C 	;ヘッダー文字列チェック
			      C 	.if	(word ptr es:[bx].WTD_Mus_Name!='TW')	;'WTD',0
 0435  26: 81 3F 5457	   *	    cmp    word ptr es : [bx] . WTD_Mus_Name, 'TW'
 043A  74 06		   *	    je     @C0015
 043C  B8 0001		      C 		mov	ax,1					;
 043F  E9 0115		      C 		jmp	_EffectPlay_End				;
			      C 	.endif
 0442			   *@C0015:
			      C 
			      C 	;バージョンチェック
 0442  26: 8B 47 04	      C 	mov	ax,es:[bx].WTD_Mus_Version	;
 0446  86 E0		      C 	xchg	ah,al				;ax←Effect Data Version
			      C 	.if	(ax>WTdIL_Version_N)
 0448  3D 010C		   *	    cmp    ax, WTdIL_Version_N
 044B  76 06		   *	    jbe    @C0017
 044D  B8 0002		      C 		mov	ax,2			;
 0450  E9 0104		      C 		jmp	_EffectPlay_End		;
			      C 	.endif
 0453			   *@C0017:
			      C 
			      C 
			      C ;---------------------------------------------------------------
			      C ;データ登録
			      C 
			      C 	;初期設定
 0453  26: 8A 6F 09	      C 	mov	ch,es:[bx].WTD_Mus_Voice	;数の取得 Voice
 0457  26: 8A 4F 08	      C 	mov	cl,es:[bx].WTD_Mus_Emb		;数の取得 Emb
 045B  53		      C 	push	bx				;
 045C  26: 8B 5F 0E	      C 	mov	bx,es:[bx].WTD_Mus_DataAdr	;
			      C 
			      C 	;WS内蔵PCM波形データの登録
			      C 	.while	(ch!=0)
 0460  EB 15		   *	    jmp    @C0019
 0462			   *@C001A:
 0462  33 C0		      C 		xor	ax,ax				;
 0464  26: 8A 07	      C 		mov	al,es:[bx]			;音色番号
 0467  43		      C 		inc	bx				;
 0468  06		      C 		push	es				;
 0469  53		      C 		push	bx				;波形データ
 046A  50		      C 		push	ax				;
 046B  0E		      C 		push	cs				;
 046C  E8 026C		      C 		call	near ptr _PcmVoiceSet		;登録
 046F  83 C4 06		      C 		add	sp,+6				;
 0472  83 C3 10		      C 		add	bx,16				;
 0475  FE CD		      C 		dec	ch				;
			      C 	.endw
 0477			   *@C0019:
 0477  0A ED		   *	    or	ch, ch
 0479  75 E7		   *	    jne    @C001A
			      C 
			      C 	;エンベロープデータの登録
			      C 	.while	(cl!=0)
 047B  EB 15		   *	    jmp    @C001C
 047D			   *@C001D:
 047D  33 C0		      C 		xor	ax,ax				;
 047F  26: 8A 07	      C 		mov	al,es:[bx]			;音色番号
 0482  43		      C 		inc	bx				;
 0483  06		      C 		push	es				;
 0484  53		      C 		push	bx				;エンベロープデータ
 0485  50		      C 		push	ax				;
 0486  0E		      C 		push	cs				;
 0487  E8 028D		      C 		call	near ptr _SoftEmbSet		;登録
 048A  83 C4 06		      C 		add	sp,+6				;
 048D  83 C3 10		      C 		add	bx,16				;
 0490  FE C9		      C 		dec	cl				;
			      C 	.endw
 0492			   *@C001C:
 0492  0A C9		   *	    or	cl, cl
 0494  75 E7		   *	    jne    @C001D
			      C 
 0496  5B		      C 	pop	bx				;レジスタ復帰
			      C 
			      C ;---------------------------------------------------------------
			      C ;個別ワークの設定
			      C 
			      C ;チャンネル数の取得
 0497  26: 8A 6F 0A	      C 	mov	ch,es:[bx].WTD_Mus_Part	;チャンネル数の取得
 049B  80 FD 03		      C 	cmp	ch,EffectMaxPart	;パート数チェック
 049E  72 02		      C 	jc	_EffectPlay_Step2	;
 04A0  B5 03		      C 	mov	ch,EffectMaxPart	;最大値を越えてたら最大値に。
 04A2			      C _EffectPlay_Step2:			;
			      C 
			      C ;演奏パート数保存
 04A2  51		      C 	push	cx			;レジスタ保存
 04A3  B1 00		      C 	mov	cl,0			;トラック番号用カウンタ
 04A5  83 C3 10		      C 	add	bx,WTD_Mus_PartAdr	;演奏アドレス
			      C 
			      C ;ワーク全体の初期化(00hで埋める)
			      C ;メモリ書き込み
 04A8  FC		      C 	cld				;インクリメントモード
 04A9  57		      C 	push	di			;es:di←ワークファーアドレス
 04AA  51		      C 	push	cx			;
 04AB  06		      C 	push	es			;
			      C ;	mov	ax,ds			;
			      C ;	mov	es,ax			;
 04AC  1E		      C 	push	ds
 04AD  07		      C 	pop	es
 04AE  B0 40		      C 	mov	al,WTD_WorkChSize / 2	;Wordなので、2で割る。
 04B0  F6 E5		      C 	mul	ch			;
 04B2  8B C8		      C 	mov	cx,ax			;パート個別構造体(080h * 20 / 2)
 04B4  33 C0		      C 	xor	ax,ax			;ax←0
 04B6  F3/ AB		      C 	rep	stosw			;書き込み
 04B8  07		      C 	pop	es			;
 04B9  59		      C 	pop	cx			;
 04BA  5F		      C 	pop	di			;
			      C 
			      C 	.repeat
 04BB			   *@C001F:
 04BB  C7 05 4000	      C 	mov	ds:[di].WTD_FlagControl,WTD_Ctrl_Effect
			      C ;	xor	ax,ax				;Stosbによる初期化
			      C ;	mov	ds:[di].WTD_FlagControl,ax	;
			      C ;	mov	ds:[di].WTD_FlagTai,al		;
			      C ;	mov	ds:[di].WTD_FlagSharp,al	;
			      C ;	mov	ds:[di].WTD_FlagFlat,al		;
			      C ;	mov	ds:[di].WTD_Channel,cl		;
			      C ;	mov	ds:[di].WTD_KeyOffTime,ax	;
			      C ;	mov	ds:[di].WTD_KeyOnDelay,ax	;
			      C ;	mov	ds:[di].WTD_KeyShift,al		;
			      C ;	mov	ds:[di].WTD_KeySetPointer,al	;
			      C ;	mov	ds:[di].WTD_ModDecay,ax		;
			      C ;	mov	ds:[di].WTD_ModLevel,al		;
			      C ;	mov	ds:[di].WTD_BendDetune,ax	;
			      C ;	mov	ds:[di].WTD_BendEmbRate,al	;
			      C ;	mov	ds:[di].WTD_BendEmbMaxMin,al	;
			      C ;	mov	ds:[di].WTD_BendEmbLevelSet,al	;
			      C ;	mov	ds:[di].WTD_ExprDetune,ax	;
			      C ;	mov	ds:[di].WTD_ExprEmbRate,al	;
			      C ;	mov	ds:[di].WTD_ExprEmbMaxMin,al	;
			      C ;	mov	ds:[di].WTD_ExprEmbLevelSet,al	;
			      C ;	mov	ds:[di].WTD_PanDetune,ax	;
			      C ;	mov	ds:[di].WTD_PanEmbRate,al	;
			      C ;	mov	ds:[di].WTD_PanEmbMaxMin,al	;
			      C ;	mov	ds:[di].WTD_PanEmbLevelSet,al	;
			      C ;	mov	ds:[di].WTD_GateTimeStepLast,ax	;
			      C ;	mov	ds:[di].WTD_GateTimeStepFirst,ax
			      C ;	mov	ds:[di].WTD_Expr,al		;
			      C ;	mov	ds:[di].WTD_ExprSet,al		;初期値0にしておくこと。
 04BF  B8 0001		      C 	mov	ax,1				;
 04C2  88 45 3B		      C 	mov	ds:[di].WTD_BendEmbCounter,al	;
 04C5  88 45 4F		      C 	mov	ds:[di].WTD_ExprEmbCounter,al	;
 04C8  88 45 6F		      C 	mov	ds:[di].WTD_PanEmbCounter,al	;
 04CB  89 45 14		      C 	mov	ds:[di].WTD_Leng,ax		;
 04CE  89 45 16		      C 	mov	ds:[di].WTD_LengCounter,ax	;
 04D1  88 45 5A		      C 	mov	ds:[di].WTD_VolumeUpDown,al	;
 04D4  B8 0004		      C 	mov	ax,04h				;
 04D7  88 45 54		      C 	mov	ds:[di].WTD_Octave,al		;
 04DA  B8 0008		      C 	mov	ax,08h				;
 04DD  88 45 55		      C 	mov	ds:[di].WTD_GateTime8,al	;
 04E0  B8 000C		      C 	mov	ax,0ch				;
 04E3  88 45 39		      C 	mov	ds:[di].WTD_BendEmbAddress,al	;
 04E6  88 45 4D		      C 	mov	ds:[di].WTD_ExprEmbAddress,al	;
 04E9  88 45 6D		      C 	mov	ds:[di].WTD_PanEmbAddress,al	;
 04EC  B8 0030		      C 	mov	ax,48				;
 04EF  89 45 18		      C 	mov	ds:[di].WTD_LengDefault,ax	;
 04F2  B8 0040		      C 	mov	ax,64				;
 04F5  88 45 61		      C 	mov	ds:[di].WTD_Pan,al		;
 04F8  B8 0064		      C 	mov	ax,100				;
 04FB  88 45 3F		      C 	mov	ds:[di].WTD_Velocity,al		;ExprPanと同一
 04FE  B8 007F		      C 	mov	ax,127				;
 0501  88 45 29		      C 	mov	ds:[di].WTD_AcsentVelocity,al	;
 0504  B8 2000		      C 	mov	ax,8192				;
 0507  89 45 2C		      C 	mov	ds:[di].WTD_Bend,ax		;
 050A  B8 FFFF		      C 	mov	ax,0ffffh			;
 050D  88 45 11		      C 	mov	ds:[di].WTD_Program,al		;
 0510  88 45 75		      C 	mov	ds:[di].WTD_Program2nd,al	;
 0513  88 45 76		      C 	mov	ds:[di].WTD_Program3rd,al	;
 0516  88 45 10		      C 	mov	ds:[di].WTD_LoopCountPointer,al	;
 0519  88 45 1F		      C 	mov	ds:[di].WTD_Key,al		;
 051C  88 45 20		      C 	mov	ds:[di].WTD_KeySet + 0,al	;
 051F  88 45 21		      C 	mov	ds:[di].WTD_KeySet + 1,al	;
 0522  88 45 22		      C 	mov	ds:[di].WTD_KeySet + 2,al	;
 0525  88 45 23		      C 	mov	ds:[di].WTD_KeySet + 3,al	;
 0528  88 45 24		      C 	mov	ds:[di].WTD_KeySet + 4,al	;
 052B  88 45 25		      C 	mov	ds:[di].WTD_KeySet + 5,al	;
 052E  88 45 26		      C 	mov	ds:[di].WTD_KeySet + 6,al	;
 0531  88 45 27		      C 	mov	ds:[di].WTD_KeySet + 7,al	;
 0534  26: 8B 07	      C 	mov	ax,es:[bx]			;
 0537  89 45 06		      C 	mov	ds:[di].WTD_Address,ax		;
			      C 
			      C ;	その他の設定
 053A  81 C7 0080	      C 	add	di,WTD_WorkChSize	;構造体分、加算
 053E  83 C3 02		      C 	add	bx,2			;アドレスインクリメント
 0541  FE C1		      C 	inc	cl			;
 0543  FE CD		      C 	dec	ch			;
			      C 	.until	(zero?)
 0545  74 03 E9 FF71	   *	    jne    @C001F
			      C 
 054A  59		      C 	pop	cx			;レジスタ復帰
			      C ;---------------------------------------------------------------
			      C ;共通ワークの設定
			      C 
			      C ;演奏フラグのセット
 054B  8B 04		      C 	mov	ax,ds:[si].WTD_Sys_Flag			;
 054D  83 C8 02		      C 	or	ax,WTD_Sys_Effect			;演奏イネーブル
 0550  89 04		      C 	mov	ds:[si].WTD_Sys_Flag,ax			;終了リセット
			      C 
 0552  88 6C 29		      C 	mov	ds:[si].WTD_Sys_EffectPart,ch		;パート数
			      C ;
			      C ;	その他の設定
			      C ;
			      C 
			      C ;	現在は、特に無し
			      C 
			      C ;---------------------------------------------------------------
			      C 
			      C ;エラー無し
 0555  33 C0		      C 	xor	ax,ax			;ax←0
			      C 
 0557			      C _EffectPlay_End:
			      C 
 0557  E4 B2		      C 	in	al,Int_Enable		;
 0559  0C 80		      C 	or	al,Int_HblankSet	;
 055B  E6 B2		      C 	out	Int_Enable,al		;
			      C 
			      C 	ret				;終了
 055D  07		   *	    pop    es
 055E  1F		   *	    pop    ds
 055F  5E		   *	    pop    si
 0560  5F		   *	    pop    di
 0561  5A		   *	    pop    dx
 0562  59		   *	    pop    cx
 0563  5B		   *	    pop    bx
 0564  5D		   *	    pop    bp
 0565  CB		   *	    ret    00000h
 0566			      C _EffectPlay	endp			;
			      C ;===============================================================|
			      C ;	void	(far *EffectStop)();				|
			      C ;===============================================================|
			      C ;	引き数							|
			      C ;		無し						|
			      C ;	返り値							|
			      C ;		無し						|
			      C ;	処理							|
			      C ;		効果音の発生終了				|
			      C ;===============================================================|
 0566			      C _EffectStop	proc far c	uses bp ax cx dx di si ds
			      C 
 0566  55		   *	    push   bp
 0567  50		   *	    push   ax
 0568  51		   *	    push   cx
 0569  52		   *	    push   dx
 056A  57		   *	    push   di
 056B  56		   *	    push   si
 056C  1E		   *	    push   ds
 056D  E4 B2		      C 	in	al,Int_Enable		;
 056F  24 7F		      C 	and	al,Int_HblankReset	;
 0571  E6 B2		      C 	out	Int_Enable,al		;
			      C 
			      C ;---------------------------------------------------------------
			      C ;ワークアドレスの取得
			      C 
			      C 	WTD_WorkGet	ds,bp			;ワークエリアアドレスの取得
			     1C ifdef	library	;------------------------	;※　ライブラリ版のみ必要
			     1C 
			     1C ifdef	IRAM	;---------------		;D-GROUP ＝ I-RAMの場合
 0573  6A 00		     1C 		push	IRAM_Segment		;
 0575  1F		     1C 		pop	ds			;
 0576  BD 0000 R	     1C 		mov	bp,offset DGROUP:_WTD_Work
			     1C 
			     1C else	;-----------------------		;D-GROUP ≠ S-RAMの場合
			     1C 		push	SRAM_Segment		;（WonderWitch等）
			     1C 		pop	ds			;
			     1C 		mov	bp,offset DGROUP:_WTD_Work
			     1C endif	;-----------------------
			     1C 
			     1C else	;--------------------------------	;WonderWitch版
			     1C 		push	SRAM_Segment		;
			     1C 		pop	ds			;
			     1C 		mov	bp,ds:[ProcContext_heap]
			     1C endif	;--------------------------------
			      C 
			      C ;構造体アドレスの設定
 0579  8D BE 0400	      C 	lea	di,[bp + WTD_WorkAdd_ECh0]
 057D  8D B6 0380	      C 	lea	si,[bp + WTD_WorkAdd_System]
			      C 
			      C ;---------------------------------------------------------------
			      C ;個別構造体設定
			      C 
			      C ;チャンネル数
 0581  33 C9		      C 	xor	cx,cx					;
 0583  8A 6C 29		      C 	mov	ch,ds:[si].WTD_Sys_EffectPart		;使用トラック数
			      C 	.while	(ch!=0)
 0586  EB 20		   *	    jmp    @C0021
 0588			   *@C0022:
 0588  8A 4D 05		      C 		mov	cl,ds:[di].WTD_Channel			;
			      C 
			      C 		;初期化すべき事項
 058B  B8 003F		      C 		mov	ax,003Fh			;
 058E  09 05		      C 		or	ds:[di].WTD_FlagControl,ax	;演奏終了
			      C 
 0590  BA 1634 R	      C 		mov	dx,offset CGROUP:I_Table_KeyOff	;
 0593  E8 1012		      C 		call	I_Table_Jump			;キーオフ
			      C 
 0596  51		      C 		push	cx				;
 0597  8A E9		      C 		mov	ch,cl				;チャンネルの取得
 0599  E8 08F6		      C 		call	I_Effect_Return			;効果音復帰処理
 059C  59		      C 		pop	cx				;
			      C 
 059D  B8 8000		      C 		mov	ax,8000h			;
 05A0  09 05		      C 		or	ds:[di].WTD_FlagControl,ax	;演奏終了
			      C 
			      C ;		その他
			      C ;		to do	あれば
			      C 
 05A2  81 C7 0080	      C 		add	di,WTD_WorkChSize		;構造体分、加算
 05A6  FE CD		      C 		dec	ch				;
			      C 	.endw
 05A8			   *@C0021:
 05A8  0A ED		   *	    or	ch, ch
 05AA  75 DC		   *	    jne    @C0022
			      C 
			      C ;---------------------------------------------------------------
			      C ;共通構造体設定
			      C 
 05AC  8B 04		      C 	mov	ax,ds:[si].WTD_Sys_Flag		;
 05AE  83 E0 FD		      C 	and	ax,WTD_Sys_EffectR		;演奏ディセーブル
 05B1  89 04		      C 	mov	ds:[si].WTD_Sys_Flag,ax		;終了リセット
			      C ;
			      C ;	その他
			      C ;
			      C 
			      C ;	現在は、処理無し。
			      C 
			      C ;---------------------------------------------------------------
			      C 
 05B3  E4 B2		      C 	in	al,Int_Enable		;
 05B5  0C 80		      C 	or	al,Int_HblankSet	;
 05B7  E6 B2		      C 	out	Int_Enable,al		;
			      C 
			      C 	ret				;終了
 05B9  1F		   *	    pop    ds
 05BA  5E		   *	    pop    si
 05BB  5F		   *	    pop    di
 05BC  5A		   *	    pop    dx
 05BD  59		   *	    pop    cx
 05BE  58		   *	    pop    ax
 05BF  5D		   *	    pop    bp
 05C0  CB		   *	    ret    00000h
 05C1			      C _EffectStop	endp			;
			      C ;===============================================================|
			      C ;	char	(far *PcmPlay)(char far *Pcm);			|
			      C ;===============================================================|
			      C ;	引き数							|
			      C ;		char far*Pcm	ファイルのあるアドレス		|
			      C ;	返り値							|
			      C ;		ax	0	正常				|
			      C ;			1	Waveデータじゃない。		|
			      C ;			   or	データ形式が違う。		|
			      C ;			2	'fmt 'が見つからない。		|
			      C ;			3	'data'が見つからない。		|
			      C ;	処理							|
			      C ;		Waveファイルの解析と、発生準備			|
			      C ;===============================================================|
 05C1			      C _PcmPlay	proc far c	uses bx cx dx di si ds es,
			      C 	fptPCM:far ptr byte
			      C 
			      C ;---------------------------------------------------------------
			      C ;演奏の停止
			      C 
 05C1  55		   *	    push   bp
 05C2  8B EC		   *	    mov    bp, sp
 05C4  53		   *	    push   bx
 05C5  51		   *	    push   cx
 05C6  52		   *	    push   dx
 05C7  57		   *	    push   di
 05C8  56		   *	    push   si
 05C9  1E		   *	    push   ds
 05CA  06		   *	    push   es
 05CB  0E		      C 	push	cs			;
 05CC  E8 00E6		      C 	call	near ptr _PcmStop	;演奏停止・割込周期の初期化
			      C 
			      C ;---------------------------------------------------------------
			      C ;割り込み禁止
			      C 
 05CF  E4 B2		      C 	in	al,Int_Enable		;
 05D1  24 7F		      C 	and	al,Int_HblankReset	;
 05D3  E6 B2		      C 	out	Int_Enable,al		;
			      C 
			      C ;---------------------------------------------------------------
			      C ;ワークアドレスの取得
			      C 
			      C 	WTD_WorkGet	ds,bx			;ワークエリアアドレスの取得
			     1C ifdef	library	;------------------------	;※　ライブラリ版のみ必要
			     1C 
			     1C ifdef	IRAM	;---------------		;D-GROUP ＝ I-RAMの場合
 05D5  6A 00		     1C 		push	IRAM_Segment		;
 05D7  1F		     1C 		pop	ds			;
 05D8  BB 0000 R	     1C 		mov	bx,offset DGROUP:_WTD_Work
			     1C 
			     1C else	;-----------------------		;D-GROUP ≠ S-RAMの場合
			     1C 		push	SRAM_Segment		;（WonderWitch等）
			     1C 		pop	ds			;
			     1C 		mov	bx,offset DGROUP:_WTD_Work
			     1C endif	;-----------------------
			     1C 
			     1C else	;--------------------------------	;WonderWitch版
			     1C 		push	SRAM_Segment		;
			     1C 		pop	ds			;
			     1C 		mov	bx,ds:[ProcContext_heap]
			     1C endif	;--------------------------------
			      C 
			      C ;構造体アドレスの設定
 05DB  8D BF 0580	      C 	lea	di,[bx + WTD_WorkAdd_PCM]
 05DF  8D B7 0380	      C 	lea	si,[bx + WTD_WorkAdd_System]
			      C 
			      C ;---------------------------------------------------------------
			      C ;演奏アドレスの設定
			      C 
 05E3  C4 46 06		      C 	les	ax,fptPCM
 05E6  06		      C 	push	es
 05E7  50		      C 	push	ax
 05E8  0E		      C 	push	cs			;データ変換
 05E9  E8 0167		      C 	call	near ptr _ChangeFar	;dxax = wtdIL.ChangeFar(*Pcm);
 05EC  83 C4 04		      C 	add	sp,+4			;
 05EF  89 44 0E		      C 	mov	ds:[si].WTD_Sys_PcmOffset,ax	;アドレスの設定
 05F2  89 54 10		      C 	mov	ds:[si].WTD_Sys_PcmSegment,dx	;
			      C 
			      C ;ポインタの設定
 05F5  8E C2		      C 	mov	es,dx			;
 05F7  8B D8		      C 	mov	bx,ax			;es:bx←RIFF構造体
			      C 
			      C ;---------------------------------------------------------------
			      C ;'Wave'ファイルの解析	データ形式のチェック
			      C ;※下位16bitのみのチェック・解析・演算である。
			      C ;　上位16bitは無視している。
			      C 
			      C ;FileCheck
			      C ;・RIFF形式、且つ、WAVEデータであか？
 05F9  26: 81 3F 4952	      C 	cmp	word ptr es:[bx].RIFF_Head,'IR'		;RIFF ?
 05FE  75 43		      C 	jnz	_PcmPlay_EndJmp				;
 0600  26: 81 7F 08 4157      C 	cmp	word ptr es:[bx].RIFF_Type,'AW'		;WAVE ?
 0606  75 3B		      C 	jnz	_PcmPlay_EndJmp				;
			      C ;次アドレス設定
 0608  83 C3 0C		      C 	add	bx,RIFF_Data				;bx←RIFFのData部。
			      C 
			      C ;Wavefmt構造体の検索
			      C ;文字列チェック
 060B			      C _PcmPlay_FileChkLoop:					;
 060B  26: 81 3F 6D66	      C 	cmp	word ptr es:[bx].RiffHed_Head,'mf'	;fmt  ?
 0610  74 13		      C 	jz	_PcmPlay_FileChkEnd			;
 0612  26: 8B 47 04	      C 	mov	ax,word ptr es:[bx].RiffHed_Size	;ヘッド、サイズ分を加算
 0616  83 C3 08		      C 	add	bx,RiffHed_Data				;64KByte越えたら、
 0619  72 04		      C 	jc	_PcmPlay_FileChkStep1			;エラーにする。
 061B  03 D8		      C 	add	bx,ax					;
 061D  73 EC		      C 	jnc	_PcmPlay_FileChkLoop			;
 061F			      C _PcmPlay_FileChkStep1:					;
 061F  B8 0002		      C 	mov	ax,2					;'fmt 'が無い。
 0622  E9 0081		      C 	jmp	_PcmPlay_End				;
 0625			      C _PcmPlay_FileChkEnd:					;
			      C 
			      C ;ファイル形式チェック
			      C ;・モノラルか？
			      C ;・量子化数＝8bitか？
			      C ;サンプリングレイトは面倒だから確認しない。（遊べるし。）
 0625  26: 83 7F 08 01	      C 	cmp	word ptr es:[bx].WaveFmt_Type,1		;Wave type ?
 062A  75 17		      C 	jnz	_PcmPlay_EndJmp				;
 062C  26: 83 7F 0A 01	      C 	cmp	word ptr es:[bx].WaveFmt_Channel,1	;mono(1ch) ?
 0631  75 10		      C 	jnz	_PcmPlay_EndJmp				;
 0633  26: 83 7F 14 01	      C 	cmp	word ptr es:[bx].WaveFmt_DataSize,1	;1byte ?
 0638  75 09		      C 	jnz	_PcmPlay_EndJmp				;
 063A  26: 83 7F 16 08	      C 	cmp	word ptr es:[bx].WaveFmt_ChannelSize,8	;8bit ?
 063F  75 02		      C 	jnz	_PcmPlay_EndJmp				;
 0641  EB 05		      C 	jmp	short _PcmPlay_EndJmpStep
 0643			      C _PcmPlay_EndJmp:
 0643  B8 0001		      C 	mov	ax,1					;Error 
 0646  EB 5E		      C 	jmp	_PcmPlay_End				;
 0648			      C _PcmPlay_EndJmpStep:
			      C ;次アドレス設定
 0648  26: 8B 47 04	      C 	mov	ax,word ptr es:[bx].WaveFmt_Size	;ヘッド、サイズ分を加算
 064C  83 C3 08		      C 	add	bx,WaveFmt_Type				;64KByte越えたら、
 064F  72 F2		      C 	jc	_PcmPlay_EndJmp				;エラーにする。
 0651  03 D8		      C 	add	bx,ax					;
 0653  72 EE		      C 	jc	_PcmPlay_EndJmp				;
			      C 
			      C ;WaveData構造体の検索
			      C ;文字列チェック
 0655			      C _PcmPlay_FileChkLoop2:					;
 0655  26: 81 3F 6164	      C 	cmp	word ptr es:[bx].RiffHed_Head,'ad'	;data ?
 065A  74 12		      C 	jz	_PcmPlay_FileChkEnd2			;
 065C  26: 8B 47 04	      C 	mov	ax,word ptr es:[bx].RiffHed_Size	;ヘッド、サイズ分を加算
 0660  83 C3 08		      C 	add	bx,RiffHed_Data				;64KByte越えたら、
 0663  72 04		      C 	jc	_PcmPlay_FileChkStep2			;エラーにする。
 0665  03 D8		      C 	add	bx,ax					;
 0667  73 EC		      C 	jnc	_PcmPlay_FileChkLoop2			;
 0669			      C _PcmPlay_FileChkStep2:					;
 0669  B8 0003		      C 	mov	ax,3					;
 066C  EB 38		      C 	jmp	_PcmPlay_End				;
 066E			      C _PcmPlay_FileChkEnd2:					;
			      C 
			      C ;---------------------------------------------------------------
			      C ;個別ワークの設定
			      C 
			      C ;構造体設定
			      C ;データサイズ
 066E  26: 8B 47 04	      C 	mov	ax,word ptr es:[bx].WaveData_Size+0	;
 0672  89 45 0C		      C 	mov	word ptr ds:[di].WTD_PcmSize+0,ax	;
 0675  26: 8B 47 06	      C 	mov	ax,word ptr es:[bx].WaveData_Size+2	;
 0679  89 45 0E		      C 	mov	word ptr ds:[di].WTD_PcmSize+2,ax	;
			      C ;発生アドレス
			      C ;	mov	ax,WaveData_Data			;
			      C ;	add	ax,bx					;
 067C  8D 47 08		      C 	lea	ax,[bx + WaveData_Data]			;
 067F  8C C2		      C 	mov	dx,es					;dx:ax←Data Address
 0681  89 45 08		      C 	mov	word ptr ds:[di].WTD_PcmAddress+0,ax	;
 0684  89 55 0A		      C 	mov	word ptr ds:[di].WTD_PcmAddress+2,dx	;
			      C ;フラグ設定
 0687  8B 05		      C 	mov	ax,word ptr ds:[di].WTD_FlagControl	;
 0689  0D 4000		      C 	or	ax,WTD_Ctrl_Effect			;
 068C  25 7FFF		      C 	and	ax,WTD_Ctrl_PlayEndR			;
 068F  89 05		      C 	mov	word ptr ds:[di].WTD_FlagControl,ax	;
			      C 
			      C ;
			      C ;	その他の設定
			      C ;
			      C 
			      C ;---------------------------------------------------------------
			      C ;共通ワークの設定
			      C 
			      C ;テンポカウンター
 0691  B8 0001		      C 	mov	ax,1					;
 0694  89 44 26		      C 	mov	ds:[si].WTD_Sys_TempoCounter,ax		;TempoCounter = 1
			      C 
			      C ;演奏フラグのセット
 0697  8B 04		      C 	mov	ax,ds:[si].WTD_Sys_Flag			;
			      C 	;PCMVoice効果音On, Musicch2Mask, Timer Emulate on
 0699  0D 2084		      C 	or	ax,WTD_Sys_Pcm + WTD_Sys_EffectMask2 + WTD_Sys_TimerEmulate
			      C ;	and	ax,WTD_Sys_PcmEndR			;このフラグは廃止
 069C  89 04		      C 	mov	ds:[si].WTD_Sys_Flag,ax			;終了リセット
			      C 
			      C ;
			      C ;	その他の設定
			      C ;
			      C 
			      C ;---------------------------------------------------------------
			      C ;デバイスの設定
			      C 
			      C ;PCM Voice mode
 069E  B8 2020		      C 	mov	ax,PcmVoiceMode_Set	;
 06A1  E8 123E		      C 	call	SP_Set_Channel		;PcmVoice Modeにする。
			      C 
			      C ;---------------------------------------------------------------
			      C 
			      C ;エラー無し
 06A4  33 C0		      C 	xor	ax,ax			;ax←0
			      C 
 06A6			      C _PcmPlay_End:
 06A6  E4 B2		      C 	in	al,Int_Enable		;
 06A8  0C 80		      C 	or	al,Int_HblankSet	;
 06AA  E6 B2		      C 	out	Int_Enable,al		;
			      C 
			      C 	ret				;終了
 06AC  07		   *	    pop    es
 06AD  1F		   *	    pop    ds
 06AE  5E		   *	    pop    si
 06AF  5F		   *	    pop    di
 06B0  5A		   *	    pop    dx
 06B1  59		   *	    pop    cx
 06B2  5B		   *	    pop    bx
 06B3  5D		   *	    pop    bp
 06B4  CB		   *	    ret    00000h
 06B5			      C _PcmPlay	endp			;
			      C ;===============================================================|
			      C ;	void	(far *PcmStop)();				|
			      C ;===============================================================|
			      C ;	引き数							|
			      C ;		無し						|
			      C ;	返り値							|
			      C ;		無し						|
			      C ;	処理							|
			      C ;		PCM Voice の発生終了準備			|
			      C ;===============================================================|
 06B5			      C _PcmStop	proc far c	uses bp ax bx cx dx di si ds
			      C 
			      C ;---------------------------------------------------------------
			      C ;ワークアドレスの取得
			      C 
			      C 	WTD_WorkGet	ds,bx			;ワークエリアアドレスの取得
			     1C ifdef	library	;------------------------	;※　ライブラリ版のみ必要
			     1C 
			     1C ifdef	IRAM	;---------------		;D-GROUP ＝ I-RAMの場合
 06B5  55		   *	    push   bp
 06B6  50		   *	    push   ax
 06B7  53		   *	    push   bx
 06B8  51		   *	    push   cx
 06B9  52		   *	    push   dx
 06BA  57		   *	    push   di
 06BB  56		   *	    push   si
 06BC  1E		   *	    push   ds
 06BD  6A 00		     1C 		push	IRAM_Segment		;
 06BF  1F		     1C 		pop	ds			;
 06C0  BB 0000 R	     1C 		mov	bx,offset DGROUP:_WTD_Work
			     1C 
			     1C else	;-----------------------		;D-GROUP ≠ S-RAMの場合
			     1C 		push	SRAM_Segment		;（WonderWitch等）
			     1C 		pop	ds			;
			     1C 		mov	bx,offset DGROUP:_WTD_Work
			     1C endif	;-----------------------
			     1C 
			     1C else	;--------------------------------	;WonderWitch版
			     1C 		push	SRAM_Segment		;
			     1C 		pop	ds			;
			     1C 		mov	bx,ds:[ProcContext_heap]
			     1C endif	;--------------------------------
			      C 
			      C ;構造体アドレスの設定
 06C3  8D BF 0580	      C 	lea	di,[bx + WTD_WorkAdd_PCM]
 06C7  8D B7 0380	      C 	lea	si,[bx + WTD_WorkAdd_System]
			      C 
			      C ;---------------------------------------------------------------
			      C ;構造体設定
			      C 
			      C ;
			      C ;	　タイマー割り込みアルゴリズムの都合上、
			      C ;	割り込み処理内で復帰処理を行う。
			      C ;
			      C 
			      C ;---------------------------------------------------------------
			      C ;共通ワークの設定
			      C 
			      C ;演奏フラグのセット
 06CB  8B 04		      C 	mov	ax,ds:[si].WTD_Sys_Flag			;
 06CD  83 E0 FB		      C 	and	ax,WTD_Sys_PcmR				;終了
 06D0  89 04		      C 	mov	ds:[si].WTD_Sys_Flag,ax			;終了リセット
			      C 
			      C ;	タイマーは、割り込みルーチンでいじる。
			      C 
			      C 
			      C ;
			      C ;	その他の設定
			      C ;
			      C 
			      C ;---------------------------------------------------------------
			      C 
			      C 	ret				;終了
 06D2  1F		   *	    pop    ds
 06D3  5E		   *	    pop    si
 06D4  5F		   *	    pop    di
 06D5  5A		   *	    pop    dx
 06D6  59		   *	    pop    cx
 06D7  5B		   *	    pop    bx
 06D8  58		   *	    pop    ax
 06D9  5D		   *	    pop    bp
 06DA  CB		   *	    ret    00000h
 06DB			      C _PcmStop	endp			;
			      C ;===============================================================|
			      C ;	char	(far *PcmVoiceSet)(char no,char far *wave);	|
			      C ;===============================================================|
			      C ;	引き数							|
			      C ;		char	no	音色番号			|
			      C ;		char far *wave	波形データ			|
			      C ;	返り値							|
			      C ;		Error Code					|
			      C ;	処理							|
			      C ;		WS内蔵PCM波形データをドライバーに登録する。	|
			      C ;===============================================================|
 06DB			      C _PcmVoiceSet	proc far c	uses bx cx dx di si ds es,
			      C 	cNumber:byte,
			      C 	fptWave:far ptr byte
			      C 
			      C ;---------------------------------------------------------------
			      C ;ワークアドレスの取得
			      C 
			      C 	WTD_WorkGet	ds,bx			;ワークエリアアドレスの取得
			     1C ifdef	library	;------------------------	;※　ライブラリ版のみ必要
			     1C 
			     1C ifdef	IRAM	;---------------		;D-GROUP ＝ I-RAMの場合
 06DB  55		   *	    push   bp
 06DC  8B EC		   *	    mov    bp, sp
 06DE  53		   *	    push   bx
 06DF  51		   *	    push   cx
 06E0  52		   *	    push   dx
 06E1  57		   *	    push   di
 06E2  56		   *	    push   si
 06E3  1E		   *	    push   ds
 06E4  06		   *	    push   es
 06E5  6A 00		     1C 		push	IRAM_Segment		;
 06E7  1F		     1C 		pop	ds			;
 06E8  BB 0000 R	     1C 		mov	bx,offset DGROUP:_WTD_Work
			     1C 
			     1C else	;-----------------------		;D-GROUP ≠ S-RAMの場合
			     1C 		push	SRAM_Segment		;（WonderWitch等）
			     1C 		pop	ds			;
			     1C 		mov	bx,offset DGROUP:_WTD_Work
			     1C endif	;-----------------------
			     1C 
			     1C else	;--------------------------------	;WonderWitch版
			     1C 		push	SRAM_Segment		;
			     1C 		pop	ds			;
			     1C 		mov	bx,ds:[ProcContext_heap]
			     1C endif	;--------------------------------
 06EB  1E		      C 	push	ds
 06EC  07		      C 	pop	es
			      C 
			      C ;構造体アドレスの設定
 06ED  8D BF 0100	      C 	lea	di,[bx + WTD_WorkAdd_Wave]
			      C 
			      C ;---------------------------------------------------------------
			      C ;設定
			      C 
			      C 	;音色番号取得
 06F1  33 C0		      C 	xor	ax,ax			;
 06F3  8A 46 06		      C 	mov	al,cNumber		;ax←音色番号
			      C 
			      C 	;音色番号チェック
			      C 	.if	(al>15)			;16以下？
 06F6  3C 0F		   *	    cmp    al, 00Fh
 06F8  76 05		   *	    jbe    @C0024
 06FA  B8 000B		      C 		mov	ax,11		;でなかったら、エラー
 06FD  EB 0F		      C 		jmp	_PCMVoiceSet_End
			      C 	.endif
 06FF			   *@C0024:
			      C 
			      C 	;音色転送
 06FF  C1 E0 04		      C 	shl	ax,4			;
 0702  03 F8		      C 	add	di,ax			;di＝di＋ax×16
 0704  C5 76 08		      C 	lds	si,fptWave		;ds:si←送り元
 0707  B9 0008		      C 	mov	cx,8			;16Byte転送
 070A  F3/ A5		      C 	rep	movsw			;ブロック転送
			      C 
			      C ;---------------------------------------------------------------
			      C 
			      C 	;エラー無し
 070C  33 C0		      C 	xor	ax,ax			;ax←0
			      C 
 070E			      C _PCMVoiceSet_End:
			      C 
			      C 	ret				;終了
 070E  07		   *	    pop    es
 070F  1F		   *	    pop    ds
 0710  5E		   *	    pop    si
 0711  5F		   *	    pop    di
 0712  5A		   *	    pop    dx
 0713  59		   *	    pop    cx
 0714  5B		   *	    pop    bx
 0715  5D		   *	    pop    bp
 0716  CB		   *	    ret    00000h
 0717			      C _PcmVoiceSet	endp			;
			      C ;===============================================================|
			      C ;	char	(far *SoftEmbSet)(char no,char far *emb);	|
			      C ;===============================================================|
			      C ;	引き数							|
			      C ;		char	no	音色番号			|
			      C ;		char far *wave	エンベロープデータ		|
			      C ;	返り値							|
			      C ;		Error Code					|
			      C ;	処理							|
			      C ;		エンベロープデータをドライバーに登録する。	|
			      C ;===============================================================|
 0717			      C _SoftEmbSet	proc far c	uses bx cx dx di si ds es,
			      C 	cNumber:byte,
			      C 	fptWave:far ptr byte
			      C 
			      C ;---------------------------------------------------------------
			      C ;ワークアドレスの取得
			      C 
			      C 	WTD_WorkGet	ds,bx			;ワークエリアアドレスの取得
			     1C ifdef	library	;------------------------	;※　ライブラリ版のみ必要
			     1C 
			     1C ifdef	IRAM	;---------------		;D-GROUP ＝ I-RAMの場合
 0717  55		   *	    push   bp
 0718  8B EC		   *	    mov    bp, sp
 071A  53		   *	    push   bx
 071B  51		   *	    push   cx
 071C  52		   *	    push   dx
 071D  57		   *	    push   di
 071E  56		   *	    push   si
 071F  1E		   *	    push   ds
 0720  06		   *	    push   es
 0721  6A 00		     1C 		push	IRAM_Segment		;
 0723  1F		     1C 		pop	ds			;
 0724  BB 0000 R	     1C 		mov	bx,offset DGROUP:_WTD_Work
			     1C 
			     1C else	;-----------------------		;D-GROUP ≠ S-RAMの場合
			     1C 		push	SRAM_Segment		;（WonderWitch等）
			     1C 		pop	ds			;
			     1C 		mov	bx,offset DGROUP:_WTD_Work
			     1C endif	;-----------------------
			     1C 
			     1C else	;--------------------------------	;WonderWitch版
			     1C 		push	SRAM_Segment		;
			     1C 		pop	ds			;
			     1C 		mov	bx,ds:[ProcContext_heap]
			     1C endif	;--------------------------------
 0727  1E		      C 	push	ds
 0728  07		      C 	pop	es
			      C 
			      C ;構造体アドレスの設定
 0729  8D BF 0200	      C 	lea	di,[bx + WTD_WorkAdd_Emb]
			      C 
			      C ;---------------------------------------------------------------
			      C ;設定
			      C 
			      C 	;音色番号取得
 072D  33 C0		      C 	xor	ax,ax			;
 072F  8A 46 06		      C 	mov	al,cNumber		;ax←音色番号
			      C 
			      C 	;音色番号チェック
			      C 	.if	(al>23)			;24以下？
 0732  3C 17		   *	    cmp    al, 017h
 0734  76 05		   *	    jbe    @C0026
 0736  B8 000B		      C 		mov	ax,11		;でなかったら、エラー
 0739  EB 0F		      C 		jmp	_SoftEmbSet_End	
			      C 	.endif
 073B			   *@C0026:
			      C 
			      C 	;転送
 073B  C1 E0 04		      C 	shl	ax,4			;
 073E  03 F8		      C 	add	di,ax			;di＝di＋ax×16
 0740  C5 76 08		      C 	lds	si,fptWave		;ds:si←送り元
 0743  B9 0008		      C 	mov	cx,8			;16Byte転送
 0746  F3/ A5		      C 	rep	movsw			;ブロック転送
			      C 
			      C ;---------------------------------------------------------------
			      C 
			      C ;エラー無し
 0748  33 C0		      C 	xor	ax,ax			;ax←0
			      C 
 074A			      C _SoftEmbSet_End:
			      C 	ret				;終了
 074A  07		   *	    pop    es
 074B  1F		   *	    pop    ds
 074C  5E		   *	    pop    si
 074D  5F		   *	    pop    di
 074E  5A		   *	    pop    dx
 074F  59		   *	    pop    cx
 0750  5B		   *	    pop    bx
 0751  5D		   *	    pop    bp
 0752  CB		   *	    ret    00000h
 0753			      C _SoftEmbSet	endp			;
			      C ;===============================================================|
			      C ;	void far *(far *ChangeFar)(void far *add);		|
			      C ;===============================================================|
			      C ;	引き数							|
			      C ;		void far *add	far pointer			|
			      C ;	返り値							|
			      C ;		dxax		far pointer			|
			      C ;	処理							|
			      C ;		far pointerの変換。offset=0x000?にする。	|
			      C ;===============================================================|
 0753			      C _ChangeFar	proc far c,
			      C 	fptData:far ptr byte
			      C 
			      C ;---------------------------------------------------------------
			      C ;ファーポインタ変換
			      C 
			      C ;	mov	ax,word ptr [bp + 06h]	;ax←far pointer offset
 0753  55		   *	    push   bp
 0754  8B EC		   *	    mov    bp, sp
 0756  8B 46 06		      C 	mov	ax,word ptr fptData	;ax←far pointer offset
 0759  8B D0		      C 	mov	dx,ax			;
 075B  83 E0 0F		      C 	and	ax,000Fh		;ax←残りの16byte分
 075E  C1 EA 04		      C 	shr	dx,4			;
			      C ;	add	dx,word ptr [bp + 08h]	;dx←ax / 16 + far pointer segment
 0761  03 56 08		      C 	add	dx,word ptr fptData+2	;dx←ax / 16 + far pointer segment
			      C 
			      C ;---------------------------------------------------------------
			      C 
			      C 	ret				;終了
 0764  5D		   *	    pop    bp
 0765  CB		   *	    ret    00000h
 0766			      C _ChangeFar	endp			;
			      C ;===============================================================|
			      C ;	void	(far *SoundSetChannel)(int mode);		|
			      C ;===============================================================|
			      C ;	引き数							|
			      C ;		mode bit 0- 7	Set Data			|
			      C ;		mode bit 8-15	Set Data bit			|
			      C ;	返り値							|
			      C ;		無し						|
			      C ;	処理							|
			      C ;		Channel modeの設定				|
			      C ;===============================================================|
 0766			      C _SoundSetChannel	proc far c	uses ax,
			      C 	iMode:word
			      C 
 0766  55		   *	    push   bp
 0767  8B EC		   *	    mov    bp, sp
 0769  50		   *	    push   ax
 076A  8B 46 06		      C 	mov	ax,iMode		;ax←mode
 076D  E8 1172		      C 	call	SP_Set_Channel		;Chennel modeの設定
			      C 
			      C 	ret				;終了
 0770  58		   *	    pop    ax
 0771  5D		   *	    pop    bp
 0772  CB		   *	    ret    00000h
 0773			      C _SoundSetChannel	endp		;
			      C ;===============================================================|
			      C ;	int	(far *SoundGetChannel)();			|
			      C ;===============================================================|
			      C ;	引き数							|
			      C ;		無し						|
			      C ;	返り値							|
			      C ;		ax		Channel mode			|
			      C ;	処理							|
			      C ;		Channel modeの取得				|
			      C ;===============================================================|
 0773			      C _SoundGetChannel	proc far c	;
 0773  E8 11CC		      C 	call	SP_Get_Channel		;Channel mode の取得
 0776  CB		      C 	ret				;終了
 0777			      C _SoundGetChannel	endp		;
			      C ;===============================================================|
			      C ;	void	(far *SoundSetOutput)(int mode);		|
			      C ;===============================================================|
			      C ;	引き数							|
			      C ;		mode bit 0- 7	Set Data			|
			      C ;		mode bit 8-15	Set Data bit			|
			      C ;	返り値							|
			      C ;		無し						|
			      C ;	処理							|
			      C ;		Output modeの設定				|
			      C ;===============================================================|
 0777			      C _SoundSetOutput	proc far c	uses ax,
			      C 	iMode:word
			      C 
 0777  55		   *	    push   bp
 0778  8B EC		   *	    mov    bp, sp
 077A  50		   *	    push   ax
 077B  8B 46 06		      C 	mov	ax,iMode		;ax←mode
 077E  E8 11C7		      C 	call	SP_Set_Output		;Output modeの設定
			      C 
			      C 	ret				;終了
 0781  58		   *	    pop    ax
 0782  5D		   *	    pop    bp
 0783  CB		   *	    ret    00000h
 0784			      C _SoundSetOutput	endp			;
			      C ;===============================================================|
			      C ;	int	(far *SoundGetOutput)();			|
			      C ;===============================================================|
			      C ;	引き数							|
			      C ;		無し						|
			      C ;	返り値							|
			      C ;		ax		Output mode			|
			      C ;	処理							|
			      C ;		Output modeの取得				|
			      C ;===============================================================|
 0784			      C _SoundGetOutput	proc far c		;
 0784  E8 11CB		      C 	call	SP_Get_Output		;Output modeの取得
 0787  CB		      C 	ret				;終了
 0788			      C _SoundGetOutput	endp			;
			      C ;===============================================================|
			      C ;	int	(far *SoundGetRandom)();			|
			      C ;===============================================================|
			      C ;	引き数							|
			      C ;		無し						|
			      C ;	返り値							|
			      C ;		AX		疑似乱数(0〜32767)		|
			      C ;	処理							|
			      C ;		疑似乱数を得る					|
			      C ;===============================================================|
 0788			      C _SoundGetRandom	proc far c		;
 0788  E8 11CD		      C 	call	SP_Get_Random		;乱数の取得
 078B  CB		      C 	ret				;終了
 078C			      C _SoundGetRandom	endp			;
			      C ;===============================================================|
			      C ;	void	(far *SetMusicVolume)(char volume);		|
			      C ;===============================================================|
			      C ;	引き数							|
			      C ;		cVolume						|
			      C ;	返り値							|
			      C ;		無し						|
			      C ;	処理							|
			      C ;		マスターボリュームの設定			|
			      C ;===============================================================|
 078C			      C _SetMusicVolume	proc far c	uses ax bx si ds,
			      C 	cVolume:byte
			      C 
			      C ;---------------------------------------------------------------
			      C ;ワークアドレスの取得
			      C 
			      C 	WTD_WorkGet	ds,bx			;ワークエリアアドレスの取得
			     1C ifdef	library	;------------------------	;※　ライブラリ版のみ必要
			     1C 
			     1C ifdef	IRAM	;---------------		;D-GROUP ＝ I-RAMの場合
 078C  55		   *	    push   bp
 078D  8B EC		   *	    mov    bp, sp
 078F  50		   *	    push   ax
 0790  53		   *	    push   bx
 0791  56		   *	    push   si
 0792  1E		   *	    push   ds
 0793  6A 00		     1C 		push	IRAM_Segment		;
 0795  1F		     1C 		pop	ds			;
 0796  BB 0000 R	     1C 		mov	bx,offset DGROUP:_WTD_Work
			     1C 
			     1C else	;-----------------------		;D-GROUP ≠ S-RAMの場合
			     1C 		push	SRAM_Segment		;（WonderWitch等）
			     1C 		pop	ds			;
			     1C 		mov	bx,offset DGROUP:_WTD_Work
			     1C endif	;-----------------------
			     1C 
			     1C else	;--------------------------------	;WonderWitch版
			     1C 		push	SRAM_Segment		;
			     1C 		pop	ds			;
			     1C 		mov	bx,ds:[ProcContext_heap]
			     1C endif	;--------------------------------
			      C 
			      C ;構造体アドレスの設定
 0799  8D B7 0380	      C 	lea	si,[bx + WTD_WorkAdd_System]
			      C 
			      C ;---------------------------------------------------------------
			      C ;設定
 079D  8A 46 06		      C 	mov	al,cVolume			;
 07A0  88 44 21		      C 	mov	ds:[si].WTD_Sys_VolumeMusic,al	;
			      C 
			      C ;---------------------------------------------------------------
			      C 
			      C 	ret				;終了
 07A3  1F		   *	    pop    ds
 07A4  5E		   *	    pop    si
 07A5  5B		   *	    pop    bx
 07A6  58		   *	    pop    ax
 07A7  5D		   *	    pop    bp
 07A8  CB		   *	    ret    00000h
 07A9			      C _SetMusicVolume	endp			;
			      C ;===============================================================|
			      C ;	char	(far *GetMusicVoluem)();			|
			      C ;===============================================================|
			      C ;	引き数							|
			      C ;		無し						|
			      C ;	返り値							|
			      C ;		ax	Volume					|
			      C ;	処理							|
			      C ;		マスターボリュームの取得			|
			      C ;===============================================================|
 07A9			      C _GetMusicVolume	proc far c	uses bx si ds
			      C 
			      C ;---------------------------------------------------------------
			      C ;ワークアドレスの取得
			      C 
			      C 	WTD_WorkGet	ds,bx			;ワークエリアアドレスの取得
			     1C ifdef	library	;------------------------	;※　ライブラリ版のみ必要
			     1C 
			     1C ifdef	IRAM	;---------------		;D-GROUP ＝ I-RAMの場合
 07A9  53		   *	    push   bx
 07AA  56		   *	    push   si
 07AB  1E		   *	    push   ds
 07AC  6A 00		     1C 		push	IRAM_Segment		;
 07AE  1F		     1C 		pop	ds			;
 07AF  BB 0000 R	     1C 		mov	bx,offset DGROUP:_WTD_Work
			     1C 
			     1C else	;-----------------------		;D-GROUP ≠ S-RAMの場合
			     1C 		push	SRAM_Segment		;（WonderWitch等）
			     1C 		pop	ds			;
			     1C 		mov	bx,offset DGROUP:_WTD_Work
			     1C endif	;-----------------------
			     1C 
			     1C else	;--------------------------------	;WonderWitch版
			     1C 		push	SRAM_Segment		;
			     1C 		pop	ds			;
			     1C 		mov	bx,ds:[ProcContext_heap]
			     1C endif	;--------------------------------
			      C 
			      C ;構造体アドレスの設定
 07B2  8D B7 0380	      C 	lea	si,[bx + WTD_WorkAdd_System]
			      C 
			      C ;---------------------------------------------------------------
			      C ;取得
 07B6  33 C0		      C 	xor	ax,ax				;ax←0
 07B8  8A 44 21		      C 	mov	al,ds:[si].WTD_Sys_VolumeMusic	;
			      C 
			      C ;---------------------------------------------------------------
			      C 
			      C 	ret				;終了
 07BB  1F		   *	    pop    ds
 07BC  5E		   *	    pop    si
 07BD  5B		   *	    pop    bx
 07BE  CB		   *	    ret    00000h
 07BF			      C _GetMusicVolume	endp			;
			      C ;===============================================================|
			      C ;	void	(far *SetEffectVolume)(char volume);		|
			      C ;===============================================================|
			      C ;	引き数							|
			      C ;		iVolume	音量					|
			      C ;	返り値							|
			      C ;		無し						|
			      C ;	処理							|
			      C ;		効果音のマスターボリュームの設定		|
			      C ;===============================================================|
 07BF			      C _SetEffectVolume	proc far c	uses ax bx si ds,
			      C 	cVolume:byte
			      C 
			      C ;---------------------------------------------------------------
			      C ;ワークアドレスの取得
			      C 
			      C 	WTD_WorkGet	ds,bx			;ワークエリアアドレスの取得
			     1C ifdef	library	;------------------------	;※　ライブラリ版のみ必要
			     1C 
			     1C ifdef	IRAM	;---------------		;D-GROUP ＝ I-RAMの場合
 07BF  55		   *	    push   bp
 07C0  8B EC		   *	    mov    bp, sp
 07C2  50		   *	    push   ax
 07C3  53		   *	    push   bx
 07C4  56		   *	    push   si
 07C5  1E		   *	    push   ds
 07C6  6A 00		     1C 		push	IRAM_Segment		;
 07C8  1F		     1C 		pop	ds			;
 07C9  BB 0000 R	     1C 		mov	bx,offset DGROUP:_WTD_Work
			     1C 
			     1C else	;-----------------------		;D-GROUP ≠ S-RAMの場合
			     1C 		push	SRAM_Segment		;（WonderWitch等）
			     1C 		pop	ds			;
			     1C 		mov	bx,offset DGROUP:_WTD_Work
			     1C endif	;-----------------------
			     1C 
			     1C else	;--------------------------------	;WonderWitch版
			     1C 		push	SRAM_Segment		;
			     1C 		pop	ds			;
			     1C 		mov	bx,ds:[ProcContext_heap]
			     1C endif	;--------------------------------
			      C 
			      C ;構造体アドレスの設定
 07CC  8D B7 0380	      C 	lea	si,[bx + WTD_WorkAdd_System]
			      C 
			      C ;---------------------------------------------------------------
			      C ;設定
 07D0  8A 46 06		      C 	mov	al,cVolume			;
 07D3  88 44 22		      C 	mov	ds:[si].WTD_Sys_VolumeEffect,al	;
			      C 
			      C ;---------------------------------------------------------------
			      C 
			      C 	ret				;終了
 07D6  1F		   *	    pop    ds
 07D7  5E		   *	    pop    si
 07D8  5B		   *	    pop    bx
 07D9  58		   *	    pop    ax
 07DA  5D		   *	    pop    bp
 07DB  CB		   *	    ret    00000h
 07DC			      C _SetEffectVolume	endp		;
			      C ;===============================================================|
			      C ;	char	(far *GetEffectVolume)();			|
			      C ;===============================================================|
			      C ;	引き数							|
			      C ;		無し						|
			      C ;	返り値							|
			      C ;		ボリューム					|
			      C ;	処理							|
			      C ;		効果音のマスターボリュームの取得		|
			      C ;===============================================================|
 07DC			      C _GetEffectVolume	proc far c	uses bx si ds
			      C 
			      C ;---------------------------------------------------------------
			      C ;ワークアドレスの取得
			      C 
			      C 	WTD_WorkGet	ds,bx			;ワークエリアアドレスの取得
			     1C ifdef	library	;------------------------	;※　ライブラリ版のみ必要
			     1C 
			     1C ifdef	IRAM	;---------------		;D-GROUP ＝ I-RAMの場合
 07DC  53		   *	    push   bx
 07DD  56		   *	    push   si
 07DE  1E		   *	    push   ds
 07DF  6A 00		     1C 		push	IRAM_Segment		;
 07E1  1F		     1C 		pop	ds			;
 07E2  BB 0000 R	     1C 		mov	bx,offset DGROUP:_WTD_Work
			     1C 
			     1C else	;-----------------------		;D-GROUP ≠ S-RAMの場合
			     1C 		push	SRAM_Segment		;（WonderWitch等）
			     1C 		pop	ds			;
			     1C 		mov	bx,offset DGROUP:_WTD_Work
			     1C endif	;-----------------------
			     1C 
			     1C else	;--------------------------------	;WonderWitch版
			     1C 		push	SRAM_Segment		;
			     1C 		pop	ds			;
			     1C 		mov	bx,ds:[ProcContext_heap]
			     1C endif	;--------------------------------
			      C 
			      C ;構造体アドレスの設定
 07E5  8D B7 0380	      C 	lea	si,[bx + WTD_WorkAdd_System]
			      C 
			      C ;---------------------------------------------------------------
			      C ;取得
 07E9  33 C0		      C 	xor	ax,ax				;ax←0
 07EB  8A 44 22		      C 	mov	al,ds:[si].WTD_Sys_VolumeEffect	;
			      C 
			      C ;---------------------------------------------------------------
			      C 
			      C 	ret				;終了
 07EE  1F		   *	    pop    ds
 07EF  5E		   *	    pop    si
 07F0  5B		   *	    pop    bx
 07F1  CB		   *	    ret    00000h
 07F2			      C _GetEffectVolume	endp		;
			      C ;===============================================================|
			      C ;	void	(far *SetPcmVolume)(char volume);		|
			      C ;===============================================================|
			      C ;	引き数							|
			      C ;		bit0,1	右の音量	bit2,3	左の音量	|
			      C ;	返り値							|
			      C ;		無し						|
			      C ;	処理							|
			      C ;		PCM Voice の音量を設定する。			|
			      C ;===============================================================|
 07F2			      C _SetPcmVolume	proc far c	uses ax bx si ds,
			      C 	cVolume:byte
			      C 
			      C ;---------------------------------------------------------------
			      C ;ワークアドレスの取得
			      C 
			      C 	WTD_WorkGet	ds,bx			;ワークエリアアドレスの取得
			     1C ifdef	library	;------------------------	;※　ライブラリ版のみ必要
			     1C 
			     1C ifdef	IRAM	;---------------		;D-GROUP ＝ I-RAMの場合
 07F2  55		   *	    push   bp
 07F3  8B EC		   *	    mov    bp, sp
 07F5  50		   *	    push   ax
 07F6  53		   *	    push   bx
 07F7  56		   *	    push   si
 07F8  1E		   *	    push   ds
 07F9  6A 00		     1C 		push	IRAM_Segment		;
 07FB  1F		     1C 		pop	ds			;
 07FC  BB 0000 R	     1C 		mov	bx,offset DGROUP:_WTD_Work
			     1C 
			     1C else	;-----------------------		;D-GROUP ≠ S-RAMの場合
			     1C 		push	SRAM_Segment		;（WonderWitch等）
			     1C 		pop	ds			;
			     1C 		mov	bx,offset DGROUP:_WTD_Work
			     1C endif	;-----------------------
			     1C 
			     1C else	;--------------------------------	;WonderWitch版
			     1C 		push	SRAM_Segment		;
			     1C 		pop	ds			;
			     1C 		mov	bx,ds:[ProcContext_heap]
			     1C endif	;--------------------------------
			      C 
			      C ;構造体アドレスの設定
 07FF  8D B7 0380	      C 	lea	si,[bx + WTD_WorkAdd_System]
			      C 
			      C ;---------------------------------------------------------------
			      C ;設定
 0803  8A 46 06		      C 	mov	al,cVolume			;
 0806  88 44 23		      C 	mov	ds:[si].WTD_Sys_VolumePcm,al	;al←Set Data
 0809  B4 0F		      C 	mov	ah,0fh				;ah←Set Bit
 080B  E8 114E		      C 	call	SP_Set_VolumePCM		;
			      C 
			      C ;---------------------------------------------------------------
			      C 
			      C 	ret				;終了
 080E  1F		   *	    pop    ds
 080F  5E		   *	    pop    si
 0810  5B		   *	    pop    bx
 0811  58		   *	    pop    ax
 0812  5D		   *	    pop    bp
 0813  CB		   *	    ret    00000h
 0814			      C _SetPcmVolume	endp			;
			      C ;===============================================================|
			      C ;	char	(far *GetPcmVolume)();				|
			      C ;===============================================================|
			      C ;	引き数							|
			      C ;		無し						|
			      C ;	返り値							|
			      C ;		音量						|
			      C ;	処理							|
			      C ;		PCM Voice の音量を取得する。			|
			      C ;===============================================================|
 0814			      C _GetPcmVolume	proc far c	uses bx si ds
			      C 
			      C ;---------------------------------------------------------------
			      C ;ワークアドレスの取得
			      C 
			      C 	WTD_WorkGet	ds,bx			;ワークエリアアドレスの取得
			     1C ifdef	library	;------------------------	;※　ライブラリ版のみ必要
			     1C 
			     1C ifdef	IRAM	;---------------		;D-GROUP ＝ I-RAMの場合
 0814  53		   *	    push   bx
 0815  56		   *	    push   si
 0816  1E		   *	    push   ds
 0817  6A 00		     1C 		push	IRAM_Segment		;
 0819  1F		     1C 		pop	ds			;
 081A  BB 0000 R	     1C 		mov	bx,offset DGROUP:_WTD_Work
			     1C 
			     1C else	;-----------------------		;D-GROUP ≠ S-RAMの場合
			     1C 		push	SRAM_Segment		;（WonderWitch等）
			     1C 		pop	ds			;
			     1C 		mov	bx,offset DGROUP:_WTD_Work
			     1C endif	;-----------------------
			     1C 
			     1C else	;--------------------------------	;WonderWitch版
			     1C 		push	SRAM_Segment		;
			     1C 		pop	ds			;
			     1C 		mov	bx,ds:[ProcContext_heap]
			     1C endif	;--------------------------------
			      C 
			      C ;構造体アドレスの設定
 081D  8D B7 0380	      C 	lea	si,[bx + WTD_WorkAdd_System]
			      C 
			      C ;---------------------------------------------------------------
			      C ;取得
 0821  33 C0		      C 	xor	ax,ax				;ax←0
 0823  8A 44 23		      C 	mov	al,ds:[si].WTD_Sys_VolumePcm	;
			      C 
			      C ;---------------------------------------------------------------
			      C 
			      C 	ret				;終了
 0826  1F		   *	    pop    ds
 0827  5E		   *	    pop    si
 0828  5B		   *	    pop    bx
 0829  CB		   *	    ret    00000h
 082A			      C _GetPcmVolume	endp			;
			      C ;===============================================================|
			      C ;	void	(far *SetFIFO)(int size,char far *FIFO);	|
			      C ;===============================================================|
			      C ;	引き数							|
			      C ;		int	size	FIFOバッファのサイズ		|
			      C ;		char far *FIFO	FIFOバッファのアドレス		|
			      C ;	返り値							|
			      C ;		無し						|
			      C ;	処理							|
			      C ;		FIFOバッファを設定する。			|
			      C ;===============================================================|
 082A			      C _SetFIFO	proc far c	uses ax bx di si ds es,
			      C 	szFIFO:word,
			      C 	fptFIFO:far ptr byte
			      C 
			      C ifndef	hyoka;-------------------------------
 082A  55		   *	    push   bp
 082B  8B EC		   *	    mov    bp, sp
 082D  50		   *	    push   ax
 082E  53		   *	    push   bx
 082F  57		   *	    push   di
 0830  56		   *	    push   si
 0831  1E		   *	    push   ds
 0832  06		   *	    push   es
 0833  9C		      C 	pushf				;フラグ保存
			      C 
			      C ;---------------------------------------------------------------
			      C ;ワークアドレスの取得
			      C 
			      C 	WTD_WorkGet	ds,bx			;ワークエリアアドレスの取得
			     1C ifdef	library	;------------------------	;※　ライブラリ版のみ必要
			     1C 
			     1C ifdef	IRAM	;---------------		;D-GROUP ＝ I-RAMの場合
 0834  6A 00		     1C 		push	IRAM_Segment		;
 0836  1F		     1C 		pop	ds			;
 0837  BB 0000 R	     1C 		mov	bx,offset DGROUP:_WTD_Work
			     1C 
			     1C else	;-----------------------		;D-GROUP ≠ S-RAMの場合
			     1C 		push	SRAM_Segment		;（WonderWitch等）
			     1C 		pop	ds			;
			     1C 		mov	bx,offset DGROUP:_WTD_Work
			     1C endif	;-----------------------
			     1C 
			     1C else	;--------------------------------	;WonderWitch版
			     1C 		push	SRAM_Segment		;
			     1C 		pop	ds			;
			     1C 		mov	bx,ds:[ProcContext_heap]
			     1C endif	;--------------------------------
			      C 
			      C ;構造体アドレスの設定
 083A  8D B7 0380	      C 	lea	si,[bx + WTD_WorkAdd_System]
			      C 
			      C ;---------------------------------------------------------------
			      C 
 083E  FA		      C 	cli
			      C 	.repeat				;FIFOバッファが空になるまで待つ。
 083F			   *@C0028:
 083F  8B 44 2A		      C 	mov	ax,ds:[si].WTD_Sys_ComFIFO_Cnt	
			      C 	.until	(ax==ds:[si].WTD_Sys_ComFIFO_Adr)
 0842  3B 44 2C		   *	    cmp    ax, ds : [si] . WTD_Sys_ComFIFO_Adr
 0845  75 F8		   *	    jne    @C0028
 0847  FB		      C 	sti
			      C 
 0848  8B 46 06		      C 	mov	ax,szFIFO			;
 084B  89 44 2E		      C 	mov	ds:[si].WTD_Sys_ComFIFO_Size,ax	;
			      C 
 084E  C4 46 08		      C 	les	ax,fptFIFO			;
 0851  06		      C 	push	es				;引数の取得	Segment
 0852  50		      C 	push	ax				;		Offset
 0853  0E		      C 	push	cs				;データ変換
 0854  E8 FEFC		      C 	call	near ptr _ChangeFar		;dxax = wtdIL.ChangeFar(*FIFO);
 0857  83 C4 04		      C 	add	sp,+4				;
 085A  89 44 1C		      C 	mov	ds:[si].WTD_Sys_ComFIFO_Offset,ax
 085D  89 54 1E		      C 	mov	ds:[si].WTD_Sys_ComFIFO_Segment,dx
			      C 
			      C ;---------------------------------------------------------------
			      C 
 0860  9D		      C 	popf				;レジスタ復帰
			      C endif;----------------------------------------
			      C 
			      C 	ret				;
 0861  07		   *	    pop    es
 0862  1F		   *	    pop    ds
 0863  5E		   *	    pop    si
 0864  5F		   *	    pop    di
 0865  5B		   *	    pop    bx
 0866  58		   *	    pop    ax
 0867  5D		   *	    pop    bp
 0868  CB		   *	    ret    00000h
 0869			      C _SetFIFO	endp			;
			      C 
				include	wtd_int.asm			;割り込み　メインルーチン
			      C ;=======================================================================|
			      C ;									|
			      C ;		Wander Swan Total Sound Driver				|
			      C ;				Interrupt main program			|
			      C ;									|
			      C ;					Programmed by			|
			      C ;						A.Watanabe		|
			      C ;									|
			      C ;=======================================================================|
			      C ;****************************************************************
			      C ;*								*
			      C ;*			定数					*
			      C ;*								*
			      C ;****************************************************************
			      C ;
			      C ;	現状は無し
			      C ;
			      C ;****************************************************************
			      C ;*								*
			      C ;*			データテーブル				*
			      C ;*								*
			      C ;****************************************************************
			      C ;===============================================================|
			      C ;			Volume					|
			      C ;===============================================================|
			      C ;								|
			      C ;	Table = 256 * log(volume +1) / log(257)			|
			      C ;								|
			      C ;===============================================================|
			      C 	even
 086A			      C I_Volume_Table:
			      C ;		00h,01h,02h,03h,04h,05h,06h,07h,08h,09h,0Ah,0Bh,0Ch,0Dh,0Eh,0Fh
 086A  00 1F 32 3F 4A 52      C 	db	  0, 31, 50, 63, 74, 82, 89, 95,101,106,110,114,118,121,124,127
       59 5F 65 6A 6E 72
       76 79 7C 7F
 087A  82 85 87 8A 8C 8E      C 	db	130,133,135,138,140,142,144,146,148,150,152,153,155,156,158,159
       90 92 94 96 98 99
       9B 9C 9E 9F
 088A  A1 A2 A4 A5 A6 A7      C 	db	161,162,164,165,166,167,169,170,171,172,173,174,175,176,177,178
       A9 AA AB AC AD AE
       AF B0 B1 B2
 089A  B3 B4 B5 B6 B7 B8      C 	db	179,180,181,182,183,184,184,185,186,187,188,188,189,190,191,191
       B8 B9 BA BB BC BC
       BD BE BF BF
 08AA  C0 C1 C1 C2 C3 C3      C 	db	192,193,193,194,195,195,196,197,197,198,199,199,200,200,201,202
       C4 C5 C5 C6 C7 C7
       C8 C8 C9 CA
 08BA  CA CB CB CC CC CD      C 	db	202,203,203,204,204,205,206,206,207,207,208,208,209,209,210,210
       CE CE CF CF D0 D0
       D1 D1 D2 D2
 08CA  D3 D3 D3 D4 D4 D5      C 	db	211,211,211,212,212,213,213,214,214,215,215,216,216,216,217,217
       D5 D6 D6 D7 D7 D8
       D8 D8 D9 D9
 08DA  DA DA DA DB DB DC      C 	db	218,218,218,219,219,220,220,220,221,221,222,222,222,223,223,223
       DC DC DD DD DE DE
       DE DF DF DF
 08EA  E0 E0 E0 E1 E1 E1      C 	db	224,224,224,225,225,225,226,226,226,227,227,227,228,228,228,229
       E2 E2 E2 E3 E3 E3
       E4 E4 E4 E5
 08FA  E5 E5 E6 E6 E6 E7      C 	db	229,229,230,230,230,231,231,231,232,232,232,232,233,233,233,234
       E7 E7 E8 E8 E8 E8
       E9 E9 E9 EA
 090A  EA EA EA EB EB EB      C 	db	234,234,234,235,235,235,236,236,236,236,237,237,237,238,238,238
       EC EC EC EC ED ED
       ED EE EE EE
 091A  EE EF EF EF EF F0      C 	db	238,239,239,239,239,240,240,240,240,241,241,241,241,242,242,242
       F0 F0 F0 F1 F1 F1
       F1 F2 F2 F2
 092A  F2 F3 F3 F3 F3 F3      C 	db	242,243,243,243,243,243,244,244,244,244,245,245,245,245,246,246
       F4 F4 F4 F4 F5 F5
       F5 F5 F6 F6
 093A  F6 F6 F6 F7 F7 F7      C 	db	246,246,246,247,247,247,247,247,248,248,248,248,249,249,249,249
       F7 F7 F8 F8 F8 F8
       F9 F9 F9 F9
 094A  F9 FA FA FA FA FA      C 	db	249,250,250,250,250,250,251,251,251,251,251,252,252,252,252,252
       FB FB FB FB FB FC
       FC FC FC FC
 095A  FD FD FD FD FD FD      C 	db	253,253,253,253,253,253,254,254,254,254,254,255,255,255,255,255
       FE FE FE FE FE FF
       FF FF FF FF
			      C ;===============================================================|
			      C ;			Frection(Key)				|
			      C ;===============================================================|
			      C ;								|
			      C ;	Table = (3.072[MHz] / (32 * frection)) * 2^7		|
			      C ;								|
			      C ;		Frection : a = 440[Hz]				|
			      C ;								|
			      C ;								|
			      C ;	DeviceOut = 2048 - (Table / 2^(3 + Octave))		|
			      C ;								|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 096A			      C I_Frection_Table:
 096A  B782		      C 	dw	46978			;c	Bend Range ≒ 4
 096C  AD2C		      C 	dw	44332			;c#		( 3〜 6)
 096E  A373		      C 	dw	41843			;d	
 0970  9A47		      C 	dw	39495			;d#	
 0972  919E		      C 	dw	37278			;e	
 0974  8972		      C 	dw	35186			;f	
 0976  81BB		      C 	dw	33211			;f#	
 0978  7A73		      C 	dw	31347			;g	
 097A  73F7		      C 	dw	29687			;g#	
 097C  6D12		      C 	dw	27922			;a	
 097E  66F8		      C 	dw	26360			;a#	
 0980  6130		      C 	dw	24880			;b	
			      C ;****************************************************************
			      C ;*								*
			      C ;*			割り込みルーチン			*
			      C ;*				演奏・効果音・ＰＣＭ制御	*
			      C ;*								*
			      C ;****************************************************************
			      C ;*								*
			      C ;*	　演奏処理						*
			      C ;*								*
			      C ;*	●引数・返値（この値は保つ必要がある。）		*
			      C ;*		ds:bx	共有構造体アドレス			*
			      C ;*		ds:bp	ワークベースアドレス			*
			      C ;*								*
			      C ;*	●レジスタ割り振り					*
			      C ;*		ax	汎用(主に計算)				*
			      C ;*		ds:bx	共有構造体アドレス			*
			      C ;*		cx	汎用(主にカウンタ)			*
			      C ;*		dx	汎用(主に計算)				*
			      C ;*		ds:di	個別構造体				*
			      C ;*		es:si	演奏アドレス				*
			      C ;*		ds:bp	ワークベースアドレス			*
			      C ;*								*
			      C ;****************************************************************
			      C ;===============================================================|
			      C ;		Interrupt Main					|
			      C ;===============================================================|
			      C ;								|
			      C ;	●処理							|
			      C ;		　演奏ルーチンの呼び出し、			|
			      C ;		タイマーの制御を行うルーチン。			|
			      C ;								|
			      C ;	●使用レジスタ						|
			      C ;		ds:bp	ワーク領域先頭アドレス			|
			      C ;		ds:bx	パート共通構造体			|
			      C ;								|
			      C ;===============================================================|
			      C 	Public	I_Start
			      C 	even					;偶数アドレス配置
 0982			      C I_Start:
 0982  55		      C 	push	bp				;
 0983  50		      C 	push	ax				;
 0984  53		      C 	push	bx				;
 0985  51		      C 	push	cx				;
 0986  56		      C 	push	si				;
 0987  57		      C 	push	di				;
 0988  1E		      C 	push	ds				;レジスタ保存
			      C 
			      C ;---------------------------------------------------------------
			      C ;EOIの発行
 0989  FA		      C 	cli					;割り込み不可
 098A  B0 80		      C 	mov	al,Int_HblankSet		;
 098C  E6 B6		      C 	out	Int_Eoi,al			;出力
			      C 
			      C ;	in	al,Int_Enable			;
			      C ;	and	al,INT_HblankReset		;シリアル送信エンプティー
			      C ;	out	Int_Enable,al			;割り込み禁止
			      C 
			      C ;---------------------------------------------------------------
			      C ;バンクの設定
			      C 
			      C ifndef	IRAM		;DGROUP=IRAMの場合、不要
			      C 	;'/ram0'アクセス中は、処理をしない。
			      C 	in	al,BankSram			;現在のSRAM Bankを得る
			      C 	.if	(al==BANK_USERDS0)||(al==BANK_USERDS1)
			      C endif
			      C 
			      C ;---------------------------------------------------------------
			      C ;ワークエリアアドレスの取得
			      C 
			      C 	WTD_WorkGet	ds,bp			;ワークエリアアドレスの取得
			     1C ifdef	library	;------------------------	;※　ライブラリ版のみ必要
			     1C 
			     1C ifdef	IRAM	;---------------		;D-GROUP ＝ I-RAMの場合
 098E  6A 00		     1C 		push	IRAM_Segment		;
 0990  1F		     1C 		pop	ds			;
 0991  BD 0000 R	     1C 		mov	bp,offset DGROUP:_WTD_Work
			     1C 
			     1C else	;-----------------------		;D-GROUP ≠ S-RAMの場合
			     1C 		push	SRAM_Segment		;（WonderWitch等）
			     1C 		pop	ds			;
			     1C 		mov	bp,offset DGROUP:_WTD_Work
			     1C endif	;-----------------------
			     1C 
			     1C else	;--------------------------------	;WonderWitch版
			     1C 		push	SRAM_Segment		;
			     1C 		pop	ds			;
			     1C 		mov	bp,ds:[ProcContext_heap]
			     1C endif	;--------------------------------
 0994  8D 9E 0380	      C 	lea	bx,[bp + WTD_WorkAdd_System]	;ds;bx←共通構造体
			      C 
			      C ;===============================================================|
			      C ;	PCM Voice の処理（ with CPU Power）			|
			      C ;===============================================================|
			      C ;	●レジスタ使用						|
			      C ;		di	PCM Voice制御用構造体 のポインタ	|
			      C ;		si	*.wav のポインタ			|
			      C ;	※	cx	使用不可				|
			      C ;	※	dx	使用不可				|
			      C ;	※	es	使用不可				|
			      C ;===============================================================|
			      C 
			      C 	;-----------------------------------------------
			      C 	;タイマーをエミュレートするか？
			      C 	.if	(ds:[bx].WTD_Sys_Flag & WTD_Sys_TimerEmulate)
 0998  F7 07 0080	   *	    test   ds : [bx] . WTD_Sys_Flag, WTD_Sys_TimerEmulate
 099C  74 42		   *	    je     @C002A
			      C 
			      C 	    ;------------------------------------------------
			      C 	    ;タイマーをエミュレートする時に追加される処理。	;
			      C 	    ;CALL命令と、ret命令の6clockが勿体ない		;
			      C 	    ;------------------------------------------------
			      C 	    ;PCM Voice をCPUパワーで鳴らす？
			      C 	    .if	(ds:[bx].WTD_Sys_Flag & WTD_Sys_Pcm)
 099E  F7 07 0004	   *	    test   ds : [bx] . WTD_Sys_Flag, WTD_Sys_Pcm
 09A2  74 34		   *	    je     @C002C
			      C 	;
			      C 	;	to do	Sound-DMA を使わないモードかチェック
			      C 	;
			      C 
			      C 		;レジスタ設定
			      C 	;	mov	di,bp					;
			      C 	;	add	di,WTD_WorkAdd_PCM			;di←パート個別構造体
 09A4  8D BE 0580	      C 		lea	di,[bp + WTD_WorkAdd_PCM]
			      C 
			      C 		;アドレス取得
 09A8  1E		      C 		push	ds					;レジスタ保存
 09A9  C5 75 08		      C 		lds	si,dword ptr ds:[di].WTD_PcmAddress	;es:si←Play Address
			      C 		;データ取得
			      C 	;	mov	al,ds:[si]				;(注意：PipeLine)
			      C 	;	inc	si					;フラグも変化させる
 09AC  AC		      C 		lodsb
 09AD  1F		      C 		pop	ds					;レジスタ復帰
			      C 		;データ出力
 09AE  E6 89		      C 		out	PCM_Com_VolumeCh2,al			;出力
			      C 
			      C 		;アドレス保存
 09B0  89 75 08		      C 		mov	word ptr ds:[di].WTD_PcmAddress+0,si	;アドレス保存
			      C 		;ポインタチェック（セグメント境界？）
			      C 		.if	(si==0)
 09B3  0B F6		   *	    or	si, si
 09B5  75 05		   *	    jne    @C002E
 09B7  81 45 0A 1000	      C 			add	word ptr ds:[di].WTD_PcmAddress+2,1000h
			      C 		.endif
			      C 
			      C 		;終了？
 09BC			   *@C002E:
 09BC  83 6D 0C 01	      C 		sub	word ptr ds:[di].WTD_PcmSize+0,1	;PcmSize ディクリメント
 09C0  83 5D 0E 00	      C 		sbb	word ptr ds:[di].WTD_PcmSize+2,0	;
 09C4  8B 45 0C		      C 		mov	ax,word ptr ds:[di].WTD_PcmSize+0	;
 09C7  0B 45 0E		      C 		or	ax,word ptr ds:[di].WTD_PcmSize+2	;
			      C 		.if	(zero?)					;
 09CA  75 0C		   *	    jne    @C0030
			      C 			;PCM Voice 発音終了
 09CC  83 27 FB		      C 			and	ds:[bx].WTD_Sys_Flag,WTD_Sys_PcmR
 09CF  81 27 DFFF	      C 			and	ds:[bx].WTD_Sys_Flag,WTD_Sys_EffectMask2R
 09D3  B5 81		      C 			mov	ch,81h				;設定復帰ch2
 09D5  E8 04BA		      C 			call	I_Effect_Return			;
			      C 		.endif
			      C 	    .endif
 09D8			   *@C0030:
			      C 
			      C 	    ;---------------				;
			      C 	    ;テンポ用カウンター　ディクリメント		;
 09D8			   *@C002C:
 09D8  FF 4F 26		      C 	    dec	ds:[bx].WTD_Sys_TempoCounter		;
 09DB  74 03 E9 0083	      C 	    jnz	I_MusicEffectStep			;演奏を飛ばす。
			      C 
			      C 	.endif
 09E0			   *@C002A:
			      C 
			      C 	;-----------------------------------------------
			      C 	;PCM Voice を Sound DMA で鳴らしている。
			      C 	.if	(ds:[bx].WTD_Sys_Flag & WTD_Sys_Pcm)
 09E0  F7 07 0004	   *	    test   ds : [bx] . WTD_Sys_Flag, WTD_Sys_Pcm
 09E4  74 10		   *	    je     @C0032
			      C 	;
			      C 	;	to do	Sound-DMA を使うモードかチェック
			      C 	;
			      C 	;   in	al, サウンドDMA
			      C 	   .if	!(al & 80h)				;
 09E6  A8 80		   *	    test   al, 080h
 09E8  75 0C		   *	    jne    @C0034
 09EA  83 27 FB		      C 		and	ds:[bx].WTD_Sys_Flag,WTD_Sys_PcmR
 09ED  81 27 DFFF	      C 		and	ds:[bx].WTD_Sys_Flag,WTD_Sys_EffectMask2R
 09F1  B5 81		      C 		mov	ch,81h				;設定復帰ch2
 09F3  E8 049C		      C 		call	I_Effect_Return			;
			      C 	   .endif
			      C 	.endif
 09F6			   *@C0034:
 09F6			   *@C0032:
			      C 
			      C ;===============================================================|
			      C ;	演奏 ＆ 効果音処理					|
			      C ;===============================================================|
			      C ;	●レジスタ使用						|
			      C ;		ds:di	個別構造体		破壊ok		|
			      C ;	（	es:si	演奏アドレス		破壊ok	）	|
			      C ;		ax	汎用(主に計算)		破壊ok		|
			      C ;		cx	汎用(主にカウンタ)	破壊ok		|
			      C ;		dx	汎用(主に計算)		破壊ok		|
			      C ;===============================================================|
			      C ;演奏ルーチン
 09F6  52		      C 	push	dx				;
 09F7  06		      C 	push	es
			      C 
			      C 	;演奏あるか？
			      C 	.if	(ds:[bx].WTD_Sys_Flag & WTD_Sys_Music)
 09F8  F7 07 0001	   *	    test   ds : [bx] . WTD_Sys_Flag, WTD_Sys_Music
 09FC  74 1A		   *	    je     @C0036
			      C 
			      C 		;レジスタ設定
 09FE  8D BE 0600	      C 		lea	di,[bp + WTD_WorkAdd_Ch0]
 0A02  8E 47 08		      C 		mov	es,ds:[bx].WTD_Sys_MusicSegment	;es←演奏データセグメント
			      C 
			      C 		;演奏処理ルーチンの呼び出し
 0A05  33 C9		      C 		xor	cx,cx				;製品版は最大'20'。
 0A07  8A 4F 28		      C 		mov	cl,ds:[bx].WTD_Sys_MusicPart	;廉価版は最大' 4'。
			      C 		.while	(cx!=0)
 0A0A  EB 08		   *	    jmp    @C0038
 0A0C			   *@C0039:
 0A0C  E8 005D		      C 			call	I_Play			;
 0A0F  81 C7 0080	      C 			add	di,WTD_WorkChSize	;構造体のサイズは80h(0x80)
 0A13  49		      C 			dec	cx			;
			      C 		.endw
 0A14			   *@C0038:
 0A14  0B C9		   *	    or	cx, cx
 0A16  75 F4		   *	    jne    @C0039
			      C 
			      C 	.endif
 0A18			   *@C0036:
			      C 
			      C ;---------------------------------------------------------------
			      C ;効果音ルーチン
			      C 
			      C 	;効果音あるか？
			      C 	.if	(ds:[bx].WTD_Sys_Flag & WTD_Sys_Effect)
 0A18  F7 07 0002	   *	    test   ds : [bx] . WTD_Sys_Flag, WTD_Sys_Effect
 0A1C  74 1A		   *	    je     @C003B
			      C 
			      C 		;レジスタ設定
 0A1E  8D BE 0400	      C 		lea	di,[bp + WTD_WorkAdd_Ech0]
 0A22  8E 47 0C		      C 		mov	es,ds:[bx].WTD_Sys_EffectSegment	;es←効果音データセグメント
			      C 
			      C 		;演奏処理ルーチンの呼び出し
 0A25  33 C9		      C 		xor	cx,cx				;
 0A27  8A 4F 29		      C 		mov	cl,ds:[bx].WTD_Sys_EffectPart	;最大'3'。
			      C 		.while	(cx!=0)
 0A2A  EB 08		   *	    jmp    @C003D
 0A2C			   *@C003E:
 0A2C  E8 003D		      C 			call	I_Play			;
 0A2F  81 C7 0080	      C 			add	di,WTD_WorkChSize	;構造体のサイズは80h(0x80)
 0A33  49		      C 			dec	cx			;
			      C 		.endw
 0A34			   *@C003D:
 0A34  0B C9		   *	    or	cx, cx
 0A36  75 F4		   *	    jne    @C003E
			      C 
			      C 	.endif
 0A38			   *@C003B:
			      C 
			      C ;---------------------------------------------------------------
			      C ;PCM Vioce効果音が発生しており、尚かつ終了であるならば、
			      C ;タイマーを戻す。
			      C 
			      C 	;タイマーエミュレート中であるか？
			      C 	.if	(ds:[bx].WTD_Sys_Flag & WTD_Sys_TimerEmulate)
 0A38  F7 07 0080	   *	    test   ds : [bx] . WTD_Sys_Flag, WTD_Sys_TimerEmulate
 0A3C  74 23		   *	    je     @C0040
			      C 
			      C 	    ;PcmVioce処理終了？
			      C 	    .if	(ds:[bx].WTD_Sys_Flag & WTD_Sys_Pcm)
 0A3E  F7 07 0004	   *	    test   ds : [bx] . WTD_Sys_Flag, WTD_Sys_Pcm
 0A42  74 0E		   *	    je     @C0042
			      C 
			      C 		;●PcmVioce処理継続の場合
			      C 		;タイマー設定
 0A44  B8 0001		      C 		mov	ax,1				;割り込み周期は最速
 0A47  E8 0DC4		      C 		call	T_Set_Frection			;(12KHz)
			      C 		;タイマーカウンタ設定
 0A4A  8B 47 24		      C 		mov	ax,ds:[bx].WTD_Sys_Tempo	;
 0A4D  89 47 26		      C 		mov	ds:[bx].WTD_Sys_TempoCounter,ax	;TempoCounter
			      C 
			      C 	    .else
 0A50  EB 0F		   *	    jmp    @C0044
 0A52			   *@C0042:
			      C 
			      C 		;●PcmVioce処理終了の場合。
			      C 		;タイマー設定
 0A52  8B 47 24		      C 		mov	ax,ds:[bx].WTD_Sys_Tempo	;タイマーの設定
 0A55  E8 0DB6		      C 		call	T_Set_Frection			;
			      C 		;タイマーカウンタ設定
			      C 	;	xor	ax,ax				;ax←0
 0A58  C7 47 26 0000	      C 		mov	ds:[bx].WTD_Sys_TempoCounter,0	;TempoCounter = 0
			      C 		;フラグ初期化
			      C 	;	and	ds:[bx].WTD_Sys_Flag,WTD_Sys_PcmR		;PCM効果音ディセーブル
			      C 	;	and	ds:[bx].WTD_Sys_Flag,WTD_Sys_PcmEndR		;このフラグは廃止
			      C 	;	and	ds:[bx].WTD_Sys_Flag,WTD_Sys_EffectMask2R	;ch2 効果音マスクRes
 0A5D  81 27 FF7F	      C 		and	ds:[bx].WTD_Sys_Flag,WTD_Sys_TimerEmulateR	;タイマーエミュレートRes
			      C 	;	mov	ch,81h				;設定復帰ch2
			      C 	;	call	I_Effect_Return			;
			      C 
			      C 	    .endif
			      C 	.endif
 0A61			   *@C0044:
 0A61			   *@C0040:
			      C 
 0A61  07		      C 	pop	es
 0A62  5A		      C 	pop	dx				;
			      C 
			      C ;===============================================================|
 0A63			      C I_MusicEffectStep:					;
			      C 
			      C ;
			      C ;---------------------------------------------------------------
			      C ;バンクの復帰
			      C ifndef	IRAM		;DGROUP=IRAMの場合、不要
			      C ;
			      C 	.endif
			      C 
			      C endif
			      C ;---------------------------------------------------------------
			      C ;割り込みの終了
			      C 
			      C ;	cli				;割り込み禁止
			      C ;	in	al,Int_Enable		;
			      C ;	or	al,INT_HblankSet	;タイマー
			      C ;	out	Int_Enable,al		;割り込み許可
			      C 
 0A63  1F		      C 	pop	ds				;レジスタ復帰
 0A64  5F		      C 	pop	di				;
 0A65  5E		      C 	pop	si				;
 0A66  59		      C 	pop	cx				;
 0A67  5B		      C 	pop	bx				;
 0A68  58		      C 	pop	ax				;
 0A69  5D		      C 	pop	bp				;
 0A6A  CF		      C 	iret					;
			      C ;===============================================================|
			      C ;		Music Control Main				|
			      C ;===============================================================|
			      C ;	●引数							|
			      C ;		ds:bp	ワークベースアドレス	引数		|
			      C ;		ds:bx	共有構造体アドレス	引数		|
			      C ;		ds:di	個別構造体		引数		|
			      C ;	●レジスタ使用						|
			      C ;		es:si	演奏アドレス		引数		|
			      C ;		cx	何パート目？		破壊NG		|
			      C ;		ax	ゲートタイム計算用	破壊ok		|
			      C ;		dx	汎用(主に計算)		破壊ok		|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 0A6C			      C I_Play	proc	near	uses	cx	;
			      C 
			      C 	;演奏チェック
 0A6C  51		   *	    push   cx
			      C 	.if	!(ds:[di].WTD_FlagControl&WTD_Ctrl_PlayEnd)
 0A6D  F7 05 8000	   *	    test   ds : [di] . WTD_FlagControl, WTD_Ctrl_PlayEnd
 0A71  74 03 E9 0095	   *	    jne    @C0045
			      C 
			      C 		;音長カウンター・ディクリメント
 0A76  FF 4D 16		      C 		dec	ds:[di].WTD_LengCounter
 0A79  8B 45 14		      C 		mov	ax,ds:[di].WTD_Leng			;
 0A7C  2B 45 16		      C 		sub	ax,ds:[di].WTD_LengCounter		;ax←経過時間
			      C 
			      C 
			      C 		;音長による、キーオンディレイ
			      C 		.if	(ax==ds:[di].WTD_KeyOnDelay)		;'k'コマンドの判定
 0A7F  3B 45 1C		   *	    cmp    ax, ds : [di] . WTD_KeyOnDelay
 0A82  75 03		   *	    jne    @C0047
 0A84  E8 00B5		      C 			call	I_Play_KeyOn			;
			      C 		.endif
			      C 
			      C 
			      C 		;音長による、音色制御
			      C 		.if	( !(ds:[di].WTD_Program2nd&80h) && (ds:[di].WTD_Key!=0ffh) && (ax==ds:[di].WTD_ProgramRate) )
 0A87			   *@C0047:
 0A87  F6 45 75 80	   *	    test   ds : [di] . WTD_Program2nd, 080h
 0A8B  75 18		   *	    jne    @C0049
 0A8D  80 7D 1F FF	   *	    cmp    ds : [di] . WTD_Key, 0FFh
 0A91  74 12		   *	    je     @C0049
 0A93  3B 45 72		   *	    cmp    ax, ds : [di] . WTD_ProgramRate
 0A96  75 0D		   *	    jne    @C0049
 0A98  50		      C 			push	ax				;
 0A99  8A 45 75		      C 			mov	al,ds:[di].WTD_Program2nd	;
 0A9C  24 7F		      C 			and	al,07fh				;上位bitのマスク
 0A9E  BA 1720 R	      C 			mov	dx,offset CGROUP:I_Table_Voice	;
 0AA1  E8 0B04		      C 			call	I_Table_Jump			;
 0AA4  58		      C 			pop	ax				;
			      C 		.endif
			      C 
			      C 
			      C 		;音長による、ゲートタイム制御
			      C 		.if	(ax!=ds:[di].WTD_GateTimeStepFirst)	;'u'コマンドでkeyoffするか？
 0AA5			   *@C0049:
 0AA5  3B 45 58		   *	    cmp    ax, ds : [di] . WTD_GateTimeStepFirst
 0AA8  74 40		   *	    je     @C004D
			      C 
 0AAA  8B 45 14		      C 			mov	ax,ds:[di].WTD_Leng		;'Q','U','q'コマンドの判定
 0AAD  8A 6D 55		      C 			mov	ch,ds:[di].WTD_GateTime8	;ch←GateTime8
 0AB0  D0 C5		      C 			rol	ch,1				;
 0AB2  D0 ED		      C 			shr	ch,1				;Bit 7 Reset & Bit 7 -> Cy Flag
			      C 			.if	(!Carry?)
 0AB4  72 15		   *	    jb     @C004F
 0AB6  BA 0008		      C 				mov	dx,8			;'Q'コマンド
 0AB9  2A D5		      C 				sub	dl,ch			;dx = 8 − ch
 0ABB  F7 E2		      C 				mul	dx			;dx:ax = ax × dx
 0ABD  D1 EA		      C 				shr	dx,1			;
 0ABF  D1 E8		      C 				shr	ax,1			;
 0AC1  D1 EA		      C 				shr	dx,1			;
 0AC3  D1 E8		      C 				shr	ax,1			;
 0AC5  D1 EA		      C 				shr	dx,1			;
 0AC7  D1 E8		      C 				shr	ax,1			;ax = dx:ax ÷ cl
			      C 			.else
 0AC9  EB 0D		   *	    jmp    @C0051
 0ACB			   *@C004F:
 0ACB  B1 64		      C 				mov	cl,100			;cl = 100
 0ACD  BA 0064		      C 				mov	dx,100			;dx = 100
 0AD0  2A D5		      C 				sub	dl,ch			;dx = dx − ch
 0AD2  F7 E2		      C 				mul	dx			;dx:ax = ax × dx
 0AD4  32 ED		      C 				xor	ch,ch			;
 0AD6  F7 F1		      C 				div	cx			;ax = dx:ax ÷ cl
			      C 			.endif
			      C 
			      C 
 0AD8			   *@C0051:
 0AD8  03 45 56		      C 			add	ax,ds:[di].WTD_GateTimeStepLast	;ax = ax + WTD_GateTimeStepLast
			      C 			.if	(Carry?)			;オーバーフローしたら、
 0ADB  73 03		   *	    jae    @C0052
 0ADD  B8 FFFF		      C 				mov	ax,0ffffh		;最大値に修正。
			      C 			.endif					;
			      C 			.if	(ax==ds:[di].WTD_LengCounter)	;
 0AE0			   *@C0052:
 0AE0  3B 45 16		   *	    cmp    ax, ds : [di] . WTD_LengCounter
 0AE3  75 08		   *	    jne    @C0054
 0AE5  E8 00E6		      C 				call	I_Play_KeyOff		;
			      C 			.endif
			      C 
			      C 		.else
 0AE8  EB 03		   *	    jmp    @C0056
 0AEA			   *@C004D:
 0AEA  E8 00E1		      C 			call	I_Play_KeyOff			;
			      C 
			      C 		.endif
			      C 
			      C 
			      C 		;音長カウンタ０ならば、コマンド処理
			      C 		.if	(ds:[di].WTD_LengCounter==0)		;音長カウンタ＝０？
 0AED			   *@C0056:
 0AED			   *@C0054:
 0AED  83 7D 16 00	   *	    cmp    ds : [di] . WTD_LengCounter, 000h
 0AF1  75 18		   *	    jne    @C0057
			      C 
 0AF3  8B 75 06		      C 			mov	si,ds:[di].WTD_Address		;es:si←Play Address
 0AF6  E8 0023		      C 			call	I_Play_Loop			;制御ルーチンへ。
 0AF9  89 75 06		      C 			mov	ds:[di].WTD_Address,si		;
			      C 
			      C 	;		;演奏終了？　＆　KeyOnDelayは０？
			      C 			.if	(!(ds:[di].WTD_FlagControl&WTD_Ctrl_PlayEnd) && (ds:[di].WTD_KeyOnDelay==0))
 0AFC  F7 05 8000	   *	    test   ds : [di] . WTD_FlagControl, WTD_Ctrl_PlayEnd
 0B00  75 09		   *	    jne    @C0059
 0B02  83 7D 1C 00	   *	    cmp    ds : [di] . WTD_KeyOnDelay, 000h
 0B06  75 03		   *	    jne    @C0059
 0B08  E8 0031		      C 				call	I_Play_KeyOn		;であれば、KeyOn
			      C 			.endif
			      C 		.endif
 0B0B			   *@C0059:
			      C 
			      C 
			      C 	.endif
 0B0B			   *@C0057:
 0B0B			   *@C0045:
			      C 
			      C 	;制御ルーチンへ
 0B0B  E8 01EC		      C 	call	I_Play_Pan			;パン制御
 0B0E  E8 0169		      C 	call	I_Play_Volume			;音量制御
			      C 	.if	(ds:[di].WTD_ExprSet!=0)	;　音量０でなかったら
 0B11  80 7D 40 00	   *	    cmp    ds : [di] . WTD_ExprSet, 000h
 0B15  74 03		   *	    je     @C005C
 0B17  E8 0110		      C 		call	I_Play_Frection		;音程制御
			      C 	.endif
 0B1A			   *@C005C:
			      C 
			      C 
			      C 	ret				;
 0B1A  59		   *	    pop    cx
 0B1B  C3		   *	    ret    00000h
 0B1C			      C I_Play	endp
			      C ;****************************************************************
			      C ;*								*
			      C ;*			割り込みルーチン			*
			      C ;*				演奏・効果音制御部		*
			      C ;*				ループ				*
			      C ;*								*
			      C ;****************************************************************
			      C ;===============================================================|
			      C ;	●引数							|
			      C ;		ds:bp	ワークベースアドレス	引数		|
			      C ;		ds:bx	共有構造体アドレス	引数		|
			      C ;		ds:di	個別構造体		引数		|
			      C ;		es:si	演奏アドレス		引数		|
			      C ;	●レジスタ使用						|
			      C ;		cx	何パート目？		破壊ok		|
			      C ;		ax	ゲートタイム計算用	破壊ok		|
			      C ;		dx	汎用(主に計算)		破壊ok		|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 0B1C			      C I_Play_Loop	proc	near		;
			      C 
			      C 	.while	( !(ds:[di].WTD_FlagControl&WTD_Ctrl_PlayEnd) && (ds:[di].WTD_LengCounter==0) )
 0B1C  EB 10		   *	    jmp    @C005E
 0B1E			   *@C005F:
			      C 
			      C 		;演奏データ読み込み
 0B1E  26: AC		      C 		lodsb	es:[si]
			      C 
			      C 		;コマンドタイプチェック
 0B20  D0 C0		      C 		rol	al,1			;
 0B22  D0 E8		      C 		shr	al,1			;cy←Command Type
			      C 
			      C 		;それぞれへ条件コール
			      C 		.if	(Carry?)
 0B24  73 05		   *	    jae    @C0060
 0B26  E8 042D		      C 			call	I_PlayKey		;
			      C 		.else
 0B29  EB 03		   *	    jmp    @C0062
 0B2B			   *@C0060:
 0B2B  E8 0596		      C 			call	I_PlayCommand		;
			      C 		.endif
			      C 
			      C 	.endw
 0B2E			   *@C0062:
 0B2E			   *@C005E:
 0B2E  F7 05 8000	   *	    test   ds : [di] . WTD_FlagControl, WTD_Ctrl_PlayEnd
 0B32  75 06		   *	    jne    @C0063
 0B34  83 7D 16 00	   *	    cmp    ds : [di] . WTD_LengCounter, 000h
 0B38  74 E4		   *	    je     @C005F
 0B3A			   *@C0063:
			      C 
 0B3A  C3		      C 	ret				;
 0B3B			      C I_Play_Loop	endp
			      C ;****************************************************************
			      C ;*								*
			      C ;*			割り込みルーチン			*
			      C ;*				演奏・効果音制御部		*
			      C ;*				KeyOn,KeyOff制御		*
			      C ;*								*
			      C ;****************************************************************
			      C ;*	●引数							*
			      C ;*		ds:bp	ワークベースアドレス	引数		*
			      C ;*		ds:bx	共有構造体アドレス	引数		*
			      C ;*		ds:di	個別構造体		引数		*
			      C ;*		es:si	演奏アドレス		引数		*
			      C ;*	●レジスタ使用						*
			      C ;*		ax	汎用(主に計算)		破壊NG		*
			      C ;*		cx	制御Flag		破壊NG		*
			      C ;*		dx	LFO/EMB制御構造体	破壊ok		*
			      C ;****************************************************************
			      C ;===============================================================|
			      C ;			KeyOn (Hardware,Software)		|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 0B3C			      C I_Play_KeyOn	proc	near	uses	ax cx
			      C 
			      C 	;休符ではない ＆＆ 前回タイではない
 0B3C  50		   *	    push   ax
 0B3D  51		   *	    push   cx
			      C 	.if	((ds:[di].WTD_Key!=0ffh) && !(ds:[di].WTD_FlagTai & 02h))
 0B3E  80 7D 1F FF	   *	    cmp    ds : [di] . WTD_Key, 0FFh
 0B42  75 03 E9 0084	   *	    je     @C0065
 0B47  F6 45 02 02	   *	    test   ds : [di] . WTD_FlagTai, 002h
 0B4B  75 7E		   *	    jne    @C0065
			      C 
			      C 		;音色制御
 0B4D  8A 45 75		      C 		mov	al,ds:[di].WTD_Program2nd	;'@'コマンド必要性の確認
 0B50  22 45 76		      C 		and	al,ds:[di].WTD_Program3rd	;第2,3パラメータの指定が無かったら、処理は無し。
			      C 		.if	!(al&080h)
 0B53  A8 80		   *	    test   al, 080h
 0B55  75 0B		   *	    jne    @C0068
 0B57  8A 45 74		      C 			mov	al,ds:[di].WTD_Program1st	;
 0B5A  24 7F		      C 			and	al,07fh				;上位bitのマスク
 0B5C  BA 1720 R	      C 			mov	dx,offset CGROUP:I_Table_Voice	;
 0B5F  E8 0A46		      C 			call	I_Table_Jump			;
			      C 		.endif
			      C 
			      C 		;音量Embは処理必要。
			      C 		.if	(ds:[di].WTD_FlagControl&WTD_Ctrl_ExprEmb)
 0B62			   *@C0068:
 0B62  F7 05 0008	   *	    test   ds : [di] . WTD_FlagControl, WTD_Ctrl_ExprEmb
 0B66  74 0B		   *	    je     @C006A
 0B68  B9 0100		      C 			mov	cx,WTD_Ctrl_EmbVol		;
 0B6B  BA 004D		      C 			mov	dx,WTD_ExprEmb			;
 0B6E  E8 0205		      C 			call	I_Play_KeyOn_Emb		;
			      C 		.else
 0B71  EB 04		   *	    jmp    @C006C
 0B73			   *@C006A:
 0B73  C6 45 51 FF	      C 			mov	ds:[di].WTD_ExprEmbLevelSet,0ffh
			      C 		.endif
			      C 
			      C 	;	.if	(ds:[di].WTD_FlagControl&0037h)	;音量Emb以外の確認。ソフトウェア処理がなかったら飛ばす。
			      C 
			      C 		;音程Emb
			      C 		.if	(ds:[di].WTD_FlagControl&WTD_Ctrl_BendEmb)
 0B77			   *@C006C:
 0B77  F7 05 0002	   *	    test   ds : [di] . WTD_FlagControl, WTD_Ctrl_BendEmb
 0B7B  74 09		   *	    je     @C006D
 0B7D  B9 0080		      C 			mov	cx,WTD_Ctrl_EmbFreq		;
 0B80  BA 0039		      C 			mov	dx,WTD_BendEmb			;
 0B83  E8 01F0		      C 			call	I_Play_KeyOn_Emb		;
			      C 		.endif
			      C 
			      C 		;パンEmb
			      C 		.if	(ds:[di].WTD_FlagControl&WTD_Ctrl_PanEmb)
 0B86			   *@C006D:
 0B86  F7 05 0020	   *	    test   ds : [di] . WTD_FlagControl, WTD_Ctrl_PanEmb
 0B8A  74 09		   *	    je     @C006F
 0B8C  B9 0200		      C 			mov	cx,WTD_Ctrl_EmbPan		;
 0B8F  BA 006D		      C 			mov	dx,WTD_PanEmb			;
 0B92  E8 01E1		      C 			call	I_Play_KeyOn_Emb		;
			      C 		.endif
			      C 
			      C 		;音量LFO
			      C 		.if	(ds:[di].WTD_FlagControl&WTD_Ctrl_ExprLFO)
 0B95			   *@C006F:
 0B95  F7 05 0004	   *	    test   ds : [di] . WTD_FlagControl, WTD_Ctrl_ExprLfo
 0B99  74 06		   *	    je     @C0071
 0B9B  BA 0044		      C 			mov	dx,WTD_ExprLFO			;
 0B9E  E8 01B9		      C 			call	I_Play_KeyOn_LFO		;
			      C 		.endif
			      C 
			      C 		;音程LFO
			      C 		.if	(ds:[di].WTD_FlagControl&WTD_Ctrl_BendLfo)
 0BA1			   *@C0071:
 0BA1  F7 05 0001	   *	    test   ds : [di] . WTD_FlagControl, WTD_Ctrl_BendLfo
 0BA5  74 06		   *	    je     @C0073
 0BA7  BA 0030		      C 			mov	dx,WTD_BendLFO			;
 0BAA  E8 01AD		      C 			call	I_Play_KeyOn_LFO		;
			      C 		.endif
			      C 
			      C 		;パンLFO
			      C 		.if	(ds:[di].WTD_FlagControl&WTD_Ctrl_PanLFO)
 0BAD			   *@C0073:
 0BAD  F7 05 0010	   *	    test   ds : [di] . WTD_FlagControl, WTD_Ctrl_PanLfo
 0BB1  74 06		   *	    je     @C0075
 0BB3  BA 0064		      C 			mov	dx,WTD_PanLFO			;
 0BB6  E8 01A1		      C 			call	I_Play_KeyOn_LFO		;
			      C 		.endif
			      C 
			      C ;		.endif
			      C 
			      C ifndef	hyoka	;--------------------------------廉価版は無し
			      C 		;モジュレーション
 0BB9			   *@C0075:
 0BB9  33 C0		      C 		xor	ax,ax					;
			      C 		.if	(ds:[di].WTD_ModLevelSet!=al)		;
 0BBB  38 45 5E		   *	    cmp    ds : [di] . WTD_ModLevelSet, al
 0BBE  74 0B		   *	    je     @C0077
 0BC0  88 45 5E		      C 			mov	ds:[di].WTD_ModLevelSet,al	;
 0BC3  B1 01		      C 			mov	cl,MIDI_Ctrl_Mod		;
 0BC5  BA 1760 R	      C 			mov	dx,offset CGROUP:I_Table_CtrlChgB
 0BC8  E8 09DD		      C 			call	I_Table_Jump			;モジュレーションを０にする。
			      C 		.endif
			      C endif	;----------------------------------------
			      C 
			      C 	.endif
 0BCB			   *@C0077:
 0BCB			   *@C0065:
			      C 	ret				;
 0BCB  59		   *	    pop    cx
 0BCC  58		   *	    pop    ax
 0BCD  C3		   *	    ret    00000h
 0BCE			      C I_Play_KeyOn	endp
			      C ;===============================================================|
			      C ;			KeyOff (Hardware,Software)		|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 0BCE			      C I_Play_KeyOff	proc	near	uses	ax cx
			      C 
 0BCE  50		   *	    push   ax
 0BCF  51		   *	    push   cx
			      C 	.if	!(ds:[di].WTD_FlagTai & 01h)
 0BD0  F6 45 02 01	   *	    test   ds : [di] . WTD_FlagTai, 001h
 0BD4  75 50		   *	    jne    @C0079
			      C 
			      C 		;ハードウェアをKeyOff
 0BD6  BA 1634 R	      C 		mov	dx,offset CGROUP:I_Table_KeyOff	;
 0BD9  E8 09CC		      C 		call	I_Table_Jump			;KeyOff
			      C 
			      C 		;音色制御
			      C 		.if	!(ds:[di].WTD_Program3rd&80h)	;'@'コマンド	必要性の確認
 0BDC  F6 45 76 80	   *	    test   ds : [di] . WTD_Program3rd, 080h
 0BE0  75 0B		   *	    jne    @C007B
 0BE2  8A 45 76		      C 			mov	al,ds:[di].WTD_Program3rd	;
 0BE5  24 7F		      C 			and	al,07fh				;上位bitのマスク
 0BE7  BA 1720 R	      C 			mov	dx,offset CGROUP:I_Table_Voice	;
 0BEA  E8 09BB		      C 			call	I_Table_Jump			;
			      C 		.endif
			      C 
			      C 		;音量Emb
			      C 		.if	(ds:[di].WTD_FlagControl&WTD_Ctrl_ExprEmb)
 0BED			   *@C007B:
 0BED  F7 05 0008	   *	    test   ds : [di] . WTD_FlagControl, WTD_Ctrl_ExprEmb
 0BF1  74 0B		   *	    je     @C007D
 0BF3  B9 0100		      C 			mov	cx,WTD_Ctrl_EmbVol		;
 0BF6  BA 004D		      C 			mov	dx,WTD_ExprEmb			;
 0BF9  E8 01B0		      C 			call	I_Play_KeyOff_Emb		;
			      C 		.else
 0BFC  EB 0A		   *	    jmp    @C007F
 0BFE			   *@C007D:
			      C 			.if	(ds:[di].WTD_Channel&80h)	;MIDIパートの場合は操作しない。
 0BFE  F6 45 05 80	   *	    test   ds : [di] . WTD_Channel, 080h
 0C02  74 04		   *	    je     @C0080
 0C04  C6 45 51 00	      C 				mov	ds:[di].WTD_ExprEmbLevelSet,000h
			      C 			.endif
			      C 		.endif
 0C08			   *@C0080:
			      C 
			      C 		;音程Emb
			      C 		.if	(ds:[di].WTD_FlagControl&WTD_Ctrl_BendEmb)
 0C08			   *@C007F:
 0C08  F7 05 0002	   *	    test   ds : [di] . WTD_FlagControl, WTD_Ctrl_BendEmb
 0C0C  74 09		   *	    je     @C0082
 0C0E  B9 0080		      C 			mov	cx,WTD_Ctrl_EmbFreq		;
 0C11  BA 0039		      C 			mov	dx,WTD_BendEmb			;
 0C14  E8 0195		      C 			call	I_Play_KeyOff_Emb		;
			      C 		.endif
			      C 
			      C 		;パンEmb
			      C 		.if	(ds:[di].WTD_FlagControl&WTD_Ctrl_PanEmb)
 0C17			   *@C0082:
 0C17  F7 05 0020	   *	    test   ds : [di] . WTD_FlagControl, WTD_Ctrl_PanEmb
 0C1B  74 09		   *	    je     @C0084
 0C1D  B9 0200		      C 			mov	cx,WTD_Ctrl_EmbPan		;
 0C20  BA 006D		      C 			mov	dx,WTD_PanEmb			;
 0C23  E8 0186		      C 			call	I_Play_KeyOff_Emb		;
			      C 		.endif
			      C 
			      C 	.endif
 0C26			   *@C0084:
 0C26			   *@C0079:
			      C 	ret				;
 0C26  59		   *	    pop    cx
 0C27  58		   *	    pop    ax
 0C28  C3		   *	    ret    00000h
 0C29			      C I_Play_KeyOff	endp
			      C ;****************************************************************
			      C ;*								*
			      C ;*			割り込みルーチン			*
			      C ;*				演奏・効果音制御部		*
			      C ;*				音程・音量制御			*
			      C ;****************************************************************
			      C ;*	●引数							*
			      C ;*		ds:bp	ワークベースアドレス	引数		*
			      C ;*		ds:bx	共有構造体アドレス	引数		*
			      C ;*		ds:di	個別構造体		引数		*
			      C ;*		es:si	演奏アドレス		引数		*
			      C ;*	●レジスタ使用						*
			      C ;*		ax	汎用(主に計算)		破壊ok		*
			      C ;*		cx	汎用			破壊ok		*
			      C ;*		dx	汎用			破壊ok		*
			      C ;****************************************************************
			      C ;===============================================================|
			      C ;			音程制御 (Detune,LFO,Emb合成)		|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 0C2A			      C I_Play_Frection	proc	near		;
			      C 
			      C ifndef	hyoka	;--------------------------------廉価版は無し
			      C 	;モジュレーション制御(MIDI)
 0C2A  8B 45 14		      C 	mov	ax,ds:[di].WTD_Leng		;モジュレーション
 0C2D  2B 45 16		      C 	sub	ax,ds:[di].WTD_LengCounter	;
			      C 	.if	(ax==ds:[di].WTD_ModDecay)
 0C30  3B 45 5B		   *	    cmp    ax, ds : [di] . WTD_ModDecay
 0C33  75 0E		   *	    jne    @C0086
 0C35  8A 45 5D		      C 	  mov	al,ds:[di].WTD_ModLevel		;
 0C38  88 45 5E		      C 	  mov	ds:[di].WTD_ModLevelSet,al	;
 0C3B  B1 01		      C 	  mov	cl,MIDI_Ctrl_Mod		;
 0C3D  BA 1760 R	      C 	  mov	dx,offset CGROUP:I_Table_CtrlChgB
 0C40  E8 0965		      C 	  call	I_Table_Jump			;モジュレーションをかける。
			      C 	.endif
 0C43			   *@C0086:
			      C endif	;----------------------------------------
			      C 
			      C 
			      C 	;音程読み込み
 0C43  8B 45 2C		      C 	mov	ax,ds:[di].WTD_Bend	;
			      C 
			      C 	;ディチューンの加算
 0C46  03 45 2E		      C 	add	ax,ds:[di].WTD_BendDetune
			      C 
			      C 	;音程LFO処理
			      C 	.if	(ds:[di].WTD_FlagControl & WTD_Ctrl_BendLFO)
 0C49  F7 05 0001	   *	    test   ds : [di] . WTD_FlagControl, WTD_Ctrl_BendLfo
 0C4D  74 08		   *	    je     @C0088
 0C4F  BA 0030		      C 		mov	dx,WTD_BendLFO		;
 0C52  E8 0205		      C 		call	I_Play_LFO		;
 0C55  03 C2		      C 		add	ax,dx			;
			      C 	.endif
 0C57			   *@C0088:
			      C 
			      C 	;音量Emb処理
			      C 	.if	(ds:[di].WTD_FlagControl & WTD_Ctrl_BendEmb)
 0C57  F7 05 0002	   *	    test   ds : [di] . WTD_FlagControl, WTD_Ctrl_BendEmb
 0C5B  74 15		   *	    je     @C008A
 0C5D  B9 0080		      C 		mov	cx,WTD_Ctrl_EmbFreq	;
 0C60  BA 0039		      C 		mov	dx,WTD_BendEmb		;
 0C63  E8 017A		      C 		call	I_Play_Emb		;
 0C66  80 EA 80		      C 		sub	dl,80h			
			      C 		.if	(carry?)
 0C69  73 02		   *	    jae    @C008C
 0C6B  B6 FF		      C 		  mov	dh,0ffh			;dx←dl(符号付)
			      C 		.endif
 0C6D			   *@C008C:
 0C6D  C1 E2 06		      C 		shl	dx,6			;×2^6
 0C70  03 C2		      C 		add	ax,dx			;加算
			      C 	.endif
 0C72			   *@C008A:
			      C 
			      C 	;音程の出力
 0C72  BA 16EC R	      C 	mov	dx,offset CGROUP:I_Table_Frection
 0C75  E8 0930		      C 	call	I_Table_Jump		;音程セット
			      C 
 0C78  C3		      C 	ret				;
 0C79			      C I_Play_Frection	endp
			      C ;===============================================================|
			      C ;			音量制御 (Detune,LFO,Emb合成)		|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 0C7A			      C I_Play_Volume	proc	near		;
			      C 
			      C 	;音量読み込み＆14bitに変換
 0C7A  33 C0		      C 	xor	ax,ax			;
 0C7C  8A 45 41		      C 	mov	al,ds:[di].WTD_Expr	;
 0C7F  40		      C 	inc	ax			;
 0C80  C1 E0 07		      C 	shl	ax,7			;128倍にする。
 0C83  48		      C 	dec	ax			;（Range:0〜16383）
			      C 
			      C 	;ディチューンの加算
 0C84  03 45 42		      C 	add	ax,ds:[di].WTD_ExprDetune
			      C 
			      C 	;音量LFO処理
			      C 	.if	(ds:[di].WTD_FlagControl & WTD_Ctrl_ExprLFO)
 0C87  F7 05 0004	   *	    test   ds : [di] . WTD_FlagControl, WTD_Ctrl_ExprLfo
 0C8B  74 08		   *	    je     @C008E
 0C8D  BA 0044		      C 		mov	dx,WTD_ExprLFO		;
 0C90  E8 01C7		      C 		call	I_Play_LFO		;
 0C93  03 C2		      C 		add	ax,dx			;
			      C 	.endif
 0C95			   *@C008E:
			      C 
			      C 	;音量Emb処理
			      C 	.if	(ds:[di].WTD_FlagControl & WTD_Ctrl_ExprEmb)
 0C95  F7 05 0008	   *	    test   ds : [di] . WTD_FlagControl, WTD_Ctrl_ExprEmb
 0C99  74 09		   *	    je     @C0090
 0C9B  B9 0100		      C 		mov	cx,WTD_Ctrl_EmbVol	;
 0C9E  BA 004D		      C 		mov	dx,WTD_ExprEmb		;
 0CA1  E8 013C		      C 		call	I_Play_Emb		;
			      C ;		mov	ds:[di].WTD_ExprEmbLevelSet,dl	;エンベロープ値
			      C 	.endif
 0CA4			   *@C0090:
			      C 
			      C 	;音量を、7bitに補正
 0CA4  40		      C 	inc	ax			;
 0CA5  C1 E8 07		      C 	shr	ax,7			;ax←{(ax+1)÷128}-1
 0CA8  48		      C 	dec	ax			;（Range:0〜127）
			      C 	.if	(ah==0)
 0CA9  0A E4		   *	    or	ah, ah
 0CAB  75 09		   *	    jne    @C0092
			      C 		.if	(al>=80h)
 0CAD  3C 80		   *	    cmp    al, 080h
 0CAF  72 07		   *	    jb     @C0094
 0CB1  B8 007F		      C 		  mov	ax,07fh		;if (128=>ax>255){ax = 0x7F;};
			      C 		.endif
			      C 	.else
 0CB4  EB 02		   *	    jmp    @C0096
 0CB6			   *@C0092:
 0CB6  33 C0		      C 		xor	ax,ax		;ax = 0x00;
			      C 	.endif
 0CB8			   *@C0096:
 0CB8			   *@C0094:
			      C 
			      C 	;エンベロープ音量の合成
 0CB8  33 C9		      C 	xor	cx,cx			;
 0CBA  8A C8		      C 	mov	cl,al			;
 0CBC  41		      C 	inc	cx				;cx←音量+1
 0CBD  33 C0		      C 	xor	ax,ax				;ax←0
 0CBF  8A 45 51		      C 	mov	al,ds:[di].WTD_ExprEmbLevelSet	;ax←音量
 0CC2  40		      C 	inc	ax				;ax←ソフト音量+1
 0CC3  F7 E1		      C 	mul	cx			;
 0CC5  48		      C 	dec	ax			;
 0CC6  D1 E0		      C 	shl	ax,1			;al←((Vol.+1)×(SoftVol.+1)-1)／128
 0CC8  8A C4		      C 	mov	al,ah			;(Range:0〜255)
			      C 
			      C 	;ソフトウェア音量の合成
 0CCA  33 C9		      C 	xor	cx,cx			;
 0CCC  8A C8		      C 	mov	cl,al			;
 0CCE  41		      C 	inc	cx			;cx←音量+1
 0CCF  33 C0		      C 	xor	ax,ax			;ax←0
			      C 	.if	(ds:[di].WTD_FlagControl & WTD_Ctrl_Effect)
 0CD1  F7 05 4000	   *	    test   ds : [di] . WTD_FlagControl, WTD_Ctrl_Effect
 0CD5  74 05		   *	    je     @C0097
 0CD7  8A 47 22		      C 	  mov	al,ds:[bx].WTD_Sys_VolumeEffect	;ax←効果音音量
			      C 	.else
 0CDA  EB 03		   *	    jmp    @C0099
 0CDC			   *@C0097:
 0CDC  8A 47 21		      C 	  mov	al,ds:[bx].WTD_Sys_VolumeMusic	;ax←音楽音量
			      C 	.endif
 0CDF			   *@C0099:
			      C 
			      C 
			      C ;	mov	bx,offset CGROUP:I_Volume_Table	;log演算
			      C ;	xlat
			      C ;	xor	ah,ah
 0CDF  8B F0		      C 	mov	si,ax			;
 0CE1  81 E6 00FF	      C 	and	si,00ffh		;
 0CE5  2E: 8A 84 086A R	      C 	mov	al,byte ptr cs:[CGROUP:I_Volume_Table + si]
			      C 
 0CEA  40		      C 	inc	ax			;ax←ソフト音量+1
 0CEB  F7 E1		      C 	mul	cx			;
 0CED  48		      C 	dec	ax			;al←((2*Vol.+1)×(SoftVol.+1)／256)-1
 0CEE  8A C4		      C 	mov	al,ah			;(Range:0〜255)
 0CF0  D0 E8		      C 	shr	al,1			;al÷2 (Range:0〜127)
			      C 
			      C 	;音量の出力
 0CF2  BA 165A R	      C 	mov	dx,offset CGROUP:I_Table_Volume
 0CF5  E8 08B0		      C 	call	I_Table_Jump		;音量セット
			      C 
 0CF8  C3		      C 	ret				;
 0CF9			      C I_Play_Volume	endp
			      C ;===============================================================|
			      C ;			パンポット制御 (LFO,Emb合成)		|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 0CFA			      C I_Play_Pan	proc	near		;
			      C 
			      C 	;パンポット読み込み
 0CFA  8A 45 61		      C 	mov	al,ds:[di].WTD_Pan	;
 0CFD  83 E0 7F		      C 	and	ax,0007fh		;
			      C 
			      C 	;ソフトウェア処理がなかったら飛ばす。
			      C       .if	(ds:[di].WTD_FlagControl & (WTD_Ctrl_PanLFO + WTD_Ctrl_PanEmb))
 0D00  F7 05 0030	   *	    test   ds : [di] . WTD_FlagControl, WTD_Ctrl_PanLfo + WTD_Ctrl_PanEmb
 0D04  74 42		   *	    je     @C009A
			      C 
			      C 	;128倍にする。
 0D06  40		      C 	inc	ax			;
 0D07  C1 E0 07		      C 	shl	ax,7			;
 0D0A  48		      C 	dec	ax			;（Range:0〜16383）
			      C 
			      C 	;パンポットLFO処理
			      C 	.if	(ds:[di].WTD_FlagControl & WTD_Ctrl_PanLFO)
 0D0B  F7 05 0010	   *	    test   ds : [di] . WTD_FlagControl, WTD_Ctrl_PanLfo
 0D0F  74 08		   *	    je     @C009C
 0D11  BA 0064		      C 		mov	dx,WTD_PanLFO		;
 0D14  E8 0143		      C 		call	I_Play_LFO		;
 0D17  03 C2		      C 		add	ax,dx			;
			      C 	.endif
			      C 
			      C 	;パンポットEmb処理
			      C 	.if	(ds:[di].WTD_FlagControl & WTD_Ctrl_PanEmb)
 0D19			   *@C009C:
 0D19  F7 05 0020	   *	    test   ds : [di] . WTD_FlagControl, WTD_Ctrl_PanEmb
 0D1D  74 15		   *	    je     @C009E
 0D1F  B9 0200		      C 		mov	cx,WTD_Ctrl_EmbPan	;
 0D22  BA 006D		      C 		mov	dx,WTD_PanEmb		;
 0D25  E8 00B8		      C 		call	I_Play_Emb		;
 0D28  80 EA 80		      C 		sub	dl,80h			;
			      C 		.if	(carry?)
 0D2B  73 02		   *	    jae    @C00A0
 0D2D  B6 FF		      C 		  mov	dh,0ffh			;dx←dl(符号付)
			      C 		.endif
 0D2F			   *@C00A0:
 0D2F  C1 E2 06		      C 		shl	dx,6			;×2^6
 0D32  03 C2		      C 		add	ax,dx			;加算
			      C 	.endif
			      C 
			      C 	;パンポットを、7bitに補正
 0D34			   *@C009E:
 0D34  40		      C 	inc	ax			;
 0D35  C1 E8 07		      C 	shr	ax,7			;ax←{(ax+1)÷128}-1
 0D38  48		      C 	dec	ax			;（Range:0〜127）
			      C 
			      C 	.if	(ah==0)
 0D39  0A E4		   *	    or	ah, ah
 0D3B  75 09		   *	    jne    @C00A2
			      C 		.if	(al>=80h)
 0D3D  3C 80		   *	    cmp    al, 080h
 0D3F  72 07		   *	    jb     @C00A4
 0D41  B8 007F		      C 		  mov	ax,07fh		;if (128=>ax>255){ax = 0x7F;};
			      C 		.endif
			      C 	.else
 0D44  EB 02		   *	    jmp    @C00A6
 0D46			   *@C00A2:
 0D46  33 C0		      C 		xor	ax,ax		;ax = 0x00;
			      C 	.endif
			      C 
			      C       .endif
 0D48			   *@C00A6:
 0D48			   *@C00A4:
 0D48			   *@C009A:
			      C 
			      C 	;パンポットの出力
			      C 	.if	(ds:[di].WTD_PanSet!=al)
 0D48  38 45 60		   *	    cmp    ds : [di] . WTD_PanSet, al
 0D4B  74 0B		   *	    je     @C00A7
 0D4D  88 45 60		      C 	  mov	ds:[di].WTD_PanSet,al	;書き込み
			      C ifndef	hyoka	;------------------------廉価版は無し
 0D50  B1 0A		      C 	  mov	cl,MIDI_Ctrl_Pan	;
 0D52  BA 1760 R	      C 	  mov	dx,offset CGROUP:I_Table_CtrlChgB
 0D55  E8 0850		      C 	  call	I_Table_Jump		;パンポットセット
			      C endif	;--------------------------------
			      C 	.endif
 0D58			   *@C00A7:
			      C 
 0D58  C3		      C 	ret				;
 0D59			      C I_Play_Pan	endp
			      C ;****************************************************************
			      C ;*								*
			      C ;*			割り込みルーチン			*
			      C ;*				演奏・効果音制御部		*
			      C ;*				音程・音量LFO,Emb制御		*
			      C ;*				音程、音量で同一のルーチン	*
			      C ;*								*
			      C ;****************************************************************
			      C ;*	●引数							*
			      C ;*		ds:bp	ワークベースアドレス	引数		*
			      C ;*		ds:bx	共有構造体アドレス	引数		*
			      C ;*		ds:di	個別構造体		引数		*
			      C ;*		es:si	演奏アドレス		引数		*
			      C ;*		dx	ワークアドレス先頭	返り値になる	*
			      C ;*		cx	制御Flag		破壊ok		*
			      C ;*	●レジスタ使用						*
			      C ;*		ax	汎用(主に計算)		破壊NG		*
			      C ;*	●返り値						*
			      C ;*		dx	変位(レベル)				*
			      C ;****************************************************************
			      C ;===============================================================|
			      C ;			LFO処理	KeyOn				|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 0D5A			      C I_Play_KeyOn_LFO	proc	near	uses	ax di
			      C 
			      C ;	mov	bp,dx					;
 0D5A  50		   *	    push   ax
 0D5B  57		   *	    push   di
 0D5C  03 FA		      C 	add	di,dx
			      C 
			      C 	;カウンター(Rate)の初期化
 0D5E  8A 25		      C 	mov	ah,ds:[di].WTD_ChLfo_DecayRate		;DR
 0D60  02 65 01		      C 	add	ah,ds:[di].WTD_ChLfo_SpeedRate		;SR
 0D63  88 65 05		      C 	mov	ds:[di].WTD_ChLfo_RateCounter,ah	;
			      C 
			      C 	;カウンター(Count)の初期化
 0D66  8A 65 04		      C 	mov	ah,ds:[di].WTD_ChLfo_Count		;
 0D69  D0 EC		      C 	shr	ah,1					;ah = ah / 2	←ミスだけど
			      C ;	.if	(ah==1)
			      C ;	  xor	ah,ah					;互換性の為、これを入れる。
			      C ;	.endif
 0D6B  88 65 08		      C 	mov	ds:[di].WTD_ChLfo_CountCounter,ah	;
			      C 
			      C 	;レベルの初期化
 0D6E  33 C0		      C 	xor	ax,ax					;
 0D70  89 45 06		      C 	mov	ds:[di].WTD_ChLfo_LevelSet,ax		;
			      C 
			      C 	ret						;
 0D73  5F		   *	    pop    di
 0D74  58		   *	    pop    ax
 0D75  C3		   *	    ret    00000h
 0D76			      C I_Play_KeyOn_LFO	endp
			      C ;===============================================================|
			      C ;			Emb処理	KeyOn				|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 0D76			      C I_Play_KeyOn_Emb	proc	near	uses	ax di si
			      C 
 0D76  50		   *	    push   ax
 0D77  57		   *	    push   di
 0D78  56		   *	    push   si
 0D79  8D 35		      C 	lea	si,[di]
 0D7B  03 FA		      C 	add	di,dx
			      C 
 0D7D  33 C0		      C 	xor	ax,ax
 0D7F  8A 05		      C 	mov	al,ds:[di].WTD_ChEmb_Address	;
 0D81  24 F0		      C 	and	al,0f0h				;
 0D83  88 05		      C 	mov	ds:[di].WTD_ChEmb_Address,al	;位置初期化
			      C 	.if	(ds:[si].WTD_FlagControl & cx)
 0D85  85 0C		   *	    test   ds : [si] . WTD_FlagControl, cx
 0D87  74 02		   *	    je     @C00A9
 0D89  B4 01		      C 	  mov	ah,01h				;
			      C 	.endif
 0D8B			   *@C00A9:
			      C 
 0D8B  8D B6 0200	      C 	lea	si,[bp + WTD_WorkAdd_Emb]	;エンベロープアドレス
 0D8F  03 F0		      C 	add	si,ax				;データアドレス
 0D91  AD		      C 	lodsw					;
 0D92  8B 14		      C 	mov	dx,ds:[si]			;
			      C 
 0D94  88 45 01		      C 	mov	ds:[di].WTD_ChEmb_Rate,al	;
			      C 	.if	(ah&80h)
 0D97  F6 C4 80		   *	    test   ah, 080h
 0D9A  74 02		   *	    je     @C00AB
 0D9C  F6 DC		      C 	  neg	ah				;
			      C 	.endif
 0D9E			   *@C00AB:
 0D9E  88 65 02		      C 	mov	ds:[di].WTD_ChEmb_Counter,ah	;
 0DA1  88 55 03		      C 	mov	ds:[di].WTD_ChEmb_MaxMin,dl	;
 0DA4  88 75 04		      C 	mov	ds:[di].WTD_ChEmb_LevelSet,dh	;
			      C 
			      C 	ret					;
 0DA7  5E		   *	    pop    si
 0DA8  5F		   *	    pop    di
 0DA9  58		   *	    pop    ax
 0DAA  C3		   *	    ret    00000h
 0DAB			      C I_Play_KeyOn_Emb	endp
			      C ;===============================================================|
			      C ;			Emb処理	KeyOff				|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 0DAC			      C I_Play_KeyOff_Emb	proc	near	uses ax di si
			      C 
 0DAC  50		   *	    push   ax
 0DAD  57		   *	    push   di
 0DAE  56		   *	    push   si
 0DAF  8D 35		      C 	lea	si,[di]
 0DB1  03 FA		      C 	add	di,dx
			      C 
 0DB3  33 C0		      C 	xor	ax,ax
 0DB5  8A 05		      C 	mov	al,ds:[di].WTD_ChEmb_Address	;
 0DB7  24 F0		      C 	and	al,0f0h				;
 0DB9  0C 0C		      C 	or	al,00cH				;
 0DBB  88 05		      C 	mov	ds:[di].WTD_ChEmb_Address,al	;位置初期化
			      C 	.if	(ds:[si].WTD_FlagControl & cx)
 0DBD  85 0C		   *	    test   ds : [si] . WTD_FlagControl, cx
 0DBF  74 02		   *	    je     @C00AD
 0DC1  B4 01		      C 	  mov	ah,01h				;
			      C 	.endif
 0DC3			   *@C00AD:
			      C 
 0DC3  8D B6 0200	      C 	lea	si,[bp + WTD_WorkAdd_Emb]	;エンベロープアドレス
 0DC7  03 F0		      C 	add	si,ax				;データアドレス
 0DC9  AD		      C 	lodsw					;
 0DCA  8B 14		      C 	mov	dx,ds:[si]			;
			      C 
 0DCC  88 45 01		      C 	mov	ds:[di].WTD_ChEmb_Rate,al	;
			      C 	.if	(ah&80h)
 0DCF  F6 C4 80		   *	    test   ah, 080h
 0DD2  74 02		   *	    je     @C00AF
 0DD4  F6 DC		      C 	  neg	ah				;
			      C 	.endif
 0DD6			   *@C00AF:
 0DD6  88 65 02		      C 	mov	ds:[di].WTD_ChEmb_Counter,ah	;
 0DD9  88 55 03		      C 	mov	ds:[di].WTD_ChEmb_MaxMin,dl	;
			      C 
			      C 	ret					;
 0DDC  5E		   *	    pop    si
 0DDD  5F		   *	    pop    di
 0DDE  58		   *	    pop    ax
 0DDF  C3		   *	    ret    00000h
 0DE0			      C I_Play_KeyOff_Emb	endp
			      C ;===============================================================|
			      C ;			Emb処理	メイン				|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 0DE0			      C I_Play_Emb	proc	near	uses	ax di si
			      C 
 0DE0  50		   *	    push   ax
 0DE1  57		   *	    push   di
 0DE2  56		   *	    push   si
 0DE3  8D 35		      C 	lea	si,[di]
 0DE5  03 FA		      C 	add	di,dx
			      C 
			      C 	;●Speed処理
 0DE7  FE 4D 02		      C 	dec	ds:[di].WTD_ChEmb_Counter
			      C 	.if	(zero?)
 0DEA  75 65		   *	    jne    @C00B1
			      C 
			      C 		;●アドレスの設定
 0DEC  33 C0		      C 		xor	ax,ax
 0DEE  8A 05		      C 		mov	al,ds:[di].WTD_ChEmb_Address
			      C 		.if	(ds:[si].WTD_FlagControl & cx)
 0DF0  85 0C		   *	    test   ds : [si] . WTD_FlagControl, cx
 0DF2  74 02		   *	    je     @C00B3
 0DF4  B4 01		      C 			mov	ah,01h			;ax←Address
			      C 		.endif
 0DF6			   *@C00B3:
 0DF6  8D B6 0200	      C 		lea	si,[bp + WTD_WorkAdd_Emb]	;エンベロープアドレス
 0DFA  03 F0		      C 		add	si,ax				;si←データアドレス
			      C 
			      C 		;●Count再設定
 0DFC  8A 64 01		      C 		mov	ah,ds:[si].WTD_Emb_AS		;
			      C 		.if	(ah & 80h)
 0DFF  F6 C4 80		   *	    test   ah, 080h
 0E02  74 02		   *	    je     @C00B5
 0E04  F6 DC		      C 			neg	ah			;
			      C 		.endif
 0E06			   *@C00B5:
 0E06  88 65 02		      C 		mov	ds:[di].WTD_ChEmb_Counter,ah	;
			      C 
			      C 		;●Rate ＆ Level処理
 0E09  8A 45 04		      C 		mov	al,ds:[di].WTD_ChEmb_LevelSet
			      C 		.if	(ds:[si].WTD_Emb_AS & 80h)	;比較(正 or 負)
 0E0C  F6 44 01 80	   *	    test   ds : [si] . WTD_Emb_AS, 080h
 0E10  74 0B		   *	    je     @C00B7
 0E12  2A 04		      C 		  sub	al,ds:[si].WTD_Emb_AR		;負
 0E14  72 10		      C 		  jc	I_Play_Emb_Step3		;
 0E16  3A 44 02		      C 		  cmp	al,ds:[si].WTD_Emb_AL		;最小値チェック
 0E19  73 33		      C 		  jnc	I_Play_Emb_StepEnd		;
			      C 		.else
 0E1B  EB 09		   *	    jmp    @C00B9
 0E1D			   *@C00B7:
 0E1D  02 04		      C 		  add	al,ds:[si].WTD_Emb_AR		;正
 0E1F  72 05		      C 		  jc	I_Play_Emb_Step3		;
 0E21  3A 44 02		      C 		  cmp	al,ds:[si].WTD_Emb_AL		;最大値チェック
 0E24  72 28		      C 		  jc	I_Play_Emb_StepEnd		;
			      C 		.endif
			      C 
			      C 		;●最大値を超えた場合
 0E26			      C I_Play_Emb_Step3:					;
 0E26			   *@C00B9:
 0E26  8A 44 02		      C 		mov	al,ds:[si].WTD_Emb_AL		;
 0E29  8A 25		      C 		mov	ah,ds:[di].WTD_ChEmb_Address	;
 0E2B  80 E4 0F		      C 		and	ah,0fh				;
			      C 
			      C 		.if	(ah<08h)
 0E2E  80 FC 08		   *	    cmp    ah, 008h
 0E31  73 1B		   *	    jae    @C00BA
 0E33  50		      C 		  push	ax				;
 0E34  80 05 04		      C 		  add	ds:[di].WTD_ChEmb_Address,04h	;
 0E37  83 C6 04		      C 		  add	si,4				;アドレスの設定
 0E3A  AD		      C 		  lodsw					;
 0E3B  8B 14		      C 		  mov	dx,ds:[si]			;
 0E3D  88 45 01		      C 		  mov	ds:[di].WTD_ChEmb_Rate,al	;
			      C 		  .if	(ah&80h)
 0E40  F6 C4 80		   *	    test   ah, 080h
 0E43  74 02		   *	    je     @C00BC
 0E45  F6 DC		      C 			neg	ah			;
			      C 		  .endif
 0E47			   *@C00BC:
 0E47  88 65 02		      C 		  mov	ds:[di].WTD_ChEmb_Counter,ah	;
 0E4A  88 55 03		      C 		  mov	ds:[di].WTD_ChEmb_MaxMin,dl	;
 0E4D  58		      C 		  pop	ax				;
			      C 		.endif
 0E4E			      C I_Play_Emb_StepEnd:					;
			      C 
 0E4E			   *@C00BA:
 0E4E  88 45 04		      C 		mov	ds:[di].WTD_ChEmb_LevelSet,al	
			      C 
			      C 	.endif
 0E51			   *@C00B1:
			      C 
 0E51  33 D2		      C 	xor	dx,dx				;
 0E53  8A 55 04		      C 	mov	dl,ds:[di].WTD_ChEmb_LevelSet	;
			      C 
			      C 	ret					;
 0E56  5E		   *	    pop    si
 0E57  5F		   *	    pop    di
 0E58  58		   *	    pop    ax
 0E59  C3		   *	    ret    00000h
 0E5A			      C I_Play_Emb	endp
			      C ;===============================================================|
			      C ;			LFO処理	メイン				|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 0E5A			      C I_Play_LFO	proc	near	uses	ax di
			      C 
 0E5A  50		   *	    push   ax
 0E5B  57		   *	    push   di
 0E5C  03 FA		      C 	add	di,dx
			      C 
			      C 	;Rate処理
 0E5E  FE 4D 05		      C 	dec	ds:[di].WTD_ChLfo_RateCounter		;
			      C 	.if	(zero?)
 0E61  75 29		   *	    jne    @C00BE
 0E63  8A 45 01		      C 		mov	al,ds:[di].WTD_ChLfo_SpeedRate		;
 0E66  88 45 05		      C 		mov	ds:[di].WTD_ChLfo_RateCounter,al	;
			      C 
			      C 		;Level処理(dx←Level)
 0E69  8B 55 06		      C 		mov	dx,ds:[di].WTD_ChLfo_LevelSet		;dx←Level
 0E6C  8A 45 08		      C 		mov	al,ds:[di].WTD_ChLfo_CountCounter	;
			      C 	;	shr	al,1	;※
			      C 		.if	(al>ds:[di].WTD_ChLfo_Count)		;加減算の分岐
 0E6F  3A 45 04		   *	    cmp    al, ds : [di] . WTD_ChLfo_Count
 0E72  76 05		   *	    jbe    @C00C0
 0E74  2B 55 02		      C 		  sub	dx,ds:[di].WTD_ChLfo_Level		;減算
			      C 		.else
 0E77  EB 03		   *	    jmp    @C00C2
 0E79			   *@C00C0:
 0E79  03 55 02		      C 		  add	dx,ds:[di].WTD_ChLfo_Level		;加算
			      C 		.endif
 0E7C			   *@C00C2:
 0E7C  89 55 06		      C 		mov	ds:[di].WTD_ChLfo_LevelSet,dx		;保存
			      C 
			      C 		;Count処理
 0E7F  FE 4D 08		      C 		dec	ds:[di].WTD_ChLfo_CountCounter		;
			      C 		.if	(zero?)
 0E82  75 08		   *	    jne    @C00C3
 0E84  8A 45 04		      C 		  mov	al,ds:[di].WTD_ChLfo_Count		;カウンター初期化
 0E87  D0 E0		      C 		  shl	al,1					;al = al × 2	（何故？）
 0E89  88 45 08		      C 		  mov	ds:[di].WTD_ChLfo_CountCounter,al	;
			      C 		.endif
			      C 	.endif
 0E8C			   *@C00C3:
 0E8C			   *@C00BE:
			      C 
 0E8C  8B 55 06		      C 	mov	dx,DS:[di].WTD_ChLfo_LevelSet		;dx←LFOのレベル
			      C 
			      C 	ret					;
 0E8F  5F		   *	    pop    di
 0E90  58		   *	    pop    ax
 0E91  C3		   *	    ret    00000h
 0E92			      C I_Play_LFO	endp
			      C ;****************************************************************
			      C ;*								*
			      C ;*			効果音終了時の設定復帰			*
			      C ;*								*
			      C ;****************************************************************
			      C ;*	●引数							*
			      C ;*		ch	チャンネル				*
			      C ;*		ds:bx	System Sturuc				*
			      C ;*		ds:di	Part Sturuc				*
			      C ;****************************************************************
			      C 	even				;偶数アドレス配置
 0E92			      C I_Effect_Return:				;
 0E92  60		      C 	pusha					;レジスタ保存
			      C ;---------------------------------------------------------------
			      C ;フラグのリセット
 0E93  8A CD		      C 	mov	cl,ch				;
 0E95  80 E1 07		      C 	and	cl,07h				;
 0E98  FE C1		      C 	inc	cl				;
 0E9A  B8 F7FF		      C 	mov	ax,0f7ffh			;
 0E9D  D3 C0		      C 	rol	ax,cl				;
 0E9F  21 07		      C 	and	ds:[bx].WTD_Sys_Flag,ax		;
			      C ;---------------------------------------------------------------
			      C ;Channel Modeの復帰
 0EA1  8B 07		      C 	mov	ax,ds:[bx].WTD_Sys_Flag		;ah←Channel Mode Flag
 0EA3  80 E4 0F		      C 	and	ah,0fh				;ah←その他のFlagをMask
 0EA6  C0 E4 04		      C 	shl	ah,4				;
 0EA9  86 E0		      C 	xchg	ah,al				;
 0EAB  B4 08		      C 	mov	ah,08h				;ah←08h
 0EAD  8A CD		      C 	mov	cl,ch				;
 0EAF  80 E1 07		      C 	and	cl,07h				;上位5bitマスク
 0EB2  FE C1		      C 	inc	cl				;
 0EB4  D2 E4		      C 	shl	ah,cl				;ah = ah*2^cl (SetBit)
 0EB6  E8 0A29		      C 	call	SP_Set_Channel			;
			      C 
			      C ;---------------------------------------------------------------
			      C ;パート個別
			      C 
			      C ;パート検索
 0EB9  B1 14		      C 	mov	cl,MusicMaxPart			;20回ループ
			      C ;	mov	di,bp				;
			      C ;	add	di,WTD_WorkAdd_Ch0		;di←構造体アドレス
 0EBB  8D BE 0600	      C 	lea	di,[bp + WTD_WorkAdd_Ch0]	;
 0EBF			      C I_Effect_Return_Loop0:				;
 0EBF  38 6D 05		      C 	cmp	byte ptr ds:[di].WTD_Channel,ch	;
 0EC2  74 0A		      C 	jz	I_Effect_Return_Step0		;
 0EC4  81 C7 0080	      C 	add	di,WTD_WorkChSize		;構造体のサイズは80h(0x80)
 0EC8  FE C9		      C 	dec	cl				;
 0ECA  75 F3		      C 	jnz	I_Effect_Return_Loop0		;
 0ECC  EB 41		      C 	jmp	I_Effect_Return_End		;音源は使われていない。
 0ECE			      C I_Effect_Return_Step0:
			      C 
			      C ;復帰
 0ECE  80 E5 03		      C 	and	ch,03h				;チャンネル情報だけにする。
			      C ;周波数
 0ED1  8B 45 2A		      C 	mov	ax,ds:[di].WTD_FrectionSet	;周波数の復帰
 0ED4  E8 0979		      C 	call	SP_Set_Frection			;
			      C ;音量
 0ED7  8A 45 3F		      C 	mov	al,ds:[di].WTD_ExprPanSet	;音量の復帰
 0EDA  E8 099B		      C 	call	SP_Set_Volume			;
			      C ;音色
 0EDD  56		      C 	push	si				;音色の復帰
			      C ;	mov	si,bp				;
			      C ;	add	si,WTD_WorkAdd_Wave		;
 0EDE  8D B6 0100	      C 	lea	si,[bp + WTD_WorkAdd_Wave]	;
 0EE2  33 C0		      C 	xor	ax,ax				;
 0EE4  8A 45 11		      C 	mov	al,ds:[di].WTD_Voice		;
 0EE7  C1 E0 04		      C 	shl	ax,4				;
 0EEA  03 F0		      C 	add	si,ax				;ds:si←音色のあるアドレス
 0EEC  E8 0A13		      C 	call	SP_Set_Voice			;
 0EEF  5E		      C 	pop	si				;
			      C ;スウィープ値(ch=02h)
 0EF0  80 FD 02		      C 	cmp	ch,2				;スウィープ値の復帰
 0EF3  75 09		      C 	jnz	I_Effect_Return_Step2		;
 0EF5  8A 45 12		      C 	mov	al,ds:[di].WTD_SweepLevel	;
 0EF8  8A 65 13		      C 	mov	ah,ds:[di].WTD_SweepTime	;
 0EFB  E8 09A2		      C 	call	SP_Set_Sweep			;
 0EFE			      C I_Effect_Return_Step2:				;
			      C ;ノイズモード(ch=03h)
 0EFE  80 FD 03		      C 	cmp	ch,3				;ノイズモードの復帰
 0F01  75 0C		      C 	jnz	I_Effect_Return_Step3		;
 0F03  B4 1F		      C 	mov	ah,01fh				;
 0F05  8A 45 12		      C 	mov	al,ds:[di].WTD_NoiseMode	;
 0F08  0C 18		      C 	or	al,018h				;
 0F0A  22 C4		      C 	and	al,ah				;
 0F0C  E8 09B3		      C 	call	SP_Set_Noise			;
 0F0F			      C I_Effect_Return_Step3:				;
			      C 
			      C ;---------------------------------------------------------------
 0F0F			      C I_Effect_Return_End:
 0F0F  61		      C 	popa					;レジスタ復帰
 0F10  C3		      C 	ret					;
			      C 
				include	wtd_icmd.asm			;割り込み　コマンド解釈部
			      C ;=======================================================================|
			      C ;									|
			      C ;		Wander Swan Total Sound Driver				|
			      C ;				Interrupt command program		|
			      C ;									|
			      C ;					Programmed by			|
			      C ;						A.Watanabe		|
			      C ;									|
			      C ;=======================================================================|
			      C ;****************************************************************
			      C ;*								*
			      C ;*			割り込みルーチン			*
			      C ;*				データ読み込み			*
			      C ;*								*
			      C ;****************************************************************
			      C ;===============================================================|
			      C ;		Command Read					|
			      C ;===============================================================|
			      C ;	●処理							|
			      C ;		　データの読み込み				|
			      C ;		　ワークフラグが立っていた場合は、ワークから	|
			      C ;	●引数							|
			      C ;		es:si	演奏中のアドレス			|
			      C ;	●返値							|
			      C ;		es:si	次の引数又はコマンドのアドレス		|
			      C ;		al(ax)	引数					|
			      C ;								|
			      C ;===============================================================|
			      C ;●8bit版========================================================
 0F11			      C I_Read8	proc	near			;
 0F11  26: AC		      C 	lodsb	es:[si]			;
 0F13  F7 05 0800	      C 	test	ds:[di].WTD_FlagControl,WTD_Ctrl_WorkSw
 0F17  74 09		      C 	jz	I_Read8_End		;ワークからであるか？
			      C 
 0F19  53		      C 	push	bx			;	{ワーク読み込み}
 0F1A  8A 7D 52		      C 	mov	bh,ds:[di].WTD_WorkAddress
 0F1D  8A D8		      C 	mov	bl,al			;bx←ワークオフセットアドレス
 0F1F  8A 07		      C 	mov	al,ds:[bx]		;
 0F21  5B		      C 	pop	bx			;
			      C 
 0F22			      C I_Read8_End:				;
 0F22  C3		      C 	ret				;終了
 0F23			      C I_Read8	endp
			      C ;●16bit版=======================================================
 0F23			      C I_Read16	proc	near		;
 0F23  26: AD		      C 	lodsw	es:[si]
 0F25  F7 05 0800	      C 	test	ds:[di].WTD_FlagControl,WTD_Ctrl_WorkSw
 0F29  74 09		      C 	jz	I_Read16_End		;ワークからであるか？
			      C 
 0F2B  53		      C 	push	bx			;	{ワーク読み込み}
 0F2C  8A 7D 52		      C 	mov	bh,ds:[di].WTD_WorkAddress
 0F2F  8A D8		      C 	mov	bl,al			;bx←ワークオフセットアドレス
 0F31  8B 07		      C 	mov	ax,ds:[bx]		;
 0F33  5B		      C 	pop	bx			;
			      C 
 0F34			      C I_Read16_End:				;
 0F34  C3		      C 	ret				;終了
 0F35			      C I_Read16	endp
			      C ;****************************************************************
			      C ;*								*
			      C ;*			割り込みルーチン			*
			      C ;*				演奏・効果音制御部		*
			      C ;*				音階コマンド(80h〜FFh)		*
			      C ;*								*
			      C ;****************************************************************
			      C ;===============================================================|
			      C ;		オートの臨時記号処理(未解決？)			|
			      C ;===============================================================|
			      C ;	●引数							|
			      C ;		al	Note Number				|
			      C ;		cl	音程（0〜7）				|
			      C ;		ds:[di]	パート個別構造体			|
			      C ;	●返値							|
			      C ;		al	Noto Number (自動臨時記号追加後)	|
			      C ;===============================================================|
			      C 	even					;偶数アドレス配置
 0F36			      C I_PlayKey_Auto	proc	near	uses cx		;
			      C 
 0F36  51		   *	    push   cx
 0F37  80 E1 07		      C 	and	cl,07h				;cl←音程(0〜7)
			      C 
			      C ;＃処理
 0F3A  8A 6D 03		      C 	mov	ch,ds:[di].WTD_FlagSharp	;
 0F3D  D2 ED		      C 	shr	ch,cl				;
			      C 	.if	(carry?)			;チェック
 0F3F  73 02		   *	    jae    @C00C5
 0F41  FE C0		      C 		inc	al			;KeyCode ++
			      C 	.endif
 0F43			   *@C00C5:
			      C 
			      C ;ｂ処理
 0F43  8A 6D 04		      C 	mov	ch,ds:[di].WTD_FlagFlat		;
 0F46  D2 ED		      C 	shr	ch,cl				;
			      C 	.if	(carry?)			;チェック
 0F48  73 02		   *	    jae    @C00C7
 0F4A  FE C8		      C 		dec	al			;KeyCode --
			      C 	.endif
 0F4C			   *@C00C7:
			      C 
			      C 	ret				;
 0F4C  59		   *	    pop    cx
 0F4D  C3		   *	    ret    00000h
 0F4E			      C I_PlayKey_Auto	endp
			      C ;===============================================================|
			      C ;		音符コマンドの処理				|
			      C ;===============================================================|
			      C ;	●引数							|
			      C ;		ds:bp	ワークベースアドレス	引数		|
			      C ;		ds:bx	共有構造体アドレス	引数		|
			      C ;		ds:di	個別構造体		引数		|
			      C ;		es:si	演奏アドレス		引数		|
			      C ;		al	音符コマンド（00h〜7Fh）破壊ok		|
			      C ;	●レジスタ使用						|
			      C ;		cx	汎用			破壊ok		|
			      C ;		dx	汎用			破壊ok		|
			      C ;===============================================================|
			      C ;音階コード
			      C 	even				;偶数アドレス配置
 0F4E			      C I_PlayKey_Code:
 0F4E  00		      C 	db	0			;c
 0F4F  02		      C 	db	2			;d
 0F50  04		      C 	db	4			;e
 0F51  05		      C 	db	5			;f
 0F52  07		      C 	db	7			;g
 0F53  09		      C 	db	9			;a
 0F54  0B		      C 	db	11			;b
			      C ;---------------------------------------------------------------
			      C 	even				;偶数アドレス配置
 0F56			      C I_PlayKey	proc	near	uses bx
			      C 
 0F56  53		   *	    push   bx
 0F57  8A C8		      C 	mov	cl,al				;cl←コマンド
 0F59  83 E0 07		      C 	and	ax,07h				;al←音階情報(0〜7)
 0F5C  83 E8 01		      C 	sub	ax,1				;
			      C 
			      C 	;音符だった場合	（こっちの方が高頻度）
			      C 	.if	(!carry?)
 0F5F  72 3B		   *	    jb     @C00C9
 0F61  8B D8		      C 		mov	bx,ax			;
			      C 
 0F63  B0 0C		      C 		mov	al,12			;
 0F65  F6 6D 54		      C 		imul	byte ptr ds:[di].WTD_Octave	;パイプラインの為、これを先に。
 0F68  2E: 8A AF 0F4E R	      C 		mov	ch,byte ptr cs:[bx + CGROUP:I_PlayKey_Code]
 0F6D  02 C5		      C 		add	al,ch			;al←Key Code
			      C 
			      C 		;半音演算処理
 0F6F  8A E9		      C 		mov	ch,cl
 0F71  80 E5 18		      C 		and	ch,018h			;臨時記号にマスク
			      C 
			      C 		;臨時記号
			      C 		.if	(ch==08h)		;♭？
 0F74  80 FD 08		   *	    cmp    ch, 008h
 0F77  75 04		   *	    jne    @C00CB
 0F79  FE C0		      C 			inc	al
			      C 		.elseif	(ch==10h)		;＃？
 0F7B  EB 07		   *	    jmp    @C00CD
 0F7D			   *@C00CB:
 0F7D  80 FD 10		   *	    cmp    ch, 010h
 0F80  75 02		   *	    jne    @C00CE
 0F82  FE C8		      C 			dec	al
			      C 		.endif
			      C 
			      C 		;自動臨時記号
			      C 		.if	(ch!=18h)		;ナチュラル以外？
 0F84			   *@C00CE:
 0F84			   *@C00CD:
 0F84  80 FD 18		   *	    cmp    ch, 018h
 0F87  74 03		   *	    je     @C00D0
 0F89  E8 FFAA		      C 			call	I_PlayKey_Auto	;自動半音処理
			      C 		.endif
			      C 
 0F8C			   *@C00D0:
 0F8C  04 0C		      C 		add	al,12			;KeyCode補正(MIDI単位)
 0F8E  88 45 1F		      C 		mov	ds:[di].WTD_Key,al	;音程保存
			      C 
			      C 		;ハードウェアをKeyOn
 0F91  02 45 1E		      C 		add	al,ds:[di].WTD_KeyShift	
 0F94  BA 15CC R	      C 		mov	dx,offset CGROUP:I_Table_KeyOn
 0F97  E8 060E		      C 		call	I_Table_Jump		;KeyOn
			      C 
			      C 	;休符だった場合
			      C 	.else
 0F9A  EB 03		   *	    jmp    @C00D2
 0F9C			   *@C00C9:
 0F9C  88 45 1F		      C 		mov	ds:[di].WTD_Key,al	;音程保存（休符:0FFh）
			      C 
			      C 	.endif
 0F9F			   *@C00D2:
			      C 
			      C 
			      C 
			      C 	;タイフラグチェック
 0F9F  F6 C1 20		      C 	test	cl,020h				;タイフラグチェック（cy←0）
			      C 	.if	!(zero?)
 0FA2  74 01		   *	    je     @C00D3
 0FA4  F9		      C 		stc				;cy←1
			      C 	.endif
 0FA5			   *@C00D3:
 0FA5  D0 55 02		      C 	rcl	ds:[di].WTD_FlagTai,1		;シフト
			      C 
			      C 
			      C 
			      C 	;音長フラグのチェック
			      C 	;音長指定無しの場合
			      C 	.if	!(cl&40h)
 0FA8  F6 C1 40		   *	    test   cl, 040h
 0FAB  75 05		   *	    jne    @C00D5
 0FAD  8B 45 18		      C 		mov	ax,ds:[di].WTD_LengDefault
			      C 	;音長指定有りの場合
			      C 	.else
 0FB0  EB 0A		   *	    jmp    @C00D7
 0FB2			   *@C00D5:
 0FB2  33 C0		      C 		xor	ax,ax			;
 0FB4  26: AC		      C 		lodsb	es:[si]			;ax←音長
			      C 		.if	(al==0ffh)
 0FB6  3C FF		   *	    cmp    al, 0FFh
 0FB8  75 02		   *	    jne    @C00D8
 0FBA  26: AD		      C 			lodsw	es:[si]		;
			      C 		.endif
			      C 	.endif
 0FBC			   *@C00D8:
 0FBC			   *@C00D7:
			      C 
 0FBC  89 45 14		      C 	mov	ds:[di].WTD_Leng,ax		;
 0FBF  89 45 16		      C 	mov	ds:[di].WTD_LengCounter,ax	;
			      C 
			      C 
			      C 
 0FC2			      C I_PlayKey_StepE:			;
			      C 	ret				;レジスタ復帰
 0FC2  5B		   *	    pop    bx
 0FC3  C3		   *	    ret    00000h
 0FC4			      C I_PlayKey	endp
			      C ;****************************************************************
			      C ;*								*
			      C ;*			割り込みルーチン			*
			      C ;*				演奏・効果音制御部		*
			      C ;*				補助コマンド(00h〜7Fh)		*
			      C ;*								*
			      C ;****************************************************************
			      C ;===============================================================|
			      C ;			ジャンプテーブル			|
			      C ;===============================================================|
			      C ;コマンド処理のあるアドレス
			      C 	even				;偶数アドレス配置
 0FC4			      C I_PlayCommand_JumpTable:
 0FC4  10DA R		      C 	dw	offset CGROUP:I_Com00	;00 	
 0FC6  10DA R		      C 	dw	offset CGROUP:I_Com01	;01 	
 0FC8  10DA R		      C 	dw	offset CGROUP:I_Com02	;02 	
 0FCA  10DA R		      C 	dw	offset CGROUP:I_Com03	;03 	
 0FCC  10DA R		      C 	dw	offset CGROUP:I_Com04	;04 	
 0FCE  10DA R		      C 	dw	offset CGROUP:I_Com05	;05 	
 0FD0  10DA R		      C 	dw	offset CGROUP:I_Com06	;06 	
 0FD2  10DA R		      C 	dw	offset CGROUP:I_Com07	;07 	
 0FD4  10DA R		      C 	dw	offset CGROUP:I_Com08	;08 	
 0FD6  10DA R		      C 	dw	offset CGROUP:I_Com09	;09 	
 0FD8  10DA R		      C 	dw	offset CGROUP:I_Com0a	;0a 	
 0FDA  10DA R		      C 	dw	offset CGROUP:I_Com0b	;0b 	
 0FDC  10DA R		      C 	dw	offset CGROUP:I_Com0c	;0c 	
 0FDE  10DA R		      C 	dw	offset CGROUP:I_Com0d	;0d 	
 0FE0  10DA R		      C 	dw	offset CGROUP:I_Com0e	;0e 	
 0FE2  10DA R		      C 	dw	offset CGROUP:I_Com0f	;0f 	
 0FE4  10DA R		      C 	dw	offset CGROUP:I_Com10	;10 	
 0FE6  10DA R		      C 	dw	offset CGROUP:I_Com11	;11 	
 0FE8  10DA R		      C 	dw	offset CGROUP:I_Com12	;12 	
 0FEA  10DA R		      C 	dw	offset CGROUP:I_Com13	;13 	
 0FEC  10DA R		      C 	dw	offset CGROUP:I_Com14	;14 	
 0FEE  10DA R		      C 	dw	offset CGROUP:I_Com15	;15 	
 0FF0  10DA R		      C 	dw	offset CGROUP:I_Com16	;16 	
 0FF2  10DA R		      C 	dw	offset CGROUP:I_Com17	;17 	
 0FF4  10DA R		      C 	dw	offset CGROUP:I_Com18	;18 	
 0FF6  10DA R		      C 	dw	offset CGROUP:I_Com19	;19 	
 0FF8  10DA R		      C 	dw	offset CGROUP:I_Com1a	;1a 	
 0FFA  10DA R		      C 	dw	offset CGROUP:I_Com1b	;1b 	
 0FFC  10DA R		      C 	dw	offset CGROUP:I_Com1c	;1c 	
 0FFE  10DA R		      C 	dw	offset CGROUP:I_Com1d	;1d 	
 1000  10DA R		      C 	dw	offset CGROUP:I_Com1e	;1e 	
 1002  10DA R		      C 	dw	offset CGROUP:I_Com1f	;1f 	
 1004  10DA R		      C 	dw	offset CGROUP:I_Com20	;20  	
 1006  10DC R		      C 	dw	offset CGROUP:I_Com21	;21 !	Work Switch
 1008  10E2 R		      C 	dw	offset CGROUP:I_Com22	;22 "	Work Base Address
 100A  10EA R		      C 	dw	offset CGROUP:I_Com23	;23 #		(MML:Sharp)
 100C  10EC R		      C 	dw	offset CGROUP:I_Com24	;24 $		(MML:Macro)
 100E  10EE R		      C 	dw	offset CGROUP:I_Com25	;25 %		(MML:Step)
 1010  10F0 R		      C 	dw	offset CGROUP:I_Com26	;26 &		(MML:Tai)
 1012  10F2 R		      C 	dw	offset CGROUP:I_Com27	;27 '	Acsent
 1014  10FC R		      C 	dw	offset CGROUP:I_Com28	;28 (	Volume down
 1016  110A R		      C 	dw	offset CGROUP:I_Com29	;29 )	Volume up
 1018  1118 R		      C 	dw	offset CGROUP:I_Com2a	;2a *	LFO Switch
 101A  113C R		      C 	dw	offset CGROUP:I_Com2b	;2b +		(MML:Sharp)
 101C  113E R		      C 	dw	offset CGROUP:I_Com2c	;2c ,		(MML:Channel)
 101E  1140 R		      C 	dw	offset CGROUP:I_Com2d	;2d -		(MML:Flat)
 1020  1142 R		      C 	dw	offset CGROUP:I_Com2e	;2e .		(MML:Leng*1.5)
 1022  1144 R		      C 	dw	offset CGROUP:I_Com2f	;2f /	Emb. Switch
 1024  116A R		      C 	dw	offset CGROUP:I_Com30	;30 0	Work mov
 1026  117A R		      C 	dw	offset CGROUP:I_Com31	;31 1	Work add
 1028  118C R		      C 	dw	offset CGROUP:I_Com32	;32 2	Work sub
 102A  119E R		      C 	dw	offset CGROUP:I_Com33	;33 3	Work and
 102C  11B0 R		      C 	dw	offset CGROUP:I_Com34	;34 4	Work or
 102E  11C2 R		      C 	dw	offset CGROUP:I_Com35	;35 5	Work xor
 1030  11D4 R		      C 	dw	offset CGROUP:I_Com36	;36 6	Work set
 1032  11EC R		      C 	dw	offset CGROUP:I_Com37	;37 7	Work res
 1034  1204 R		      C 	dw	offset CGROUP:I_Com38	;38 8	Work cmp
 1036  1216 R		      C 	dw	offset CGROUP:I_Com39	;39 9	Work test
 1038  1244 R		      C 	dw	offset CGROUP:I_Com3a	;3a :	Loop Jump
 103A  125A R		      C 	dw	offset CGROUP:I_Com3b	;3b ;	Loop Jump Flag
 103C  1274 R		      C 	dw	offset CGROUP:I_Com3c	;3c <	Octave down
 103E  1278 R		      C 	dw	offset CGROUP:I_Com3d	;3d =		(MML:Natural)
 1040  127A R		      C 	dw	offset CGROUP:I_Com3e	;3e >	Octave up
 1042  127E R		      C 	dw	offset CGROUP:I_Com3f	;3f ?	
 1044  1280 R		      C 	dw	offset CGROUP:I_Com40	;40 @	Voice
 1046  12B2 R		      C 	dw	offset CGROUP:I_Com41	;41 A	
 1048  12B4 R		      C 	dw	offset CGROUP:I_Com42	;42 B	Bend , Bend Range(MIDI PRN)
 104A  12E0 R		      C 	dw	offset CGROUP:I_Com43	;43 C	Track / Channel , Sound Type
 104C  12FA R		      C 	dw	offset CGROUP:I_Com44	;44 D	Drection Detune
 104E  1302 R		      C 	dw	offset CGROUP:I_Com45	;45 E	Emb.
 1050  135A R		      C 	dw	offset CGROUP:I_Com46	;46 F	Volume(MIDI ctrl:00x7)
 1052  1366 R		      C 	dw	offset CGROUP:I_Com47	;47 G	Channel Pressior(MIDI:0xD0)
 1054  1370 R		      C 	dw	offset CGROUP:I_Com48	;48 H	Bank(MIDI ctrl:0x00)
 1056  137C R		      C 	dw	offset CGROUP:I_Com49	;49 I	
 1058  137E R		      C 	dw	offset CGROUP:I_Com4a	;4a J	
 105A  1380 R		      C 	dw	offset CGROUP:I_Com4b	;4b K	Key On Delay
 105C  1388 R		      C 	dw	offset CGROUP:I_Com4c	;4c L	Loop
 105E  13A8 R		      C 	dw	offset CGROUP:I_Com4d	;4d M	Mod(MIDI Ctrl:0x01)
 1060  13B6 R		      C 	dw	offset CGROUP:I_Com4e	;4e N	NPRN(MIDI Ctrl:0x62)
 1062  13D8 R		      C 	dw	offset CGROUP:I_Com4f	;4f O	
 1064  13E8 R		      C 	dw	offset CGROUP:I_Com50	;50 P	Mode Sw(WS) / Damper(MIDI)
 1066  13F2 R		      C 	dw	offset CGROUP:I_Com51	;51 Q	Gate time
 1068  13FA R		      C 	dw	offset CGROUP:I_Com52	;52 R	
 106A  1406 R		      C 	dw	offset CGROUP:I_Com53	;53 S	
 106C  1416 R		      C 	dw	offset CGROUP:I_Com54	;54 T	Filter(MIDI ctrl:)
 106E  1422 R		      C 	dw	offset CGROUP:I_Com55	;55 U	Gate time
 1070  142C R		      C 	dw	offset CGROUP:I_Com56	;56 V	Expression Detune
 1072  1434 R		      C 	dw	offset CGROUP:I_Com57	;57 W	
 1074  1440 R		      C 	dw	offset CGROUP:I_Com58	;58 X	Excluesiv Send(MIDI:0xF0)
 1076  1452 R		      C 	dw	offset CGROUP:I_Com59	;59 Y	
 1078  1454 R		      C 	dw	offset CGROUP:I_Com5a	;5a Z	Send Data(MIDI)
 107A  1468 R		      C 	dw	offset CGROUP:I_Com5b	;5b [	Loop
 107C  1478 R		      C 	dw	offset CGROUP:I_Com5c	;5c \	
 107E  147A R		      C 	dw	offset CGROUP:I_Com5d	;5d ]	Loop End
 1080  1490 R		      C 	dw	offset CGROUP:I_Com5e	;5e ^	Lengs add
 1082  1492 R		      C 	dw	offset CGROUP:I_Com5f	;5f _	Key Trance
 1084  149A R		      C 	dw	offset CGROUP:I_Com60	;60 `	
 1086  149C R		      C 	dw	offset CGROUP:I_Com61	;61 a	(MML:La)
 1088  149E R		      C 	dw	offset CGROUP:I_Com62	;62 b	(MML:Si)
 108A  14A0 R		      C 	dw	offset CGROUP:I_Com63	;63 c	(MML:Do)
 108C  14A2 R		      C 	dw	offset CGROUP:I_Com64	;64 d	(MML:Re)
 108E  14A4 R		      C 	dw	offset CGROUP:I_Com65	;65 e	(MML:Mi)
 1090  14A6 R		      C 	dw	offset CGROUP:I_Com66	;66 f	(MML:Fa)
 1092  14A8 R		      C 	dw	offset CGROUP:I_Com67	;67 g	(MML:So)
 1094  14AA R		      C 	dw	offset CGROUP:I_Com68	;68 h	
 1096  14AC R		      C 	dw	offset CGROUP:I_Com69	;69 i	
 1098  14AE R		      C 	dw	offset CGROUP:I_Com6a	;6a j	
 109A  14B0 R		      C 	dw	offset CGROUP:I_Com6b	;6b k	velocity(MIDI)
 109C  14B8 R		      C 	dw	offset CGROUP:I_Com6c	;6c l	lengs
 109E  14C6 R		      C 	dw	offset CGROUP:I_Com6d	;6d m	LFO
 10A0  14F8 R		      C 	dw	offset CGROUP:I_Com6e	;6e n	Noise mode
 10A2  1506 R		      C 	dw	offset CGROUP:I_Com6f	;6f o	Octave
 10A4  150E R		      C 	dw	offset CGROUP:I_Com70	;70 p	Pan.
 10A6  1516 R		      C 	dw	offset CGROUP:I_Com71	;71 q	Gate time
 10A8  151E R		      C 	dw	offset CGROUP:I_Com72	;72 r	hol.
 10AA  1520 R		      C 	dw	offset CGROUP:I_Com73	;73 s	Sweep
 10AC  153A R		      C 	dw	offset CGROUP:I_Com74	;74 t	tempo(HBLANK)
 10AE  1556 R		      C 	dw	offset CGROUP:I_Com75	;75 u	Gate time
 10B0  155E R		      C 	dw	offset CGROUP:I_Com76	;76 v	Volume (WS/MIDI)
 10B2  1566 R		      C 	dw	offset CGROUP:I_Com77	;77 w	
 10B4  1568 R		      C 	dw	offset CGROUP:I_Com78	;78 x		(MML:Hex)
 10B6  1570 R		      C 	dw	offset CGROUP:I_Com79	;79 y	
 10B8  1580 R		      C 	dw	offset CGROUP:I_Com7a	;7a z	
 10BA  1582 R		      C 	dw	offset CGROUP:I_Com7b	;7b {	Auto trance
 10BC  15A0 R		      C 	dw	offset CGROUP:I_Com7c	;7c |	
 10BE  15A2 R		      C 	dw	offset CGROUP:I_Com7d	;7d }	
 10C0  15A4 R		      C 	dw	offset CGROUP:I_Com7e	;7e ~	
 10C2  15A6 R		      C 	dw	offset CGROUP:I_Com7f	;7f 	
			      C ;===============================================================|
			      C ;		コマンドによる分岐				|
			      C ;			いわゆる、Ｃ言語でいう'switch'文と同等	|
			      C ;===============================================================|
			      C ;	●引数							|
			      C ;		ds:bp	ワークベースアドレス	引数		|
			      C ;		ds:bx	共有構造体アドレス	引数		|
			      C ;		ds:di	個別構造体		引数		|
			      C ;		es:si	演奏アドレス		引数		|
			      C ;		al	音符コマンド（00h〜7Fh）破壊ok		|
			      C ;	●レジスタ使用						|
			      C ;		cx	汎用			破壊ok		|
			      C ;		dx	汎用			破壊ok		|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 10C4			      C I_PlayCommand	proc	near
			      C 
 10C4  53		      C 	push	bx			;
 10C5  8B D8		      C 	mov	bx,ax			
 10C7  83 E3 7F		      C 	and	bx,007fh		;
 10CA  D1 E3		      C 	shl	bx,1			;
 10CC  2E: 8B 97 0FC4 R	      C 	mov	dx,word ptr cs:[I_PlayCommand_JumpTable + bx]
 10D1  5B		      C 	pop	bx			;
			      C 
 10D2  FF D2		      C 	call	dx			;サブルーチンの呼び出し
			      C 
 10D4  81 25 F7FF	      C 	and	ds:[di].WTD_FlagControl,WTD_Ctrl_WorkSwR
			      C 
 10D8  C3		      C 	ret				;ワーク・スイッチのリセット
 10D9			      C I_PlayCommand	endp			;
			      C ;===============================================================|
			      C ;		NULL						|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 10DA			      C I_Com00:				;
 10DA			      C I_Com01:				;
 10DA			      C I_Com02:				;
 10DA			      C I_Com03:				;
 10DA			      C I_Com04:				;
 10DA			      C I_Com05:				;
 10DA			      C I_Com06:				;
 10DA			      C I_Com07:				;
 10DA			      C I_Com08:				;
 10DA			      C I_Com09:				;
 10DA			      C I_Com0a:				;
 10DA			      C I_Com0b:				;
 10DA			      C I_Com0c:				;
 10DA			      C I_Com0d:				;
 10DA			      C I_Com0e:				;
 10DA			      C I_Com0f:				;
 10DA			      C I_Com10:				;
 10DA			      C I_Com11:				;
 10DA			      C I_Com12:				;
 10DA			      C I_Com13:				;
 10DA			      C I_Com14:				;
 10DA			      C I_Com15:				;
 10DA			      C I_Com16:				;
 10DA			      C I_Com17:				;
 10DA			      C I_Com18:				;
 10DA			      C I_Com19:				;
 10DA			      C I_Com1a:				;
 10DA			      C I_Com1b:				;
 10DA			      C I_Com1c:				;
 10DA			      C I_Com1d:				;
 10DA			      C I_Com1e:				;
 10DA			      C I_Com1f:				;
 10DA			      C I_Com20:				;
 10DA  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		Work Switch					|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 10DC			      C I_Com21:				;
 10DC  81 0D 0800	      C 	or	ds:[di].WTD_FlagControl,WTD_Ctrl_WorkSw
 10E0  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		Work Base Address Set				|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 10E2			      C I_Com22:				;
 10E2  E8 FE2C		      C 	call	I_Read8			;
 10E5  88 45 52		      C 	mov	ds:[di].WTD_WorkAddress,al
 10E8  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		MML:Sharp					|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 10EA			      C I_Com23:				;
 10EA  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		MML:Macro					|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 10EC			      C I_Com24:				;
 10EC  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		MML:Step					|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 10EE			      C I_Com25:				;
 10EE  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		MML:Tai						|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 10F0			      C I_Com26:				;
 10F0  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		Acsent						|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 10F2			      C I_Com27:				;
 10F2  E8 FE1C		      C 	call	I_Read8			;
 10F5  88 45 29		      C 	mov	ds:[di].WTD_AcsentVelocity,al
 10F8  83 0D 40		      C 	or	ds:[di].WTD_FlagControl,WTD_Ctrl_Acsent
 10FB  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		Volume down					|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 10FC			      C I_Com28:				;
 10FC  8A 45 5A		      C 	mov	al,ds:[di].WTD_VolumeUpDown
 10FF  28 45 41		      C 	sub	ds:[di].WTD_Expr,al	;
			      C 	.if	(carry?)		;
 1102  73 04		   *	    jae    @C00DA
 1104  C6 45 41 00	      C 		mov	ds:[di].WTD_Expr,0
			      C 	.endif				;
 1108			   *@C00DA:
 1108  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		Volume up					|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 110A			      C I_Com29:				;
 110A  8A 45 5A		      C 	mov	al,ds:[di].WTD_VolumeUpDown
 110D  00 45 41		      C 	add	ds:[di].WTD_Expr,al	;
			      C 	.if	(carry?)		;
 1110  73 04		   *	    jae    @C00DC
 1112  C6 45 41 7F	      C 		mov	ds:[di].WTD_Expr,127
			      C 	.endif				;
 1116			   *@C00DC:
 1116  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		LFO Switch					|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 1118			      C I_Com2a:				;
 1118  53		      C 	push	bx			;
			      C 
			      C ;	mov	cl,es:[si]		;cl = 0,1,2
			      C ;	inc	si			;
 1119  26: AC		      C 	lodsb	es:[si]
 111B  8A C8		      C 	mov	cl,al
 111D  D0 E1		      C 	shl	cl,1			;cl = 0,2,4 (bit)
			      C 
 111F  33 C0		      C 	xor	ax,ax			;
 1121  E8 FDED		      C 	call	I_Read8			;
 1124  83 E0 01		      C 	and	ax,00001h		;Bit Mask
 1127  BB FFFE		      C 	mov	bx,0FFFEh		;Bit Mask
			      C 	.if	(cl!=0)
 112A  0A C9		   *	    or	cl, cl
 112C  74 04		   *	    je     @C00DE
 112E  D3 E0		      C 		shl	ax,cl		;ax = 01h,04h,10h
 1130  D3 C3		      C 		rol	bx,cl		;
			      C 	.endif
 1132			   *@C00DE:
			      C 
 1132  83 E0 15		      C 	and	ax,015h			;Bit Mask
 1135  21 1D		      C 	and	word ptr ds:[di].WTD_FlagControl,bx
 1137  09 05		      C 	or	word ptr ds:[di].WTD_FlagControl,ax
			      C 
 1139  5B		      C 	pop	bx			;
 113A  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		MML:Sharp					|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 113C			      C I_Com2b:				;
 113C  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		MML:Channel					|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 113E			      C I_Com2c:				;
 113E  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		MML:Flat					|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 1140			      C I_Com2d:				;
 1140  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		MML:Lengs×1.5					|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 1142			      C I_Com2e:				;
 1142  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		Emb. Switch					|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 1144			      C I_Com2f:				;
 1144  53		      C 	push	bx			;
			      C 
			      C ;	mov	cl,es:[si]		;cl = 0,1,2
			      C ;	inc	si			;
 1145  26: AC		      C 	lodsb	es:[si]
 1147  8A C8		      C 	mov	cl,al
 1149  D0 E1		      C 	shl	cl,1			;cl = 0,2,4 (bit)
 114B  FE C1		      C 	inc	cl			;cl = 1,3,5 (bit)
			      C 
 114D  33 C0		      C 	xor	ax,ax			;
 114F  E8 FDBF		      C 	call	I_Read8			;
 1152  83 E0 01		      C 	and	ax,00001h		;Bit Mask
 1155  BB FFFE		      C 	mov	bx,0FFFEh		;Bit Mask
			      C 
			      C 	.if	(cl!=0)
 1158  0A C9		   *	    or	cl, cl
 115A  74 04		   *	    je     @C00E0
 115C  D3 E0		      C 		shl	ax,cl		;al = 02h,08h,20h
 115E  D3 C3		      C 		rol	bx,cl		;
			      C 	.endif
 1160			   *@C00E0:
			      C 
 1160  83 E0 2A		      C 	and	ax,02Ah			;Bit Mask
 1163  21 1D		      C 	and	ds:[di].WTD_FlagControl,bx
 1165  09 05		      C 	or	ds:[di].WTD_FlagControl,ax
			      C 
 1167  5B		      C 	pop	bx			;
 1168  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		Work	mov	LD				|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 116A			      C I_Com30:				;
 116A  53		      C 	push	bx			;
			      C ;アドレスの取得
 116B  8A 65 52		      C 	mov	ah,ds:[di].WTD_WorkAddress
 116E  E8 FDA0		      C 	call	I_Read8			;
 1171  8B D8		      C 	mov	bx,ax			;bx←アドレス
 1173  E8 FD9B		      C 	call	I_Read8			;al←数値
			      C 
 1176  88 07		      C 	mov	ds:[bx],al		;代入
			      C 
 1178  5B		      C 	pop	bx			;
 1179  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		Work	add	ADD				|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 117A			      C I_Com31:				;
 117A  53		      C 	push	bx			;
			      C ;アドレスの取得
 117B  8A 65 52		      C 	mov	ah,ds:[di].WTD_WorkAddress
 117E  E8 FD90		      C 	call	I_Read8			;
 1181  8B D8		      C 	mov	bx,ax			;bx←アドレス
 1183  E8 FD8B		      C 	call	I_Read8			;al←数値
			      C 
 1186  00 07		      C 	add	ds:[bx],al		;加算
 1188  5B		      C 	pop	bx			;
			      C 
 1189  E9 009A		      C 	jmp	I_Com3x_Flag		;フラグ変化
			      C ;	ret				;
			      C ;===============================================================|
			      C ;		Work	sub	SUB				|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 118C			      C I_Com32:				;
 118C  53		      C 	push	bx			;
			      C ;アドレスの取得
 118D  8A 65 52		      C 	mov	ah,ds:[di].WTD_WorkAddress
 1190  E8 FD7E		      C 	call	I_Read8			;
 1193  8B D8		      C 	mov	bx,ax			;bx←アドレス
 1195  E8 FD79		      C 	call	I_Read8			;al←数値
			      C 
 1198  28 07		      C 	sub	ds:[bx],al		;加算
 119A  5B		      C 	pop	bx			;
			      C 
 119B  E9 0088		      C 	jmp	I_Com3x_Flag		;フラグ変化
			      C ;	ret				;
			      C ;===============================================================|
			      C ;		Work	and	AND				|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 119E			      C I_Com33:				;
 119E  53		      C 	push	bx			;
			      C ;アドレスの取得
 119F  8A 65 52		      C 	mov	ah,ds:[di].WTD_WorkAddress
 11A2  E8 FD6C		      C 	call	I_Read8			;
 11A5  8B D8		      C 	mov	bx,ax			;bx←アドレス
 11A7  E8 FD67		      C 	call	I_Read8			;al←数値
			      C 
 11AA  20 07		      C 	and	ds:[bx],al		;加算
 11AC  5B		      C 	pop	bx			;
			      C 
 11AD  EB 77		      C 	jmp	I_Com3x_Flag		;フラグ変化
			      C ;	ret				;
			      C ;===============================================================|
			      C ;		Work	or	OR				|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 11B0			      C I_Com34:				;
 11B0  53		      C 	push	bx			;
			      C ;アドレスの取得
 11B1  8A 65 52		      C 	mov	ah,ds:[di].WTD_WorkAddress
 11B4  E8 FD5A		      C 	call	I_Read8			;
 11B7  8B D8		      C 	mov	bx,ax			;bx←アドレス
 11B9  E8 FD55		      C 	call	I_Read8			;al←数値
			      C 
 11BC  08 07		      C 	or	ds:[bx],al		;加算
 11BE  5B		      C 	pop	bx			;
			      C 
 11BF  EB 65		      C 	jmp	I_Com3x_Flag		;フラグ変化
			      C ;	ret				;
			      C ;===============================================================|
			      C ;		Work	xor	XOR				|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 11C2			      C I_Com35:				;
 11C2  53		      C 	push	bx			;
			      C ;アドレスの取得
 11C3  8A 65 52		      C 	mov	ah,ds:[di].WTD_WorkAddress
 11C6  E8 FD48		      C 	call	I_Read8			;
 11C9  8B D8		      C 	mov	bx,ax			;bx←アドレス
 11CB  E8 FD43		      C 	call	I_Read8			;al←数値
			      C 
 11CE  30 07		      C 	xor	ds:[bx],al		;加算
 11D0  5B		      C 	pop	bx			;
			      C 
 11D1  EB 53		      C 	jmp	I_Com3x_Flag		;フラグ変化
			      C ;	ret				;
			      C ;===============================================================|
			      C ;		Work		SET				|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 11D4			      C I_Com36:				;
 11D4  53		      C 	push	bx			;
			      C 
			      C 	;アドレスの取得
 11D5  8A 65 52		      C 	mov	ah,ds:[di].WTD_WorkAddress
 11D8  E8 FD36		      C 	call	I_Read8			;
 11DB  8B D8		      C 	mov	bx,ax			;bx←アドレス
 11DD  E8 FD31		      C 	call	I_Read8			;al←数値
			      C 
 11E0  8A C8		      C 	mov	cl,al			;
 11E2  B0 01		      C 	mov	al,001h			;
 11E4  D2 E0		      C 	shl	al,cl			;
			      C 
 11E6  08 07		      C 	or	ds:[bx],al		;ビットセット
			      C 
 11E8  5B		      C 	pop	bx			;
 11E9  EB 3B		      C 	jmp	I_Com3x_Flag		;フラグ変化
			      C ;	ret				;
			      C ;===============================================================|
			      C ;		Work		RES				|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 11EC			      C I_Com37:				;
 11EC  53		      C 	push	bx			;
			      C 
			      C 	;アドレスの取得
 11ED  8A 65 52		      C 	mov	ah,ds:[di].WTD_WorkAddress
 11F0  E8 FD1E		      C 	call	I_Read8			;
 11F3  8B D8		      C 	mov	bx,ax			;bx←アドレス
 11F5  E8 FD19		      C 	call	I_Read8			;al←数値
			      C 
 11F8  8A C8		      C 	mov	cl,al			;
 11FA  B0 FE		      C 	mov	al,0FEh			;
 11FC  D2 C0		      C 	rol	al,cl			;
			      C 
 11FE  20 07		      C 	and	ds:[bx],al		;ビットリセット
			      C 
 1200  5B		      C 	pop	bx			;
 1201  EB 23		      C 	jmp	I_Com3x_Flag		;フラグ変化
			      C ;	ret				;
			      C ;===============================================================|
			      C ;		Work	cmp	CP				|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 1204			      C I_Com38:				;
 1204  53		      C 	push	bx			;
			      C ;アドレスの取得
 1205  8A 65 52		      C 	mov	ah,ds:[di].WTD_WorkAddress
 1208  E8 FD06		      C 	call	I_Read8			;
 120B  8B D8		      C 	mov	bx,ax			;bx←アドレス
 120D  E8 FD01		      C 	call	I_Read8			;al←数値
			      C 
 1210  38 07		      C 	cmp	ds:[bx],al		;加算
 1212  5B		      C 	pop	bx			;
			      C 
 1213  EB 11		      C 	jmp	I_Com3x_Flag		;フラグ変化
			      C ;	ret				;
			      C ;===============================================================|
			      C ;		work	test					|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 1216			      C I_Com39:				;
 1216  53		      C 	push	bx			;
			      C ;アドレスの取得
 1217  8A 65 52		      C 	mov	ah,ds:[di].WTD_WorkAddress
 121A  E8 FCF4		      C 	call	I_Read8			;
 121D  8B D8		      C 	mov	bx,ax			;bx←アドレス
 121F  E8 FCEF		      C 	call	I_Read8			;al←数値
			      C 
 1222  84 07		      C 	test	ds:[bx],al		;加算
 1224  5B		      C 	pop	bx			;
			      C 
			      C ;	jmp	I_Com3x_Flag		;フラグ変化
			      C ;	ret				;
			      C ;===============================================================|
			      C ;		Work	フラグ変化				|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 1226			      C I_Com3x_Flag:
			      C 
			      C 	;キャリーフラグ
 1226  9C		      C 	pushf				;レジスタ保存
			      C 	.if	(carry?)
 1227  73 06		   *	    jae    @C00E2
 1229  81 0D 1000	      C 		or	ds:[di].WTD_FlagControl,WTD_Ctrl_WorkCy
			      C 	.else
 122D  EB 04		   *	    jmp    @C00E4
 122F			   *@C00E2:
 122F  81 25 EFFF	      C 		and	ds:[di].WTD_FlagControl,WTD_Ctrl_WorkCyR
			      C 	.endif
 1233			   *@C00E4:
 1233  9D		      C 	popf				;レジスタ復帰
			      C 
			      C 	;ゼローフラグ
 1234  9C		      C 	pushf				;レジスタ保存
			      C 	.if	(zero?)
 1235  75 06		   *	    jne    @C00E5
 1237  81 0D 2000	      C 		or	ds:[di].WTD_FlagControl,WTD_Ctrl_WorkZe
			      C 	.else
 123B  EB 04		   *	    jmp    @C00E7
 123D			   *@C00E5:
 123D  81 25 DFFF	      C 		and	ds:[di].WTD_FlagControl,WTD_Ctrl_WorkZeR
			      C 	.endif
 1241			   *@C00E7:
 1241  9D		      C 	popf				;レジスタ復帰
			      C 
 1242  C3		      C 	ret
			      C ;===============================================================|
			      C ;		Loop Jump					|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 1244			      C I_Com3a:				;
 1244  53		      C 	push	bx			;
			      C 
			      C 	;読み込み
 1245  26: AD		      C 	lodsw	es:[si]
			      C 
			      C 	;カウンタ・読み込み
 1247  33 DB		      C 	xor	bx,bx			;
 1249  8A 5D 10		      C 	mov	bl,ds:[di].WTD_LoopCountPointer
			      C 
			      C 	;チェック
			      C 	.if	(ds:[di + bx].WTD_LoopCount==1)
 124C  80 79 08 01	   *	    cmp    ds : [di + bx] . WTD_LoopCount, 001h
 1250  75 05		   *	    jne    @C00E8
 1252  FE 4D 10		      C 		dec	ds:[di].WTD_LoopCountPointer
 1255  8B F0		      C 		mov	si,ax		;
			      C 	.endif
 1257			   *@C00E8:
			      C 
 1257  5B		      C 	pop	bx			;
 1258  C3		      C 	ret				;終了
			      C ;===============================================================|
			      C ;		Loop Jump Flags					|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 125A			      C I_Com3b:				;
 125A  8B 05		      C 	mov	ax,ds:[di].WTD_FlagControl
 125C  25 3000		      C 	and	ax,WTD_Ctrl_WorkCy + WTD_Ctrl_WorkZe
 125F  C1 E8 04		      C 	shr	ax,4			;
 1262  E8 FCAC		      C 	call	I_Read8			;dh←WTD内部のフラグ
 1265  8B D0		      C 	mov	dx,ax			;dl←曲データ中のフラグ
			      C 
 1267  26: AD		      C 	lodsw	es:[si]			;ax←ループ先
			      C 
			      C 	;チェック
			      C 	.if	(dl==dh)
 1269  38 F2		   *	    cmp    dl, dh
 126B  75 05		   *	    jne    @C00EA
 126D  FE 4D 10		      C 		dec	ds:[di].WTD_LoopCountPointer
 1270  8B F0		      C 		mov	si,ax		;ループ抜け
			      C 	.endif
 1272			   *@C00EA:
			      C 
 1272  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		Octave down					|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 1274			      C I_Com3c:				;
 1274  FE 4D 54		      C 	dec	ds:[di].WTD_Octave	;
 1277  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		MML:Natural					|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 1278			      C I_Com3d:				;
 1278  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		Octave up					|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 127A			      C I_Com3e:				;
 127A  FE 45 54		      C 	inc	ds:[di].WTD_Octave	;
 127D  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		NULL '?'					|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 127E			      C I_Com3f:				;
 127E  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		Voice / Program					|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 1280			      C I_Com40:				;
 1280  E8 FC8E		      C 	call	I_Read8			;音色拡張子はあるか？
 1283  D0 C0		      C 	rol	al,1			;
 1285  D0 E8		      C 	shr	al,1			;Bit 7 Reset & Bit 7 -> Cy Flag
			      C 
			      C ;	jc	I_Com40_1st
			      C 	.if	(!carry?)
 1287  72 0B		   *	    jb     @C00EC
 1289			      C I_Com40_1st:
 1289  88 45 74		      C 		mov	ds:[di].WTD_Program1st,al
 128C  BA 1720 R	      C 		mov	dx,offset CGROUP:I_Table_Voice
 128F  E9 0316		      C 		jmp	I_Table_Jump
			      C 	.else
 1292  EB 1C		   *	    jmp    @C00EE
 1294			   *@C00EC:
 1294  8A E0		      C 		mov	ah,al		;
 1296  E8 FC78		      C 		call	I_Read8		;
			      C ;		.if	(ah==01h)
 1299  80 FC 01		      C 		cmp	ah,01h
 129C  75 0A		      C 		jnz	I_Com40_2nd
 129E  88 45 75		      C 			mov	ds:[di].WTD_Program2nd,al
 12A1  E8 FC7F		      C 			call	I_Read16
 12A4  89 45 72		      C 			mov	ds:[di].WTD_ProgramRate,ax
 12A7  C3		      C 			ret		;※else の jmp 命令の代理
			      C 	even
 12A8			      C I_Com40_2nd:
			      C ;		.elseif	(ah==02h)
 12A8  80 FC 02		      C 		cmp	ah,02h
 12AB  75 DC		      C 			jnz	I_Com40_1st
 12AD  88 45 76		      C 			mov	ds:[di].WTD_Program3rd,al
			      C ;		.else	;(ah==00h)	デフォルト
			      C ;			jmp	I_Com40_1st
			      C ;		.endif
			      C 	.endif
 12B0			   *@C00EE:
			      C 
 12B0  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		NULL 'A'					|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 12B2			      C I_Com41:				;
 12B2  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		Bend & Bend Range(MIDI)				|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 12B4			      C I_Com42:				;
 12B4  E8 FC6C		      C 	call	I_Read16		;
 12B7  D1 C0		      C 	rol	ax,1			;
 12B9  D1 E8		      C 	shr	ax,1			;Bit 7 Reset & Bit 7 -> Cy Flag
 12BB  89 45 2C		      C 	mov	ds:[di].WTD_Bend,ax	;
			      C 	.if	(carry?)
 12BE  73 1F		   *	    jae    @C00EF
			      C 
			      C ifndef	hyoka	;------------------------廉価版は無し
 12C0  B0 00		      C 	mov	al,00h			;
 12C2  B1 64		      C 	mov	cl,MIDI_Ctrl_RegLSB	;
 12C4  BA 1760 R	      C 	mov	dx,offset CGROUP:I_Table_CtrlChgB
 12C7  E8 02DE		      C 	call	I_Table_Jump		;
			      C 
 12CA  B0 00		      C 	mov	al,00h			;
 12CC  B1 65		      C 	mov	cl,MIDI_Ctrl_RegMSB	;
 12CE  BA 1760 R	      C 	mov	dx,offset CGROUP:I_Table_CtrlChgB
 12D1  E8 02D4		      C 	call	I_Table_Jump		;
			      C endif	;--------------------------------
			      C 
 12D4  E8 FC3A		      C 	call	I_Read8			;
			      C 
			      C ifndef	hyoka	;------------------------廉価版は無し
 12D7  B1 06		      C 	mov	cl,MIDI_Ctrl_DataEntly	;
 12D9  BA 1760 R	      C 	mov	dx,offset CGROUP:I_Table_CtrlChgB
 12DC  E9 02C9		      C 	jmp	I_Table_Jump		;※call → jmp
			      C endif	;--------------------------------
			      C 
			      C 	.endif
 12DF			   *@C00EF:
 12DF  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		Track / Sound Type				|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 12E0			      C I_Com43:				;
 12E0  E8 FC2E		      C 	call	I_Read8			;
 12E3  88 45 05		      C 	mov	ds:[di].WTD_Channel,al	;
			      C 
			      C 	;効果音？
			      C 	.if	(ds:[di].WTD_FlagControl&WTD_Ctrl_Effect)
 12E6  F7 05 4000	   *	    test   ds : [di] . WTD_FlagControl, WTD_Ctrl_Effect
 12EA  74 0D		   *	    je     @C00F1
 12EC  24 07		      C 		and	al,07h		;
 12EE  8A C8		      C 		mov	cl,al		;
 12F0  FE C1		      C 		inc	cl		;
 12F2  B8 0800		      C 		mov	ax,0800h	;
 12F5  D3 E0		      C 		shl	ax,cl		;
 12F7  09 07		      C 		or	ds:[bx].WTD_Sys_Flag,ax
			      C 	.endif
 12F9			   *@C00F1:
 12F9  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		Frection Detune					|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 12FA			      C I_Com44:				;
 12FA  E8 FC26		      C 	call	I_Read16		;
 12FD  89 45 2E		      C 	mov	ds:[di].WTD_BendDetune,ax
 1300  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		Emblop						|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 1302			      C I_Com45:				;
 1302  53		      C 	push	bx			;
			      C 
 1303  26: AC		      C 	lodsb	es:[si]
			      C 
			      C 
 1305  50		      C 	push	ax			;保存
 1306  33 C0		      C 	xor	ax,ax			;
 1308  E8 FC06		      C 	call	I_Read8			;ax←エンベロープ番号
 130B  83 E0 1F		      C 	and	ax,001fh		;
 130E  C1 E0 04		      C 	shl	ax,4			;ax←ax×16
 1311  5B		      C 	pop	bx			;復帰
			      C 
 1312  8A FC		      C 	mov	bh,ah			;bh←上位ビット
			      C 
			      C 	.if	(bl==0)		;音程
 1314  0A DB		   *	    or	bl, bl
 1316  75 12		   *	    jne    @C00F3
 1318  80 65 39 0F	      C 		and	ds:[di].WTD_BendEmbAddress,00fh	;
 131C  08 45 39		      C 		or	ds:[di].WTD_BendEmbAddress,al	;
			      C 
			      C ;		mov	ax,ds:[di].WTD_FlagControl	;
 131F  D1 EB		      C 		shr	bx,1				;bx bit 7  =  No. bit 5
 1321  81 E3 0080	      C 		and	bx,WTD_Ctrl_EmbFreq		;
 1325  B8 FF7F		      C 		mov	ax,WTD_Ctrl_EmbFreqR		;
			      C ;		or	ax,bx				;
			      C ;		mov	ds:[di].WTD_FlagControl,ax
			      C 
			      C 	.elseif	(bl==1)		;音量
 1328  EB 2A		   *	    jmp    @C00F5
 132A			   *@C00F3:
 132A  80 FB 01		   *	    cmp    bl, 001h
 132D  75 10		   *	    jne    @C00F6
 132F  80 65 4D 0F	      C 		and	ds:[di].WTD_ExprEmbAddress,00fh	;
 1333  08 45 4D		      C 		or	ds:[di].WTD_ExprEmbAddress,al	;
			      C 
			      C ;		mov	ax,ds:[di].WTD_FlagControl	;bx bit 8  =  No. bit 5
 1336  81 E3 0100	      C 		and	bx,WTD_Ctrl_EmbVol		;
 133A  B8 FEFF		      C 		mov	ax,WTD_Ctrl_EmbVolR		;
			      C ;		or	ax,bx				;
			      C ;		mov	ds:[di].WTD_FlagControl,ax
			      C 
			      C 	.elseif	(bl==2)		;パン
 133D  EB 15		   *	    jmp    @C00F8
 133F			   *@C00F6:
 133F  80 FB 02		   *	    cmp    bl, 002h
 1342  75 10		   *	    jne    @C00F9
 1344  80 65 6D 0F	      C 		and	ds:[di].WTD_PanEmbAddress,00fh	;
 1348  08 45 6D		      C 		or	ds:[di].WTD_PanEmbAddress,al	;
			      C 
			      C ;		mov	ax,ds:[di].WTD_FlagControl	;
 134B  D1 E3		      C 		shl	bx,1				;bx bit 9  =  No. bit 5
 134D  81 E3 0200	      C 		and	bx,WTD_Ctrl_EmbPan		;
 1351  B8 FDFF		      C 		mov	ax,WTD_Ctrl_EmbPanR		;
			      C ;		or	ax,bx				;
			      C ;		mov	ds:[di].WTD_FlagControl,ax
			      C 	.endif
 1354			   *@C00F9:
 1354			   *@C00F8:
 1354			   *@C00F5:
			      C 
 1354  21 05		      C 	and	ds:[di].WTD_FlagControl,ax
 1356  09 1D		      C 	or	ds:[di].WTD_FlagControl,bx
			      C 
 1358			      C I_Com45_End:				;
 1358  5B		      C 	pop	bx			;
 1359  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		Volume(MIDI ctrl:0x07)				|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 135A			      C I_Com46:				;
 135A  E8 FBB4		      C 	call	I_Read8			;
			      C 
			      C ifndef	hyoka	;------------------------廉価版は無し
 135D  B1 07		      C 	mov	cl,MIDI_Ctrl_Volume	;
 135F  BA 1760 R	      C 	mov	dx,offset CGROUP:I_Table_CtrlChgB
 1362  E9 0243		      C 	jmp	I_Table_Jump		;※call → jmp
			      C endif	;--------------------------------
			      C 
 1365  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		Channel Pressior(MIDI)				|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 1366			      C I_Com47:				;
 1366  E8 FBA8		      C 	call	I_Read8			;
 1369  BA 1756 R	      C 	mov	dx,offset CGROUP:I_Table_PolyChPress
 136C  E9 0239		      C 	jmp	I_Table_Jump		;
			      C ;	ret				;
			      C ;===============================================================|
			      C ;		Program Bank Select(MIDI)			|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 1370			      C I_Com48:				;
 1370  E8 FBB0		      C 	call	I_Read16		;
			      C 
			      C ifndef	hyoka	;------------------------廉価版は無し
 1373  B1 00		      C 	mov	cl,MIDI_Ctrl_Bank	;
 1375  BA 1776 R	      C 	mov	dx,offset CGROUP:I_Table_CtrlChgW
 1378  E9 022D		      C 	jmp	I_Table_Jump		;※call → jmp
			      C endif	;--------------------------------
			      C 
 137B  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		NULL 'I'					|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 137C			      C I_Com49:				;
 137C  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		NULL 'J'					|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 137E			      C I_Com4a:				;
 137E  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		Key on  Delay					|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 1380			      C I_Com4b:				;
 1380  E8 FBA0		      C 	call	I_Read16		;
 1383  89 45 1C		      C 	mov	ds:[di].WTD_KeyOnDelay,ax
 1386  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		Loop	'L'					|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 1388			      C I_Com4c:				;
 1388  26: AD		      C 	lodsw	es:[si]
			      C 
			      C 	;無限ループ	（こっちの方が、高頻度）
			      C 	.if	(ax==0)
 138A  0B C0		   *	    or	ax, ax
 138C  75 17		   *	    jne    @C00FB
 138E  81 0D 8000	      C 		or	ds:[di].WTD_FlagControl,WTD_Ctrl_PlayEnd
 1392  8A 6D 05		      C 		mov	ch,byte ptr ds:[di].WTD_Channel
			      C 		.if	((ds:[di].WTD_FlagControl&WTD_Ctrl_Effect) && (ch>=80h))
 1395  F7 05 4000	   *	    test   ds : [di] . WTD_FlagControl, WTD_Ctrl_Effect
 1399  74 0C		   *	    je     @C00FD
 139B  80 FD 80		   *	    cmp    ch, 080h
 139E  72 07		   *	    jb     @C00FD
 13A0  E9 FAEF		      C 			jmp	I_Effect_Return	;効果音からの復帰	※call → jmp
			      C 		.endif
			      C 	;演奏終了
			      C 	.else
 13A3  EB 02		   *	    jmp    @C0100
 13A5			   *@C00FB:
 13A5  8B F0		      C 		mov	si,ax		;ループ
			      C 	.endif
 13A7			   *@C0100:
 13A7			   *@C00FD:
 13A7  C3		      C 	ret				;
			      C 
			      C ;===============================================================|
			      C ;		Modration(MIDI ctrl:0x??)			|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 13A8			      C I_Com4d:				;
 13A8  E8 FB78		      C 	call	I_Read16		;
 13AB  89 45 5B		      C 	mov	ds:[di].WTD_ModDecay,ax	;
 13AE  E8 FB60		      C 	call	I_Read8			;
 13B1  88 45 5D		      C 	mov	ds:[di].WTD_ModLevel,al	;
			      C 
			      C ;ifndef	hyoka	;------------------------廉価版は無し
			      C ;	mov	cl,MIDI_Ctrl_Mod	;
			      C ;	mov	dx,offset CGROUP:I_Table_CtrlChgB
			      C ;	jmp	I_Table_Jump		;※call → jmp
			      C ;endif	;--------------------------------
			      C 
 13B4  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		NPRN(MIDI)					|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 13B6			      C I_Com4e:				;
 13B6  E8 FB58		      C 	call	I_Read8			;
			      C 
			      C ifndef	hyoka	;------------------------廉価版は無し
 13B9  B1 62		      C 	mov	cl,MIDI_Ctrl_NonRegLSB	;
 13BB  BA 1760 R	      C 	mov	dx,offset CGROUP:I_Table_CtrlChgB
 13BE  E8 01E7		      C 	call	I_Table_Jump		;
			      C endif	;--------------------------------
			      C 
 13C1  E8 FB4D		      C 	call	I_Read8			;
			      C 
			      C ifndef	hyoka	;------------------------廉価版は無し
 13C4  B1 63		      C 	mov	cl,MIDI_Ctrl_NonRegMSB	;
 13C6  BA 1760 R	      C 	mov	dx,offset CGROUP:I_Table_CtrlChgB
 13C9  E8 01DC		      C 	call	I_Table_Jump		;
			      C endif	;--------------------------------
			      C 
 13CC  E8 FB42		      C 	call	I_Read8			;
			      C 
			      C ifndef	hyoka	;------------------------廉価版は無し
 13CF  B1 06		      C 	mov	cl,MIDI_Ctrl_DataEntly	;
 13D1  BA 1760 R	      C 	mov	dx,offset CGROUP:I_Table_CtrlChgB
 13D4  E9 01D1		      C 	jmp	I_Table_Jump		;※call → jmp
			      C endif	;--------------------------------
			      C 
 13D7  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		ソヌーテート					|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 13D8			      C I_Com4f:				;
 13D8  E8 FB36		      C 	call	I_Read8			;
 13DB  C0 E0 06		      C 	shl	al,6			;
			      C 
			      C ifndef	hyoka	;------------------------廉価版は無し
 13DE  B1 42		      C 	mov	cl,MIDI_Ctrl_S		;
 13E0  BA 1760 R	      C 	mov	dx,offset CGROUP:I_Table_CtrlChgB
 13E3  E9 01C2		      C 	jmp	I_Table_Jump		;※call → jmp
			      C endif	;--------------------------------
			      C 
 13E6  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		PCM Mode / MIDI Damper				|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 13E8			      C I_Com50:				;
 13E8  E8 FB26		      C 	call	I_Read8			;
 13EB  BA 178C R	      C 	mov	dx,offset CGROUP:I_Table_Mode
 13EE  E9 01B7		      C 	jmp	I_Table_Jump		;設定
			      C ;	ret				;終了
			      C ;===============================================================|
			      C ;		Gate time 'Q'					|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 13F2			      C I_Com51:				;
 13F2  E8 FB1C		      C 	call	I_Read8			;
 13F5  88 45 55		      C 	mov	ds:[di].WTD_GateTime8,al
 13F8  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		Bress						|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 13FA			      C I_Com52:				;
 13FA  E8 FB14		      C 	call	I_Read8			;
			      C 
			      C ifndef	hyoka	;------------------------廉価版は無し
 13FD  B1 02		      C 	mov	cl,MIDI_Ctrl_Bress	;
 13FF  BA 1760 R	      C 	mov	dx,offset CGROUP:I_Table_CtrlChgB
 1402  E9 01A3		      C 	jmp	I_Table_Jump		;※call → jmp
			      C endif	;--------------------------------
			      C 
 1405  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		Soft						|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 1406			      C I_Com53:				;
 1406  E8 FB08		      C 	call	I_Read8			;
 1409  C0 E0 06		      C 	shl	al,6			;
			      C 
			      C ifndef	hyoka	;------------------------廉価版は無し
 140C  B1 43		      C 	mov	cl,MIDI_Ctrl_Soft	;
 140E  BA 1760 R	      C 	mov	dx,offset CGROUP:I_Table_CtrlChgB
 1411  E9 0194		      C 	jmp	I_Table_Jump		;※call → jmp
			      C endif	;--------------------------------
			      C 
 1414  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		Foot						|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 1416			      C I_Com54:				;
 1416  E8 FAF8		      C 	call	I_Read8			;
			      C 
			      C ifndef	hyoka	;------------------------廉価版は無し
 1419  B1 04		      C 	mov	cl,MIDI_Ctrl_Foot	;
 141B  BA 1760 R	      C 	mov	dx,offset CGROUP:I_Table_CtrlChgB
 141E  E9 0187		      C 	jmp	I_Table_Jump		;※call → jmp
			      C endif	;--------------------------------
			      C 
 1421  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		Gate Time(U)					|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 1422			      C I_Com55:				;
 1422  E8 FAEC		      C 	call	I_Read8			;
 1425  0C 80		      C 	or	al,080h			;
 1427  88 45 55		      C 	mov	ds:[di].WTD_GateTime8,al
 142A  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		Expression Detune				|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 142C			      C I_Com56:				;
 142C  E8 FAF4		      C 	call	I_Read16		;
 142F  89 45 42		      C 	mov	ds:[di].WTD_ExprDetune,ax
 1432  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		Balance						|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 1434			      C I_Com57:				;
 1434  E8 FADA		      C 	call	I_Read8			;
			      C 
			      C ifndef	hyoka	;------------------------廉価版は無し
 1437  B1 08		      C 	mov	cl,MIDI_Ctrl_Blance	;
 1439  BA 1760 R	      C 	mov	dx,offset CGROUP:I_Table_CtrlChgB
 143C  E9 0169		      C 	jmp	I_Table_Jump		;※call → jmp
			      C endif	;--------------------------------
			      C 
 143F  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		Excluesiv Send(MIDI)				|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 1440			      C I_Com58:				;
 1440  1E		      C 	push	ds			;
			      C 
 1441			      C I_Com58_Step1:				;
 1441  26: AC		      C 	lodsb	es:[si]
			      C 
			      C ifndef	hyoka
 1443  E8 065C		      C 	call	C_Send			;送信
			      C endif
			      C 
 1446  3C F7		      C 	cmp	al,0f7h			;0xF7だったら終わり。
 1448  75 F7		      C 	jnz	I_Com58_Step1		;
			      C 
			      C 	;ランニングステータスの初期化
 144A  3E: C6 86 03B0 00      C 	mov	ds:[bp].WTD_WorkAdd_System+WTD_Sys_RunningStatus,0
			      C 
 1450  1F		      C 	pop	ds			;
 1451  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		NULL 'Y'					|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 1452			      C I_Com59:				;
 1452  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		MIDI Send Data(MIDI)				|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 1454			      C I_Com5a:				;
			      C 
			      C ;	xor	cx,cx
			      C ;	mov	cl,es:[si]		;
			      C ;	inc	si			;
 1454  33 C0		      C 	xor	ax,ax
 1456  26: AC		      C 	lodsb	es:[si]
 1458  8B C8		      C 	mov	cx,ax
			      C 
			      C 	.repeat
 145A			   *@C0101:
 145A  26: AC		      C 		lodsb	es:[si]
			      C ifndef	hyoka
 145C  E8 0643		      C 		call	C_Send		;送信
			      C endif
			      C 	.untilcxz
 145F  E2 F9		   *	    loop   @C0101
			      C 
			      C 	;ランニングステータスの初期化
 1461  3E: C6 86 03B0 00      C 	mov	ds:[bp].WTD_WorkAdd_System+WTD_Sys_RunningStatus,0
			      C 
 1467  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		Loop Start					|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 1468			      C I_Com5b:				;
			      C 
			      C 	;読み込み
 1468  26: AC		      C 	lodsb	es:[si]
			      C 
			      C 	;設定
 146A  FE 45 10		      C 	inc	ds:[di].WTD_LoopCountPointer
			      C 
			      C 	;カウンタ書き込み
 146D  53		      C 	push	bx			;
 146E  33 DB		      C 	xor	bx,bx			;
 1470  8A 5D 10		      C 	mov	bl,ds:[di].WTD_LoopCountPointer
 1473  88 41 08		      C 	mov	ds:[di + bx].WTD_LoopCount,al
 1476  5B		      C 	pop	bx			;
			      C 
			      C 	;終了
 1477  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		NULL '\'					|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 1478			      C I_Com5c:				;
 1478  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		Loop End					|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 147A			      C I_Com5d:				;
			      C 
			      C 	;読み込み
			      C ;	mov	dx,es:[si]		;
			      C ;	inc	si			;
			      C ;	inc	si			;
 147A  26: AD		      C 	lodsw	es:[si]
			      C 
			      C 	;カウンタ・ディクリメント
 147C  53		      C 	push	bx			;
 147D  33 DB		      C 	xor	bx,bx			;
 147F  8A 5D 10		      C 	mov	bl,ds:[di].WTD_LoopCountPointer
 1482  FE 49 08		      C 	dec	ds:[di + bx].WTD_LoopCount	;Zeは立つ Cy変化無し
 1485  5B		      C 	pop	bx			;
			      C 	.if	(zero?)
 1486  75 05		   *	    jne    @C0102
 1488  FE 4D 10		      C 		dec	ds:[di].WTD_LoopCountPointer
			      C 	.else
 148B  EB 02		   *	    jmp    @C0104
 148D			   *@C0102:
 148D  8B F0		      C 		mov	si,ax		;
			      C 	.endif
 148F			   *@C0104:
			      C 
 148F  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		Tai (add lengs)					|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 1490			      C I_Com5e:				;
 1490  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		Key Trance					|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 1492			      C I_Com5f:				;
 1492  E8 FA7C		      C 	call	I_Read8			;
 1495  88 45 1E		      C 	mov	ds:[di].WTD_KeyShift,al	;
 1498  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		NULL '`'					|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 149A			      C I_Com60:				;
 149A  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		MML:a						|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 149C			      C I_Com61:				;
 149C  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		MML:b						|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 149E			      C I_Com62:				;
 149E  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		MML:c						|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 14A0			      C I_Com63:				;
 14A0  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		MML:d						|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 14A2			      C I_Com64:				;
 14A2  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		MML:e						|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 14A4			      C I_Com65:				;
 14A4  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		MML:f						|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 14A6			      C I_Com66:				;
 14A6  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		MML:g						|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 14A8			      C I_Com67:				;
 14A8  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		NULL 'h'					|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 14AA			      C I_Com68:				;
 14AA  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		NULL 'i'					|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 14AC			      C I_Com69:				;
 14AC  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		NULL 'j'					|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 14AE			      C I_Com6a:				;
 14AE  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		Velocity(MIDI)					|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 14B0			      C I_Com6b:				;
 14B0  E8 FA5E		      C 	call	I_Read8			;
 14B3  88 45 3F		      C 	mov	ds:[di].WTD_Velocity,al	;
 14B6  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		lengs						|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 14B8			      C I_Com6c:				;
 14B8  33 C0		      C 	xor	ax,ax			;
 14BA  26: AC		      C 	lodsb	es:[si]
			      C 	.if	(al==0FFh)
 14BC  3C FF		   *	    cmp    al, 0FFh
 14BE  75 02		   *	    jne    @C0105
 14C0  26: AD		      C 		lodsw	es:[si]
			      C 	.endif
 14C2			   *@C0105:
 14C2  89 45 18		      C 	mov	ds:[di].WTD_LengDefault,ax
 14C5  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		LFO						|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 14C6			      C I_Com6d:				;
 14C6  53		      C 	push	bx			;
			      C 
 14C7  26: AC		      C 	lodsb	es:[si]
			      C 
			      C 	.if	(al==0)
 14C9  0A C0		   *	    or	al, al
 14CB  75 05		   *	    jne    @C0107
 14CD  8D 5D 30		      C 		lea	bx,[di + WTD_BendLFO]
			      C 	.elseif	(al==2)
 14D0  EB 0C		   *	    jmp    @C0109
 14D2			   *@C0107:
 14D2  3C 02		   *	    cmp    al, 002h
 14D4  75 05		   *	    jne    @C010A
 14D6  8D 5D 64		      C 		lea	bx,[di + WTD_PanLFO]
			      C 	.else	;(al==1)	デフォルトはEPにしておく
 14D9  EB 03		   *	    jmp    @C010C
 14DB			   *@C010A:
 14DB  8D 5D 44		      C 		lea	bx,[di + WTD_ExprLFO]
			      C 	.endif
 14DE			   *@C010C:
 14DE			   *@C0109:
			      C 
 14DE  E8 FA30		      C 	call	I_Read8			;DR
 14E1  88 07		      C 	mov	ds:[bx].WTD_ChLfo_DecayRate,al
			      C 
 14E3  E8 FA2B		      C 	call	I_Read8			;SR
 14E6  88 47 01		      C 	mov	ds:[bx].WTD_ChLfo_SpeedRate,al
			      C 
 14E9  E8 FA37		      C 	call	I_Read16		;Lv
 14EC  89 47 02		      C 	mov	ds:[bx].WTD_ChLfo_Level,ax
			      C 
 14EF  E8 FA1F		      C 	call	I_Read8			;Cnt
 14F2  88 47 04		      C 	mov	ds:[bx].WTD_ChLfo_Count,al
			      C 
 14F5  5B		      C 	pop	bx			;
 14F6  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		Noise mode					|
			      C ;---------------------------------------------------------------|
			      C ;	0x00〜0x07	Set the noise mode 			|
			      C ;	(0〜7)		bit 0-2 : Noise mode (0〜7)		|
			      C ;			bit 7   : Low				|
			      C ;	0x80〜0xFF	PUTI noise				|
			      C ;	(128〜255)	bit 0-1 : Right  Volume			|
			      C ;			bit 2-3 : Left   Volume			|
			      C ;			bit 4-5 : Master Volume	(WSC only)	|
			      C ;			bit 7   : High				|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 14F8			      C I_Com6e:				;
 14F8  E8 FA16		      C 	call	I_Read8			;al ← 引数
			      C 
 14FB  88 45 12		      C 	mov	ds:[di].WTD_NoiseMode,al
 14FE  0C 18		      C 	or	al,18h			;
 1500  B4 1F		      C 	mov	ah,1fh			;
 1502  E9 03BD		      C 	jmp	SP_Set_Noise		;※call → jmp
			      C 
 1505  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		Octave						|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 1506			      C I_Com6f:				;
 1506  E8 FA08		      C 	call	I_Read8			;
 1509  88 45 54		      C 	mov	ds:[di].WTD_Octave,al	;
 150C  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		Panpot						|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 150E			      C I_Com70:				;
 150E  E8 FA00		      C 	call	I_Read8			;
 1511  88 45 61		      C 	mov	ds:[di].WTD_Pan,al	;
 1514  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		Gate time 'q'					|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 1516			      C I_Com71:				;
 1516  E8 FA0A		      C 	call	I_Read16		;
 1519  89 45 56		      C 	mov	ds:[di].WTD_GateTimeStepLast,ax
 151C  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		mml:r						|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 151E			      C I_Com72:				;
 151E  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		Sweep 						|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 1520			      C I_Com73:				;
 1520  E8 F9EE		      C 	call	I_Read8			;
 1523  8A E0		      C 	mov	ah,al			;
 1525  E8 F9E9		      C 	call	I_Read8			;
 1528  86 C4		      C 	xchg	al,ah			;
			      C 
			      C 	;PCM Ch2であるか？
			      C 	.if	(ds:[di].WTD_Channel==82h)
 152A  80 7D 05 82	   *	    cmp    ds : [di] . WTD_Channel, 082h
 152E  75 09		   *	    jne    @C010D
 1530  88 45 12		      C 		mov	ds:[di].WTD_SweepLevel,al
 1533  88 65 13		      C 		mov	ds:[di].WTD_SweepTime,ah
 1536  E9 0367		      C 		jmp	SP_Set_Sweep	;Sweep Modeの設定	※call → jmp
			      C 	.endif
 1539			   *@C010D:
 1539  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		tempo						|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 153A			      C I_Com74:				;
 153A  E8 F9E6		      C 	call	I_Read16		;データは読む。
			      C 
			      C 	;効果音の場合、処理無し。
			      C 	.if	!(ds:[di].WTD_FlagControl&WTD_Ctrl_Effect)
 153D  F7 05 4000	   *	    test   ds : [di] . WTD_FlagControl, WTD_Ctrl_Effect
 1541  75 11		   *	    jne    @C010F
 1543  3E: 89 86 03A4	      C 		mov	ds:[bp].WTD_WorkAdd_System+WTD_Sys_Tempo,ax
			      C 		.if	!((ds:[bp].WTD_WorkAdd_System+WTD_Sys_Flag)&WTD_Sys_TimerEmulate)
 1548  3E: F7 86 0380
       0080		   *	    test   ds : [bp] . WTD_WorkAdd_System + WTD_Sys_Flag, WTD_Sys_TimerEmulate
 154F  75 03		   *	    jne    @C0111
 1551  E9 02BA		      C 			jmp	T_Set_Frection	;タイマーセット	※call → jmp
			      C 		.endif
			      C 	.endif
 1554			   *@C0111:
 1554			   *@C010F:
			      C 
 1554  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		Gate time 'u'					|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 1556			      C I_Com75:				;
 1556  E8 F9CA		      C 	call	I_Read16		;
 1559  89 45 58		      C 	mov	ds:[di].WTD_GateTimeStepFirst,ax
 155C  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		Volume						|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 155E			      C I_Com76:				;
 155E  E8 F9B0		      C 	call	I_Read8			;
 1561  88 45 41		      C 	mov	ds:[di].WTD_Expr,al	;
 1564  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		NULL 'w'					|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 1566			      C I_Com77:				;
 1566  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		x						|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 1568			      C I_Com78:				;
 1568  E8 F9A6		      C 	call	I_Read8			;
 156B  88 45 5A		      C 	mov	ds:[di].WTD_VolumeUpDown,al
 156E  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		Control Change(MIDI)				|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 1570			      C I_Com79:				;
			      C 
 1570  E8 F99E		      C 	call	I_Read8			;
 1573  8A C8		      C 	mov	cl,al			;
 1575  E8 F999		      C 	call	I_Read8			;
			      C 
 1578  BA 1760 R	      C 	mov	dx,offset CGROUP:I_Table_CtrlChgB
 157B  E8 002A		      C 	call	I_Table_Jump		;
			      C 
 157E  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		NULL 'z'					|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 1580			      C I_Com7a:				;
 1580  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		Key Trance (major / minor)			|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 1582			      C I_Com7b:				;
 1582  26: AC		      C 	lodsb	es:[si]
			      C 
			      C 	.if	(al!=0)
 1584  0A C0		   *	    or	al, al
 1586  74 10		   *	    je     @C0113
 1588  D0 C0		      C 		rol	al,1		;
 158A  D0 E8		      C 		shr	al,1		;Bit 7 Reset & Bit 7 -> Cy Flag
			      C 		.if	(!carry?)
 158C  72 05		   *	    jb     @C0115
 158E  88 45 03		      C 			mov	ds:[di].WTD_FlagSharp,al
			      C 		.else
 1591  EB 0B		   *	    jmp    @C0117
 1593			   *@C0115:
 1593  88 45 04		      C 			mov	ds:[di].WTD_FlagFlat,al	;
			      C 		.endif
			      C 	.else
 1596  EB 06		   *	    jmp    @C0118
 1598			   *@C0113:
 1598  88 45 03		      C 		mov	ds:[di].WTD_FlagSharp,al
 159B  88 45 04		      C 		mov	ds:[di].WTD_FlagFlat,al
			      C 	.endif
 159E			   *@C0118:
 159E			   *@C0117:
			      C 
 159E  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		NULL '|'					|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 15A0			      C I_Com7c:				;
 15A0  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		NULL '}'					|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 15A2			      C I_Com7d:				;
 15A2  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		NULL '~'					|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 15A4			      C I_Com7e:				;
 15A4  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;		NULL ?						|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 15A6			      C I_Com7f:				;
 15A6  C3		      C 	ret				;
			      C 
				include	wtd_idev.asm			;割り込み　デバイス制御部
			      C ;=======================================================================|
			      C ;									|
			      C ;		Wander Swan Total Sound Driver				|
			      C ;				Interrupt device accsess program	|
			      C ;									|
			      C ;					Programmed by			|
			      C ;						A.Watanabe		|
			      C ;									|
			      C ;=======================================================================|
			      C ;****************************************************************
			      C ;*								*
			      C ;*			割り込みルーチン			*
			      C ;*				演奏・効果音制御部		*
			      C ;*				デバイス出力			*
			      C ;*								*
			      C ;****************************************************************
			      C ;===============================================================|
			      C ;		デバイスによるルーチンの分岐			|
			      C ;===============================================================|
			      C ;	●引数							|
			      C ;		ds:bp	ワークベースアドレス		引数	|
			      C ;		ds:bx	共有構造体アドレス		引数	|
			      C ;		ds:di	個別構造体			引数	|
			      C ;		es;si	演奏アドレス			引数	|
			      C ;		dx	ジャンプテーブルのアドレス	引数	|
			      C ;		cx	汎用				(引数)	|
			      C ;	●レジスタ使用						|
			      C ;		ax	汎用（主に計算用）			|
			      C ;								|
			      C ;	ルーチンに渡す引数					|
			      C ;		cl	汎用（主にカウンタ用）			|
			      C ;		ch	現在のチャンネル			|
			      C ;		dx						|
			      C ;		ss:[bp + 04h]	呼び出し元のCXレジスタ。	|
			      C ;		ss:[bp + 06h]	呼び出し元のDXレジスタ。	|
			      C ;		ss:[bp + 08h]	呼び出し元のBPレジスタ。	|
			      C ;		　DXレジスタを使う場合、ルーチンで以下の処理が必要。
			      C ;		push	bp					|
			      C ;		mov	bp,sp					|
			      C ;		（中略）					|
			      C ;		pop	bp					|
			      C ;		ret						|
			      C ;								|
			      C ;	デバイスアクセス部で、bpレジスタを使用しているので、	|
			      C ;	注意する。						|
			      C ;								|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 15A8			      C I_Table_Jump:				;
 15A8  55		      C 	push	bp			;
 15A9  52		      C 	push	dx			;
 15AA  51		      C 	push	cx			;
 15AB  53		      C 	push	bx			;
 15AC  50		      C 	push	ax			;レジスタ保存
			      C 
			      C ;---------------------------------------------------------------
			      C 
			      C 	;ジャンプテーブルアドレスの設定
 15AD  8B DA		      C 	mov	bx,dx			;bx←dx(Jump table address)
			      C 	;チャンネル・音源情報の取得
			      C ;	xor	ax,ax			;後でandでbit resetしてる。
 15AF  8A 45 05		      C 	mov	al,ds:[di].WTD_Channel	;ax←Channel
			      C 
			      C 	;チャンネルと音源情報の個別化
			      C 	;ch←チャンネル情報
 15B2  8A E8		      C 	mov	ch,al			;
 15B4  80 E5 0F		      C 	and	ch,0fh			;ch←チャンネル(音源情報無し)
			      C 	;ax←音源情報×２
 15B7  C1 E8 06		      C 	shr	ax,6			;ax←音源タイプ(負論理)
 15BA  F7 D0		      C 	not	ax			;ax←正論理にする。
 15BC  83 E0 02		      C 	and	ax,02h			;ax←音源タイプ以外を消す。
			      C 	;ジャンプアドレス格納アドレスの取得
 15BF  03 D8		      C 	add	bx,ax			;bx←音源タイプを加算
			      C 
			      C 	;ジャンプアドレスの取得
 15C1  2E: 8B 17	      C 	mov	dx,word ptr cs:[bx]	;
			      C 
			      C ;---------------------------------------------------------------
			      C 
			      C 	;不必要なレジスタの復帰
 15C4  58		      C 	pop	ax			;レジスタ復帰
 15C5  5B		      C 	pop	bx			;
			      C 	;ルーチン呼び出し
 15C6  FF D2		      C 	call	dx			;呼び出し
			      C 	;残ったレジスタの復帰
 15C8  59		      C 	pop	cx			;
 15C9  5A		      C 	pop	dx			;残りのレジスタ復帰
 15CA  5D		      C 	pop	bp			;
			      C 
			      C 	;終了
 15CB  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;			KeyOn					|
			      C ;===============================================================|
			      C ;	引数							|
			      C ;		al	キー・コード				|
			      C ;	返値							|
			      C ;		無し						|
			      C ;	処理							|
			      C ;		デバイスをKeyOnする。				|
			      C ;		休符の場合は、このルーチンを呼ばない。		|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
			      C ;-------------[	  Table   ]-------------
 15CC			      C I_Table_KeyOn:				
 15CC  15D0 R		      C 	dw	I_SP_KeyOn		
 15CE  15F2 R		      C 	dw	I_SM_KeyOn		
			      C ;-------------[	WS内蔵PCM ]-------------
			      C 	even				;偶数アドレス配置
 15D0			      C I_SP_KeyOn:				;
 15D0  53		      C 	push	bx			;
 15D1  50		      C 	push	ax			;レジスタ保存
			      C 
 15D2  88 45 20		      C 	mov	ds:[di].WTD_KeySet,al	;今回のデータを書き込み
			      C 
			      C 	;キーコードの分解（キー，オクターブ）
 15D5  32 E4		      C 	xor	ah,ah				;ax←KeyCode
 15D7  B1 0C		      C 	mov	cl,12				;
 15D9  F6 F9		      C 	idiv	cl				;ah←Key(余) / al←Octave(商)
			      C 	;オクターブの書き込み
 15DB  FE C8		      C 	dec	al				;オクターブ補正(Drv値)
 15DD  88 45 53		      C 	mov	ds:[di].WTD_OctaveSet,al	;オクターブ書き込み
			      C 
			      C 	;テーブル読み込み（ベンド変換）
			      C ;	mov	al,ah				;
			      C ;	mov	ah,0				;ax←Key
			      C ;	shl	ax,1				;
			      C ;	mov	bx,offset CGROUP:I_Frection_Table
			      C ;	add	bx,ax				;
			      C ;	mov	ax,cs:[bx]			;ax←Pitch Bend
			      C 
 15E0  33 DB		      C 	xor	bx,bx
 15E2  8A DC		      C 	mov	bl,ah
 15E4  D1 E3		      C 	shl	bx,1
 15E6  2E: 8B 87 096A R	      C 	mov	ax,cs:[bx + CGROUP:I_Frection_Table]
			      C 
			      C 	;ベンドの書き込み
 15EB  89 45 2C		      C 	mov	ds:[di].WTD_Frection,ax		;Bendとして処理
			      C 	;（ハードウェアにKeyOnは無い。）
			      C 
 15EE  58		      C 	pop	ax			;レジスタ復帰
 15EF  5B		      C 	pop	bx			;
 15F0  C3		      C 	ret				;
			      C ;-------------[	外部MIDI  ]-------------
			      C 	even				;偶数アドレス配置
 15F2			      C I_SM_KeyOn:				;
			      C ifndef	hyoka	;------------------------廉価版は無し
 15F2  53		      C 	push	bx			;
 15F3  50		      C 	push	ax			;レジスタ保存
			      C 
			      C 	;実際に出力したオクターブ。
			      C 	;（MIDI制御では要らないけど、ビュアー用に計算しておく。）
			      C 	;レジスタ保存
 15F4  50		      C 	push	ax				;
 15F5  51		      C 	push	cx				;
			      C 	;キーコードの分解（キー，オクターブ）
 15F6  32 E4		      C 	xor	ah,ah				;ax←KeyCode
 15F8  B1 0C		      C 	mov	cl,12				;
 15FA  F6 F9		      C 	idiv	cl				;ah←Key(余) / al←Octave(商)
			      C 	;オクターブの書き込み
 15FC  FE C8		      C 	dec	al				;
 15FE  88 45 53		      C 	mov	ds:[di].WTD_OctaveSet,al	;オクターブ書き込み
			      C 	;レジスタ復帰
 1601  59		      C 	pop	cx				;
 1602  58		      C 	pop	ax				;
			      C 
			      C 	;バッファ書き込み
 1603  33 DB		      C 	xor	bx,bx				;
 1605  8A 5D 28		      C 	mov	bl,ds:[di].WTD_KeySetPointer	;ポインタ読み込み
 1608  8A 41 20		      C 	mov	al,ds:[di+bx].WTD_KeySet	;バッファ読み込み
			      C 	.if	(al!=0ffh)			;内容は空？
 160B  3C FF		   *	    cmp    al, 0FFh
 160D  74 03		   *	    je     @C0119
 160F  E8 03AC		      C 		call	SM_KeyOff		;空ということにする。
			      C 	.endif
 1612			   *@C0119:
 1612  58		      C 	pop	ax				;
 1613  50		      C 	push	ax				;ax←引数を復帰
 1614  88 41 20		      C 	mov	ds:[di+bx].WTD_KeySet,al	;今回のデータを書き込み
 1617  43		      C 	inc	bx				;ポインタインクリメント
 1618  83 E3 07		      C 	and	bx,07h				;
 161B  88 5D 28		      C 	mov	ds:[di].WTD_KeySetPointer,bl	;ポインタ保存
			      C 
			      C 	;送信
 161E  8A 65 3F		      C 	mov	ah,ds:[di].WTD_Velocity	;ah←ベロシティー
			      C 	.if	(ds:[di].WTD_FlagControl&WTD_Ctrl_Acsent)
 1621  F7 05 0040	   *	    test   ds : [di] . WTD_FlagControl, WTD_Ctrl_Acsent
 1625  74 06		   *	    je     @C011B
 1627  8A 65 29		      C 		mov	ah,ds:[di].WTD_AcsentVelocity	;もしアクセントだったら、それ用。
 162A  83 25 BF		      C 		and	ds:[di].WTD_FlagControl,WTD_Ctrl_AcsentR
			      C 	.endif
 162D			   *@C011B:
 162D  E8 0390		      C 	call	SM_KeyOn		;デバイス出力。
			      C 
 1630  58		      C 	pop	ax			;レジスタ復帰
 1631  5B		      C 	pop	bx			;
			      C endif	;--------------------------------
 1632  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;			KeyOff					|
			      C ;===============================================================|
			      C ;	引数							|
			      C ;		無し						|
			      C ;	返値							|
			      C ;		無し						|
			      C ;	処理							|
			      C ;		デバイスをKeyOffする。				|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
			      C ;-------------[	  Table   ]-------------
 1634			      C I_Table_KeyOff:				
 1634  1638 R		      C 	dw	I_SP_KeyOff		
 1636  163E R		      C 	dw	I_SM_KeyOff		
			      C ;-------------[	WS内蔵PCM ]-------------
			      C 	even				;偶数アドレス配置
 1638			      C I_SP_KeyOff:				;
 1638  C6 45 20 FF	      C 	mov	ds:[di].WTD_KeySet,0ffh	;空データの書き込み
 163C  C3		      C 	ret				;
			      C ;-------------[	外部MIDI  ]-------------
			      C 	even				;偶数アドレス配置
 163E			      C I_SM_KeyOff:				;
			      C ifndef	hyoka	;------------------------廉価版は無し
 163E  53		      C 	push	bx			;
 163F  50		      C 	push	ax			;レジスタ保存
			      C 
			      C 	;バッファに書かれている内容を全てkeyOffし、空にする。
 1640  B9 0008		      C 	mov	cx,8				;８回ループ
 1643  33 DB		      C 	xor	bx,bx				;
			      C 	.repeat
 1645			   *@C011D:
 1645  8A 41 20		      C 		mov	al,ds:[di+bx].WTD_KeySet	;バッファ読み込み
 1648  C6 41 20 FF	      C 		mov	ds:[di+bx].WTD_KeySet,0ffh	;空データの書き込み
 164C  43		      C 		inc	bx				;
			      C 		.if	(al!=0ffh)			;
 164D  3C FF		   *	    cmp    al, 0FFh
 164F  74 03		   *	    je     @C011E
 1651  E8 036A		      C 			call	SM_KeyOff		;KeyOffの送信
			      C 		.endif
			      C 	.untilcxz
 1654			   *@C011E:
 1654  E2 EF		   *	    loop   @C011D
			      C ;
			      C ;	　ポインタは面倒だから戻さない。
			      C ;	どうせ、クルクル回っているから、処理時間が無駄。
			      C ;
 1656  58		      C 	pop	ax			;レジスタ復帰
 1657  5B		      C 	pop	bx			;
			      C endif	;--------------------------------
 1658  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;			Volume					|
			      C ;===============================================================|
			      C ;	引数							|
			      C ;		al←ボリューム					|
			      C ;	返値							|
			      C ;		無し						|
			      C ;	処理							|
			      C ;		音量を出力する。				|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
			      C ;-------------[	  Table   ]-------------
 165A			      C I_Table_Volume:				
 165A  165E R		      C 	dw	I_SP_Volume		
 165C  16DC R		      C 	dw	I_SM_Volume		
			      C ;-------------[	WS内蔵PCM ]-------------
			      C 	even				;偶数アドレス配置
 165E			      C I_SP_Volume	proc	near	uses	ax bx
			      C 
 165E  50		   *	    push   ax
 165F  53		   *	    push   bx
 1660  51		      C 	push	cx			;chを保存
			      C 
			      C 	;音量保存。
 1661  88 45 40		      C 	mov	ds:[di].WTD_ExprSet,al	;
 1664  98		      C 	cbw				;ax←al
 1665  D1 E0		      C 	shl	ax,1			;(Range:0〜255)
 1667  8B C8		      C 	mov	cx,ax			;cx←音量
			      C 
			      C 	;パンポット読み込み
 1669  8A 45 60		      C 	mov	al,ds:[di].WTD_PanSet		;
			      C 	.if	!(ds:[di].WTD_Pan&080h)		;
 166C  F6 45 61 80	   *	    test   ds : [di] . WTD_Pan, 080h
 1670  75 1F		   *	    jne    @C0120
			      C 
			      C 		;パンポットは、リニアに変化。
 1672  BA 007F		      C 		mov	dx,007fh			;
 1675  23 C2		      C 		and	ax,dx				;
 1677  2B D0		      C 		sub	dx,ax				;
 1679  C1 E0 02		      C 		shl	ax,2				;ax←右の音量
 167C  C1 E2 02		      C 		shl	dx,2				;dx←左の音量
			      C 
			      C 		.if	(ah!=0)				;
 167F  0A E4		   *	    or	ah, ah
 1681  74 03		   *	    je     @C0122
 1683  B8 00FF		      C 			mov	ax,00ffh		;右のLimit処理
			      C 		.endif					;
			      C 
			      C 		.if	(dh!=0)				;
 1686			   *@C0122:
 1686  0A F6		   *	    or	dh, dh
 1688  74 03		   *	    je     @C0124
 168A  BA 00FF		      C 			mov	dx,00ffh		;左のLimit処理
			      C 		.endif					;
			      C 
 168D			   *@C0124:
 168D  8A E2		      C 		mov	ah,dl				;al←右のレベル
			      C 	.else
 168F  EB 13		   *	    jmp    @C0126
 1691			   *@C0120:
			      C 
			      C 		;パンポットの次元を[dB]に変換
 1691  D0 E0		      C 		shl	al,1				;
 1693  B4 FF		      C 		mov	ah,0ffh				;al←右のレベル
 1695  2A E0		      C 		sub	ah,al				;ah←左のレベル
			      C 
 1697  1E		      C 		push	ds				;
 1698  0E		      C 		push	cs				;
 1699  1F		      C 		pop	ds				;
 169A  BB 086A R	      C 		mov	bx,offset CGROUP:I_Volume_Table	;
 169D  86 C4		      C 		xchg	al,ah				;
 169F  D7		      C 		xlat					;
 16A0  86 C4		      C 		xchg	al,ah				;ah←左のレベル
 16A2  D7		      C 		xlat					;al←右のレベル
 16A3  1F		      C 		pop	ds				;
			      C 
			      C 	.endif
 16A4			   *@C0126:
			      C 
			      C 
			      C 
			      C 	;パンポットの合成
 16A4  91		      C 	xchg	cx,ax		;cx←左右の音量
 16A5  50		      C 	push	ax		;ax←音量
			      C 
			      C 	;左演算
 16A6  40		      C 	inc	ax			;ax←音量+1
 16A7  51		      C 	push	cx			;
 16A8  8A CD		      C 	mov	cl,ch			;
 16AA  32 ED		      C 	xor	ch,ch			;
 16AC  41		      C 	inc	cx			;cx←左のレベル+1
 16AD  F7 E1		      C 	mul	cx			;
 16AF  48		      C 	dec	ax			;
 16B0  59		      C 	pop	cx			;
 16B1  8A EC		      C 	mov	ch,ah			;ch←左の音量
			      C 
 16B3  58		      C 	pop	ax
			      C 
			      C 	;右演算
 16B4  40		      C 	inc	ax			;ax←音量+1
 16B5  51		      C 	push	cx			;
 16B6  32 ED		      C 	xor	ch,ch			;
 16B8  41		      C 	inc	cx			;cx←右のレベル+1
 16B9  F7 E1		      C 	mul	cx			;
 16BB  48		      C 	dec	ax			;
 16BC  59		      C 	pop	cx			;
 16BD  8A CC		      C 	mov	cl,ah			;cl←右の音量
			      C 
			      C 	;合成
 16BF  80 E5 F0		      C 	and	ch,0f0h			;上位4bitのみ
 16C2  80 E1 F0		      C 	and	cl,0f0h			;上位4bitのみ
 16C5  C0 E9 04		      C 	shr	cl,4			;
 16C8  0A E9		      C 	or	ch,cl			;
 16CA  8A C5		      C 	mov	al,ch			;al←左右の音量
			      C 
 16CC  59		      C 	pop	cx			;チャンネル情報を戻す。
			      C 
			      C 	.if	(ds:[di].WTD_ExprPanSet!=al)	;前回と同じだったらいらない。
 16CD  38 45 3F		   *	    cmp    ds : [di] . WTD_ExprPanSet, al
 16D0  74 06		   *	    je     @C0127
 16D2  88 45 3F		      C 		mov	ds:[di].WTD_ExprPanSet,al
 16D5  E8 01A0		      C 		call	SP_Set_Volume
			      C 	.endif
 16D8			   *@C0127:
			      C 
			      C 	ret				;
 16D8  5B		   *	    pop    bx
 16D9  58		   *	    pop    ax
 16DA  C3		   *	    ret    00000h
 16DB			      C I_SP_Volume	endp
			      C ;-------------[	外部MIDI  ]-------------
			      C 	even				;偶数アドレス配置
 16DC			      C I_SM_Volume:				;
			      C ifndef	hyoka	;------------------------廉価版は無し
			      C 	.if	(ds:[di].WTD_ExprSet!=al)	;前回と同じだったらいらない。
 16DC  38 45 40		   *	    cmp    ds : [di] . WTD_ExprSet, al
 16DF  74 0A		   *	    je     @C0129
 16E1  51		      C 		push	cx			;レジスタ保存
 16E2  88 45 40		      C 		mov	ds:[di].WTD_ExprSet,al	;
 16E5  B1 0B		      C 		mov	cl,MIDI_Ctrl_Expression	;
 16E7  E8 02FA		      C 		call	SM_ControlByte		;
 16EA  59		      C 		pop	cx			;レジスタ復帰
			      C 	.endif
 16EB			   *@C0129:
			      C endif	;--------------------------------
 16EB  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;			Frection(Pitch　Bend)			|
			      C ;===============================================================|
			      C ;	引数							|
			      C ;		ax←Bend(Frection)				|
			      C ;	返値							|
			      C ;		無し						|
			      C ;	処理							|
			      C ;		周波数／ピッチベンドを出力する。		|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
			      C ;-------------[	  Table   ]-------------
 16EC			      C I_Table_Frection:			
 16EC  16F0 R		      C 	dw	I_SP_Frection		
 16EE  1714 R		      C 	dw	I_SM_Frection		
			      C ;-------------[	WS内蔵PCM ]-------------
			      C 	even				;偶数アドレス配置
			      C ;DeviceOut = 2048 - (Table / 2^(3 + Octave))
 16F0			      C I_SP_Frection:				;
 16F0  50		      C 	push	ax			;レジスタ保存
 16F1  53		      C 	push	bx			;
			      C 
			      C 	;オクターブ処理
 16F2  8A 4D 53		      C 	mov	cl,ds:[di].WTD_OctaveSet
 16F5  80 C1 03		      C 	add	cl,3			;
 16F8  D3 E8		      C 	shr	ax,cl			;
 16FA  8B D8		      C 	mov	bx,ax			;
 16FC  B8 0800		      C 	mov	ax,2048			;
 16FF  2B C3		      C 	sub	ax,bx			;
			      C 	.if	(Carry?)		;
 1701  73 02		   *	    jae    @C012B
 1703  33 C0		      C 		xor	ax,ax		;オーバーフローしたら、０にする。
			      C 	.endif
 1705			   *@C012B:
			      C 
			      C 	;出力
			      C 	.if	(ds:[di].WTD_FrectionSet!=ax)	;前回と同じだったらいらない。
 1705  39 45 2A		   *	    cmp    ds : [di] . WTD_BendSet, ax
 1708  74 06		   *	    je     @C012D
 170A  89 45 2A		      C 		mov	ds:[di].WTD_FrectionSet,ax
 170D  E8 0140		      C 		call	SP_Set_Frection		;周波数の設定
			      C 	.endif
 1710			   *@C012D:
			      C 
 1710  5B		      C 	pop	bx			;
 1711  58		      C 	pop	ax			;レジスタ復帰
 1712  C3		      C 	ret				;
			      C ;-------------[	外部MIDI  ]-------------
			      C 	even				;偶数アドレス配置
 1714			      C I_SM_Frection:				;
			      C ifndef	hyoka	;------------------------廉価版は無し
			      C 	.if	(ds:[di].WTD_BendSet!=ax)	;前回と同じだったらいらない。
 1714  39 45 2A		   *	    cmp    ds : [di] . WTD_BendSet, ax
 1717  74 06		   *	    je     @C012F
 1719  89 45 2A		      C 		mov	ds:[di].WTD_BendSet,ax	;
 171C  E8 0347		      C 		call	SM_PitchBend		;
			      C 	.endif
 171F			   *@C012F:
			      C endif	;--------------------------------
 171F  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;			Voice & Program				|
			      C ;===============================================================|
			      C ;	引数							|
			      C ;		al←音色番号					|
			      C ;	返値							|
			      C ;		無し						|
			      C ;	処理							|
			      C ;		音色を転送する。				|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
			      C ;-------------[	  Table   ]-------------
 1720			      C I_Table_Voice:				
 1720  1724 R		      C 	dw	I_SP_Voice		
 1722  1740 R		      C 	dw	I_SM_Voice		
			      C ;-------------[	WS内蔵PCM ]-------------
			      C 	even				;偶数アドレス配置
 1724			      C I_SP_Voice:				;
			      C 	.if	(ds:[di].WTD_Voice!=al)	;前回と同じだったらいらない。
 1724  38 45 11		   *	    cmp    ds : [di] . WTD_Program, al
 1727  74 15		   *	    je     @C0131
			      C 
 1729  50		      C 		push	ax			;
 172A  56		      C 		push	si			;レジスタ保存
			      C 
 172B  88 45 11		      C 		mov	ds:[di].WTD_Voice,al	;音色番号保存
 172E  32 E4		      C 		xor	ah,ah			;
 1730  C1 E0 04		      C 		shl	ax,4			;ax←al×16
 1733  8D B6 0100	      C 		lea	si,[bp + WTD_WorkAdd_Wave]
 1737  03 F0		      C 		add	si,ax			;ds:si←音色のあるアドレス
			      C 
 1739  E8 01C6		      C 		call	SP_Set_Voice		;音色セット
			      C 
 173C  5E		      C 		pop	si			;レジスタ復帰
 173D  58		      C 		pop	ax			;
			      C 
			      C 	.endif
 173E			   *@C0131:
 173E  C3		      C 	ret				;
			      C ;-------------[	外部MIDI  ]-------------
			      C 	even				;偶数アドレス配置
 1740			      C I_SM_Voice:				;
			      C ifndef	hyoka	;------------------------廉価版は無し
			      C 	.if	(ds:[di].WTD_Program!=al)	;前回と同じだったらいらない。
 1740  38 45 11		   *	    cmp    ds : [di] . WTD_Program, al
 1743  74 06		   *	    je     @C0133
 1745  88 45 11		      C 		mov	ds:[di].WTD_Program,al	;
 1748  E8 02D9		      C 		call	SM_Program		;
			      C 	.endif
 174B			   *@C0133:
			      C endif	;-------------------------------
 174B  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;			Poly Key Pressior			|
			      C ;===============================================================|
			      C ;	引数							|
			      C ;		al←Key						|
			      C ;		ah←pressior					|
			      C ;	返値							|
			      C ;		無し						|
			      C ;	処理							|
			      C ;		ポリフォニック　キー　プレッシャーの送信	|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
			      C ;-------------[	  Table   ]-------------
 174C			      C I_Table_PolyKeyPress:			
 174C  1750 R		      C 	dw	I_SP_PolyKeyPress	
 174E  1752 R		      C 	dw	I_SM_PolyKeyPress	
			      C ;-------------[	WS内蔵PCM ]-------------
			      C 	even				;偶数アドレス配置
 1750			      C I_SP_PolyKeyPress:			;
			      C ;	処理無し			;
 1750  C3		      C 	ret				;
			      C ;-------------[	外部MIDI  ]-------------
			      C 	even				;偶数アドレス配置
 1752			      C I_SM_PolyKeyPress:			;
			      C ifndef	hyoka	;------------------------廉価版は無し
 1752  E8 027D		      C 	call	SM_KeyPress		;
			      C endif	;--------------------------------
 1755  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;			Poly Channel Pressior			|
			      C ;===============================================================|
			      C ;	引数							|
			      C ;		al←pressior					|
			      C ;	返値							|
			      C ;		無し						|
			      C ;	処理							|
			      C ;		ポリフォニック　キー　プレッシャーの送信	|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
			      C ;-------------[	  Table   ]-------------
 1756			      C I_Table_PolyChPress:			
 1756  175A R		      C 	dw	I_SP_PolyChPress	
 1758  175C R		      C 	dw	I_SM_PolyChPress	
			      C ;-------------[	WS内蔵PCM ]-------------
			      C 	even				;偶数アドレス配置
 175A			      C I_SP_PolyChPress:			;
			      C ;	処理無し			;
 175A  C3		      C 	ret				;
			      C ;-------------[	外部MIDI  ]-------------
			      C 	even				;偶数アドレス配置
 175C			      C I_SM_PolyChPress:			;
			      C ifndef	hyoka	;------------------------廉価版は無し
 175C  E8 02F1		      C 	call	SM_ChPress		;
			      C endif	;--------------------------------
 175F  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;			Control Change Byte			|
			      C ;===============================================================|
			      C ;	引数							|
			      C ;		al←データ					|
			      C ;		cl←機能番号					|
			      C ;	返値							|
			      C ;		無し						|
			      C ;	処理							|
			      C ;		コントロールチェンジの送信			|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
			      C ;-------------[	  Table   ]-------------
 1760			      C I_Table_CtrlChgB:			
 1760  1764 R		      C 	dw	I_SP_CtrlChgB		
 1762  1766 R		      C 	dw	I_SM_CtrlChgB		
			      C ;-------------[	WS内蔵PCM ]-------------
			      C 	even				;偶数アドレス配置
 1764			      C I_SP_CtrlChgB:				;
			      C ;	処理無し			;
 1764  C3		      C 	ret				;
			      C ;-------------[	外部MIDI  ]-------------
			      C 	even				;偶数アドレス配置
 1766			      C I_SM_CtrlChgB:				;
			      C ifndef	hyoka	;------------------------廉価版は無し
 1766  55		      C 	push	bp			;
 1767  8B EC		      C 	mov	bp,sp			;
 1769  51		      C 	push	cx			;レジスタ保存
			      C 
 176A  8A 4E 04		      C 	mov	cl,[bp + 04h]		;
 176D  8B 6E 08		      C 	mov	bp,[bp + 08h]		;bpレジスタの復帰
 1770  E8 0271		      C 	call	SM_ControlByte		;
			      C 
 1773  59		      C 	pop	cx			;レジスタ復帰
 1774  5D		      C 	pop	bp			;
			      C endif	;--------------------------------
 1775  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;			Control Change Word			|
			      C ;===============================================================|
			      C ;	引数							|
			      C ;		ax←データ					|
			      C ;		cl←機能番号					|
			      C ;	返値							|
			      C ;		無し						|
			      C ;	処理							|
			      C ;		コントロールチェンジの送信			|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
			      C ;-------------[	  Table   ]-------------
 1776			      C I_Table_CtrlChgW:			
 1776  177A R		      C 	dw	I_SP_CtrlChgW		
 1778  177C R		      C 	dw	I_SM_CtrlChgW		
			      C ;-------------[	WS内蔵PCM ]-------------
			      C 	even				;偶数アドレス配置
 177A			      C I_SP_CtrlChgW:				;
			      C ;	処理無し			;
 177A  C3		      C 	ret				;
			      C ;-------------[	外部MIDI  ]-------------
			      C 	even				;偶数アドレス配置
 177C			      C I_SM_CtrlChgW:				;
			      C ifndef	hyoka	;------------------------廉価版は無し
 177C  55		      C 	push	bp			;
 177D  8B EC		      C 	mov	bp,sp			;
 177F  51		      C 	push	cx			;レジスタ保存
			      C 
 1780  8A 4E 04		      C 	mov	cl,[bp + 04h]		;
 1783  8B 6E 08		      C 	mov	bp,[bp + 08h]		;bpレジスタの復帰
 1786  E8 0273		      C 	call	SM_ControlWord		;
			      C 
 1789  59		      C 	pop	cx			;レジスタ復帰
 178A  5D		      C 	pop	bp			;
			      C endif	;--------------------------------
 178B  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;	WS内蔵PCM Channelモード	/ MIDI Dumper Switch		|
			      C ;===============================================================|
			      C ;	引数							|
			      C ;		al←モードスイッチ				|
			      C ;	返値							|
			      C ;		無し						|
			      C ;	処理							|
			      C ;		モード						|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
			      C ;-------------[	  Table   ]-------------
 178C			      C I_Table_Mode:				
 178C  1790 R		      C 	dw	I_SP_Mode		
 178E  17A6 R		      C 	dw	I_SM_Mode		
			      C ;-------------[	WS内蔵PCM ]-------------
			      C 	even				;偶数アドレス配置
 1790			      C I_SP_Mode:				;
 1790  51		      C 	push	cx			;
 1791  50		      C 	push	ax			;レジスタ保存
			      C 
 1792  83 E0 01		      C 	and	ax,0001h		;and	al,01h
 1795  0D 0100		      C 	or	ax,0100h		;set	0,ah
 1798  8A CD		      C 	mov	cl,ch			;
 179A  80 C1 04		      C 	add	cl,4			;
 179D  D3 E0		      C 	shl	ax,cl			;
			      C 
 179F  E8 0140		      C 	call	SP_Set_Channel		;
			      C 
 17A2  58		      C 	pop	ax			;レジスタ復帰
 17A3  59		      C 	pop	cx			;
 17A4  C3		      C 	ret				;
			      C ;-------------[	外部MIDI  ]-------------
			      C 	even				;偶数アドレス配置
 17A6			      C I_SM_Mode:				;
			      C ifndef	hyoka	;------------------------廉価版は無し
 17A6  51		      C 	push	cx			;レジスタ保存
			      C 
 17A7  C0 E0 06		      C 	shl	al,6			;数値を64倍する。
 17AA  24 40		      C 	and	al,40h			;0か64だけ。
 17AC  B1 40		      C 	mov	cl,MIDI_Ctrl_Hold	;
 17AE  E8 024B		      C 	call	SM_ControlWord		;ダンパースイッチの送信
			      C 
 17B1  59		      C 	pop	cx			;レジスタ復帰
			      C endif	;--------------------------------
 17B2  C3		      C 	ret				;
			      C 
				include	wtd_icom.asm			;割り込み　シリアル通信制御
			      C ;=======================================================================|
			      C ;									|
			      C ;		Wander Swan Total Sound Driver				|
			      C ;			Interrupt main program				|
			      C ;				Serial Control				|
			      C ;									|
			      C ;					Programmed by			|
			      C ;						A.Watanabe		|
			      C ;									|
			      C ;=======================================================================|
			      C ifndef	hyoka
			      C ;****************************************************************
			      C ;*								*
			      C ;*			割り込みメインルーチン			*
			      C ;*								*
			      C ;****************************************************************
			      C ;===============================================================|
			      C ;		Interrupt Main					|
			      C ;===============================================================|
			      C ;								|
			      C ;	●処理							|
			      C ;		シリアル通信の制御を行うルーチン。		|
			      C ;								|
			      C ;	●使用レジスタ						|
			      C ;		ds:bp	ワーク領域先頭アドレス			|
			      C ;		ds:bx	パート共通構造体			|
			      C ;								|
			      C ;===============================================================|
			      C 	Public	IC_Start
			      C 	even					;偶数アドレス配置
 17B4			      C IC_Start:
 17B4  50		      C 	push	ax				;
 17B5  53		      C 	push	bx				;
 17B6  55		      C 	push	bp				;
 17B7  1E		      C 	push	ds				;レジスタ保存
			      C 
			      C ;---------------------------------------------------------------
			      C 
 17B8  E4 B2		      C 	in	al,Int_Enable		;
 17BA  24 FE		      C 	and	al,INT_CommSendReset	;シリアル送信エンプティー
 17BC  E6 B2		      C 	out	Int_Enable,al		;割り込み禁止
			      C 
			      C ;---------------------------------------------------------------
			      C ;EOIの発行
			      C 
			      C ;End Of Interrupt
 17BE  B0 01		      C 	mov	al,INT_CommSendSet		;
 17C0  E6 B6		      C 	out	Int_Eoi,al			;出力
			      C 
			      C ;---------------------------------------------------------------
			      C ;バンクの設定
			      C ifndef	IRAM		;DGROUP=IRAMの場合、不要
			      C 	in	al,BankSram			;現在のSRAM Bankを得る
			      C 	cmp	al,BANK_USERDS0			;ユーザ領域を示していたら、
			      C 	jz	IC_Start_Step1			;この処理は行わない。
			      C 	cmp	al,BANK_USERDS1			;
			      C 	jz	IC_Start_Step1			;'/ram0'アクセス中は、
			      C 	jmp	IC_Start_End			;処理をしない。
			      C endif
			      C 
 17C2			      C IC_Start_Step1:
			      C ;	push	ax				;
			      C 
			      C ;---------------------------------------------------------------
			      C ;ワークエリアアドレスの取得
			      C 
			      C 	WTD_WorkGet	ds,bp			;ワークエリアアドレスの取得
			     1C ifdef	library	;------------------------	;※　ライブラリ版のみ必要
			     1C 
			     1C ifdef	IRAM	;---------------		;D-GROUP ＝ I-RAMの場合
 17C2  6A 00		     1C 		push	IRAM_Segment		;
 17C4  1F		     1C 		pop	ds			;
 17C5  BD 0000 R	     1C 		mov	bp,offset DGROUP:_WTD_Work
			     1C 
			     1C else	;-----------------------		;D-GROUP ≠ S-RAMの場合
			     1C 		push	SRAM_Segment		;（WonderWitch等）
			     1C 		pop	ds			;
			     1C 		mov	bp,offset DGROUP:_WTD_Work
			     1C endif	;-----------------------
			     1C 
			     1C else	;--------------------------------	;WonderWitch版
			     1C 		push	SRAM_Segment		;
			     1C 		pop	ds			;
			     1C 		mov	bp,ds:[ProcContext_heap]
			     1C endif	;--------------------------------
			      C 
			      C ;---------------------------------------------------------------
			      C ;通信
 17C8			      C IC_Start_Step2:					;
 17C8  E8 034D		      C 	call	IC_Send				;送信
			      C ;---------------------------------------------------------------
			      C ;バンクの復帰
			      C ifndef	IRAM		;DGROUP=IRAMの場合、不要
			      C ;
			      C ;	pop	ax				;復帰
			      C ;	out	BankSram,al			;設定する。
			      C ;
			      C endif
			      C ;---------------------------------------------------------------
			      C ;割り込みの終了
			      C 
 17CB			      C IC_Start_End:
			      C 
 17CB  1F		      C 	pop	ds				;レジスタ復帰
 17CC  5D		      C 	pop	bp				;
 17CD  5B		      C 	pop	bx				;
 17CE  58		      C 	pop	ax				;
 17CF  CF		      C 	iret					;
			      C ;===============================================================|
			      C endif
			      C 
				include	wtd_tim.asm			;タイマー制御用サブルーチン
			      C ;=======================================================================|
			      C ;									|
			      C ;		Wander Swan Total Sound Driver				|
			      C ;				Timer Control				|
			      C ;									|
			      C ;					Programmed by			|
			      C ;						A.Watanabe		|
			      C ;									|
			      C ;=======================================================================|
			      C ;===============================================================|
			      C ;			I/O Address				|
			      C ;===============================================================|
 = 00B0			      C Int_Base		equ	0b0h	;
 = 00B2			      C Int_Enable		equ	0b2h	;
 = 00B4			      C Int_Case		equ	0b4h	;
 = 00B6			      C Int_Eoi			equ	0b6h	;
 = 00C1			      C BankSram		equ	0c1h	;
 = 00A2			      C TIMER_Status		equ	0a2h	;Timer Status
 = 00A4			      C TIMER_MaxCountH		equ	0a4h	;Hblank Load Count
 = 00A6			      C TIMER_MaxCountV		equ	0a6h	;Vblank Load Count
 = 00A8			      C TIMER_CounterH		equ	0a8h	;Hblank Down Counter
 = 00AA			      C TIMER_CounterV		equ	0aah	;Vblank Down Counter
			      C ;===============================================================|
			      C ;			INT Status bit flag			|
			      C ;===============================================================|
 = 0080			      C INT_HblankSet		equ	080h	;Hblank値セット　(or)
 = 007F			      C INT_HblankReset		equ	07fh	;Hblank値リセット(and)
			      C ;===============================================================|
			      C ;			COMM Status bit flag			|
			      C ;===============================================================|
 = 0001			      C Timer_H_Enable		equ	001h	;Hblank Int. Enable	(or)
 = 00FE			      C Timer_H_Disable		equ	0feh	;Hblank Int. Disable	(and)
 = 0002			      C Timer_H_auto		equ	002h	;Vblank auto preset mode(or)
 = 00FD			      C Timer_H_shot		equ	0fdh	;Vblank 1 shot mode	(and)
 = 0004			      C Timer_V_Enable		equ	004h	;Vblank Int. Enable 	(or)
 = 00FB			      C Timer_V_Disable		equ	0fbh	;Vblank Int. Disable	(and)
 = 0008			      C Timer_V_auto		equ	008h	;Vblank auto preset mode(or)
 = 00F7			      C Timer_V_shot		equ	0f7h	;Vblank 1 shot mode	(and)
			      C ;===============================================================|
			      C ;			定数					|
			      C ;===============================================================|
 = 0303			      C Timer_Open		equ	0303h	;Hblank Enable / Auto mode
 = 0100			      C Timer_Close		equ	0100h	;Hblank Disable
			      C ;
			      C ;	Frection = 12000 / ( timebase × tempo / 60 )
			      C ;	Frection = 0AFC80h / (timebase × tempo )
			      C ;
 = 007D			      C Timer_Tempo120		equ	125	;timebase 48 / Tempo 120
			      C ;===============================================================|
			      C ;		ハードウェア割り込みのベースベクトルの取得	|
			      C ;===============================================================|
			      C ;	引き数							|
			      C ;		無し						|
			      C ;	返り値							|
			      C ;		al	ベースベクトル				|
			      C ;	処理							|
			      C ;		I/Oから、割り込みベクタを読む			|
			      C ;===============================================================|
			      C 		even			;偶数アドレス配置
 17D0			      C IntVector_Get	proc near		;
 17D0  E4 B0		      C 		in	al,Int_Base	;読み込み
 17D2  C3		      C 		ret			;
 17D3			      C IntVector_Get	endp			;
			      C ;===============================================================|
			      C ;		タイマーの動作開始				|
			      C ;===============================================================|
			      C ;	引き数							|
			      C ;		無し						|
			      C ;	返り値							|
			      C ;		無し						|
			      C ;	処理							|
			      C ;		deviceの初期設定				|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 17D4			      C T_open	proc near			;
 17D4  50		      C 	push	ax			;レジスタ保存
			      C 
 17D5  B8 0303		      C 	mov	ax,Timer_Open		;Set
 17D8  E8 0029		      C 	call	T_Set_Status		;
			      C 
 17DB  E8 001C		      C 	call	T_init			;割り込み周期の設定
			      C 
 17DE  E4 B2		      C 	in	al,Int_Enable		;
 17E0  0C 80		      C 	or	al,Int_HblankSet	;
 17E2  E6 B2		      C 	out	Int_Enable,al		;
			      C 
 17E4  58		      C 	pop	ax			;レジスタ復帰
 17E5  C3		      C 	ret				;
 17E6			      C T_open	endp				;
			      C ;===============================================================|
			      C ;		タイマーの動作終了				|
			      C ;===============================================================|
			      C ;	引き数							|
			      C ;		無し						|
			      C ;	返り値							|
			      C ;		無し						|
			      C ;	処理							|
			      C ;		deviceの初期化					|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 17E6			      C T_close	proc near			;
 17E6  50		      C 	push	ax			;レジスタ保存
			      C 
 17E7  B8 0100		      C 	mov	ax,Timer_Close		;Reset
 17EA  E8 0017		      C 	call	T_Set_Status		;
			      C 
 17ED  E4 B2		      C 	in	al,Int_Enable		;
 17EF  24 7F		      C 	and	al,Int_HblankReset	;
 17F1  E6 B2		      C 	out	Int_Enable,al		;
 17F3  B0 7F		      C 	mov	al,Int_HblankReset	;
 17F5  E6 B6		      C 	out	Int_Eoi,al		;出力
			      C 
 17F7  58		      C 	pop	ax			;レジスタ復帰
 17F8  C3		      C 	ret				;
 17F9			      C T_close	endp				;
			      C ;===============================================================|
			      C ;		タイマーの初期設定				|
			      C ;===============================================================|
			      C ;	引き数							|
			      C ;		無し						|
			      C ;	返り値							|
			      C ;		無し						|
			      C ;	処理							|
			      C ;		タイマー周期をTempo120にする。			|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 17FA			      C T_init	proc near			;
 17FA  50		      C 	push	ax			;レジスタ保存
			      C 
 17FB  B8 007D		      C 	mov	ax,Timer_Tempo120	;
 17FE  E8 000D		      C 	call	T_Set_Frection		;
			      C 
 1801  58		      C 	pop	ax			;レジスタ復帰
 1802  C3		      C 	ret				;
 1803			      C T_init	endp				;
			      C ;===============================================================|
			      C ;		タイマーモードの設定				|
			      C ;===============================================================|
			      C ;	引き数							|
			      C ;		AL	Output mode				|
			      C ;		AH	Set bit					|
			      C ;	返り値							|
			      C ;		無し						|
			      C ;	処理							|
			      C ;		モードの設定					|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 1804			      C T_Set_Status	proc near		;
 1804  52		      C 	push	dx			;レジスタ保存
 1805  BA 00A2		      C 	mov	dx,TIMER_Status		;dx←I/O Address
 1808  E8 016D		      C 	call	SP_Set_with_mask	;
 180B  5A		      C 	pop	dx			;レジスタ復帰
 180C  C3		      C 	ret				;
 180D			      C T_Set_Status	endp			;
			      C ;===============================================================|
			      C ;		タイマー周期の設定				|
			      C ;===============================================================|
			      C ;	引き数							|
			      C ;		AX	割り込み周期				|
			      C ;	返り値							|
			      C ;		無し						|
			      C ;	処理							|
			      C ;		モードの設定					|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 180E			      C T_Set_Frection	proc near		;
 180E  E7 A4		      C 	out	Timer_MaxCountH,ax	;出力
 1810  C3		      C 	ret				;
 1811			      C T_Set_Frection	endp			;
			      C 
				include	wtd_snd.asm			;サウンド制御用サブルーチン
			      C ;=======================================================================|
			      C ;									|
			      C ;		Wander Swan Total Sound Driver				|
			      C ;				Sound Control				|
			      C ;									|
			      C ;					Programmed by			|
			      C ;						A.Watanabe		|
			      C ;									|
			      C ;=======================================================================|
			      C ;****************************************************************
			      C ;*								*
			      C ;*		Ｗａｎｄｅｒ　Ｓｗａｎ　内蔵ＰＣＭ		*
			      C ;*								*
			      C ;****************************************************************
			      C ;===============================================================|
			      C ;			I/O Address				|
			      C ;===============================================================|
 = 0080			      C PCM_Com_Frection	equ	080h			;周波数
 = 0080			      C PCM_Com_FrectionCh1	equ	PCM_Com_Frection + 0	;周波数
 = 0082			      C PCM_Com_FrectionCh2	equ	PCM_Com_Frection + 2	;周波数
 = 0084			      C PCM_Com_FrectionCh3	equ	PCM_Com_Frection + 4	;周波数
 = 0086			      C PCM_Com_FrectionCh4	equ	PCM_Com_Frection + 6	;周波数
 = 0088			      C PCM_Com_Volume		equ	088h			;音量
 = 0088			      C PCM_Com_VolumeCh1	equ	PCM_Com_Volume + 0	;音量
 = 0089			      C PCM_Com_VolumeCh2	equ	PCM_Com_Volume + 1	;音量
 = 008A			      C PCM_Com_VolumeCh3	equ	PCM_Com_Volume + 2	;音量
 = 008B			      C PCM_Com_VolumeCh4	equ	PCM_Com_Volume + 3	;音量
 = Pcm_Com_VolumeCh2	      C PCM_Com_PCMVoice	equ	Pcm_Com_VolumeCh2	;PCM Voice
 = 008C			      C PCM_Com_Sweep		equ	08Ch			;Sweep
 = 008C			      C PCM_Com_SweepLevel	equ	PCM_Com_Sweep + 0	;Sweep Level
 = 008D			      C PCM_Com_SweepTime	equ	PCM_Com_Sweep + 1	;Sweep time
 = 008E			      C PCM_Com_Noise		equ	08Eh			;Noise mode
 = 008F			      C PCM_Com_VoiceAddress	equ	08Fh			;音色Wave table address
 = 0090			      C PCM_Com_Channel		equ	090h			;Channel mode
 = 0091			      C PCM_Com_Output		equ	091h			;Output mode
 = 0092			      C PCM_Com_Random		equ	092h			;Random get
 = 0094			      C PCM_Com_VolumePCM	equ	094h			;PCM Voice Volume
 = 0095			      C PCM_Com_VoiceCtrl	equ	095h			;PCM Voice Control
			      C ;===============================================================|
			      C ;			Work Address				|
			      C ;===============================================================|
			      C ;PCM_Wrok_Segment	equ	0000h	;FreyaBIOS Work Area
			      C ;PCM_Wrok_VoiceTable	equ	0180h	;FreyaBIOS Work Area
			      C ;===============================================================|
			      C ;			定数					|
			      C ;===============================================================|
 = 0300			      C PCM_Channel_mask	equ	0300h	;マスク
 = 2020			      C PcmVoiceMode_Set	equ	2020h	;Channel Mode  PCM Voice Mode Set
 = 2000			      C PcmVoiceMode_Reset	equ	2000h	;Channel Mode  PCM Voice Mode Reset
			      C ;===============================================================|
			      C ;		サウンドの初期化				|
			      C ;===============================================================|
			      C ;	引き数							|
			      C ;		ds:[si]	共通構造体				|
			      C ;	返り値							|
			      C ;		無し						|
			      C ;	処理							|
			      C ;		deviceの初期化					|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 1812			      C SP_init	proc near			;
 1812  50		      C 	push	ax			;
 1813  51		      C 	push	cx			;
 1814  57		      C 	push	di			;
 1815  06		      C 	push	es			;レジスタ保存
			      C 
 1816  8B 44 32		      C 	mov	ax,ds:[si].WTD_Sys_VoiceTableOffset
 1819  E8 011E		      C 	call	SP_Set_VoiceAdd		;音色テーブルの設定
			      C 
 181C  6A 00		      C 	push	IRAM_Segment		;
 181E  07		      C 	pop	es			;
 181F  8B F8		      C 	mov	di,ax			;es:di←0000h:0180h
			      C 
 1821  33 C0		      C 	xor	ax,ax			;各デバイスの初期化
 1823  B9 0020		      C 	mov	cx,0020h		;64byte転送
 1826  F3/ AB		      C 	rep	stosw			;音色の初期化
 1828  33 C0		      C 	xor	ax,ax			;
 182A  E7 80		      C 	out	PCM_Com_FrectionCh1,ax	;
 182C  E7 82		      C 	out	PCM_Com_FrectionCh2,ax	;
 182E  E7 84		      C 	out	PCM_Com_FrectionCh3,ax	;
 1830  E7 86		      C 	out	PCM_Com_FrectionCh4,ax	;
 1832  E6 88		      C 	out	PCM_Com_VolumeCh1,al	;
 1834  E6 89		      C 	out	PCM_Com_VolumeCh2,al	;
 1836  E6 8A		      C 	out	PCM_Com_VolumeCh3,al	;
 1838  E6 8B		      C 	out	PCM_Com_VolumeCh4,al	;
 183A  E6 8C		      C 	out	PCM_Com_SweepLevel,al	;
 183C  E6 8D		      C 	out	PCM_Com_SweepTime,al	;
 183E  E6 8E		      C 	out	PCM_Com_Noise,al	;
 1840  B0 0F		      C 	mov	al,00fh			;
 1842  E6 90		      C 	out	PCM_Com_Channel,al	;
 1844  B0 0F		      C 	mov	al,00fh			;
 1846  E6 91		      C 	out	PCM_Com_Output,al	;
 1848  E6 94		      C 	out	PCM_Com_VolumePCM,al	;
			      C 
			      C ;		to do	WSC check
			      C ;	mov	al,0FFh			;
			      C ;	out	PCM_Com_VoiceCtrl,al	;
			      C 
 184A  07		      C 	pop	es			;レジスタ復帰
 184B  5F		      C 	pop	di			;
 184C  59		      C 	pop	cx			;
 184D  58		      C 	pop	ax			;
 184E  C3		      C 	ret				;
 184F			      C SP_init	endp				;
			      C ;===============================================================|
			      C ;			周波数のセット				|
			      C ;===============================================================|
			      C ;	引き数							|
			      C ;		CH	Channel					|
			      C ;		AX	Frection				|
			      C ;	返り値							|
			      C ;		無し						|
			      C ;	処理							|
			      C ;		周波数のセット					|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 1850			      C SP_Set_Frection	proc near		;
 1850  51		      C 	push	cx			;
 1851  52		      C 	push	dx			;レジスタ保存
			      C 
 1852  F7 05 4000	      C 	test	ds:[di].WTD_FlagControl,WTD_Ctrl_Effect
 1856  75 10		      C 	jnz	SP_Set_Frection_Step	;効果音パート？
 1858  8A CD		      C 	mov	cl,ch			;
 185A  FE C1		      C 	inc	cl			;
 185C  BA 0800		      C 	mov	dx,00800h		;
 185F  D3 E2		      C 	shl	dx,cl			;
 1861  3E: 85 96 0380	      C 	test	ds:[bp].WTD_WorkAdd_System+WTD_Sys_Flag,dx
 1866  75 0D		      C 	jnz	SP_Set_Frection_End	;効果音鳴っているか？
			      C 
 1868			      C SP_Set_Frection_Step:			;
 1868  BA 0080		      C 	mov	dx,PCM_Com_Frection	;dx←I/O Address base
 186B  81 E1 0300	      C 	and	cx,PCM_Channel_mask	;
 186F  C1 E9 07		      C 	shr	cx,7			;cx = ch * 2
 1872  03 D1		      C 	add	dx,cx			;dx←I/O Address
 1874  EF		      C 	out	dx,ax			;out(dx),ax
			      C 
 1875			      C SP_Set_Frection_End:			;
 1875  5A		      C 	pop	dx			;レジスタ復帰
 1876  59		      C 	pop	cx			;
 1877  C3		      C 	ret				;
 1878			      C SP_Set_Frection	endp			;
			      C ;===============================================================|
			      C ;			音量のセット				|
			      C ;===============================================================|
			      C ;	引き数							|
			      C ;		CH	Channel					|
			      C ;		AL	Volume					|
			      C ;	返り値							|
			      C ;		無し						|
			      C ;	処理							|
			      C ;		音量のセット					|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 1878			      C SP_Set_Volume	proc near		;
 1878  51		      C 	push	cx			;
 1879  52		      C 	push	dx			;レジスタ保存
			      C 
 187A  F7 05 4000	      C 	test	ds:[di].WTD_FlagControl,WTD_Ctrl_Effect
 187E  75 10		      C 	jnz	SP_Set_Volume_Step	;効果音パート？
 1880  8A CD		      C 	mov	cl,ch			;
 1882  FE C1		      C 	inc	cl			;
 1884  BA 0800		      C 	mov	dx,00800h		;
 1887  D3 E2		      C 	shl	dx,cl			;
 1889  3E: 85 96 0380	      C 	test	ds:[bp].WTD_WorkAdd_System+WTD_Sys_Flag,dx
 188E  75 0D		      C 	jnz	SP_Set_Volume_End	;効果音鳴っているか？
			      C 
 1890			      C SP_Set_Volume_Step:			;
 1890  BA 0088		      C 	mov	dx,PCM_Com_Volume	;dx←I/O Address base
 1893  81 E1 0300	      C 	and	cx,PCM_Channel_mask	;
 1897  C1 E9 08		      C 	shr	cx,8			;cx = cl
 189A  03 D1		      C 	add	dx,cx			;dx←I/O Address
 189C  EE		      C 	out	dx,al			;out(dx),ax
			      C 
 189D			      C SP_Set_Volume_End:			;
 189D  5A		      C 	pop	dx			;レジスタ復帰
 189E  59		      C 	pop	cx			;
 189F  C3		      C 	ret				;
 18A0			      C SP_Set_Volume	endp			;
			      C ;===============================================================|
			      C ;			スウィープのセット			|
			      C ;===============================================================|
			      C ;	引き数							|
			      C ;		AL	Sweep Level				|
			      C ;		AH	Sweep Time				|
			      C ;	返り値							|
			      C ;		無し						|
			      C ;	処理							|
			      C ;		スウィープの設定				|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 18A0			      C SP_Set_Sweep	proc near		;
 18A0  52		      C 	push	dx
			      C 
 18A1  F7 05 4000	      C 	test	ds:[di].WTD_FlagControl,WTD_Ctrl_Effect
 18A5  75 10		      C 	jnz	SP_Set_Sweep_Step	;効果音パート？
 18A7  8A CD		      C 	mov	cl,ch			;
 18A9  FE C1		      C 	inc	cl			;
 18AB  BA 0800		      C 	mov	dx,00800h		;
 18AE  D3 E2		      C 	shl	dx,cl			;
 18B0  3E: 85 96 0380	      C 	test	ds:[bp].WTD_WorkAdd_System+WTD_Sys_Flag,dx
 18B5  75 08		      C 	jnz	SP_Set_Sweep_End	;効果音鳴っているか？
			      C 
 18B7			      C SP_Set_Sweep_Step:			;
 18B7  E6 8C		      C 	out	PCM_Com_SweepLevel,al	;出力
 18B9  86 C4		      C 	xchg	al,ah			;
 18BB  E6 8D		      C 	out	PCM_Com_SweepTime,al	;出力
 18BD  86 C4		      C 	xchg	al,ah			;
			      C 
 18BF			      C SP_Set_Sweep_End:			;
 18BF  5A		      C 	pop	dx			;
 18C0  C3		      C 	ret				;
 18C1			      C SP_Set_Sweep	endp			;
			      C ;===============================================================|
			      C ;			ノイズモードのセット			|
			      C ;===============================================================|
			      C ;	引き数							|
			      C ;		AL	Set Data				|
			      C ;		AH	Set bit					|
			      C ;	返り値							|
			      C ;		無し						|
			      C ;	処理							|
			      C ;		ノイズモードの設定				|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 18C2			      C SP_Set_Noise	proc near		;
 18C2  52		      C 	push	dx			;レジスタの保存
			      C 
 18C3  F7 05 4000	      C 	test	ds:[di].WTD_FlagControl,WTD_Ctrl_Effect
 18C7  75 10		      C 	jnz	SP_Set_Noise_Step	;効果音パート？
 18C9  8A CD		      C 	mov	cl,ch			;
 18CB  FE C1		      C 	inc	cl			;
 18CD  BA 0800		      C 	mov	dx,00800h		;
 18D0  D3 E2		      C 	shl	dx,cl			;
 18D2  3E: 85 96 0380	      C 	test	ds:[bp].WTD_WorkAdd_System+WTD_Sys_Flag,dx
 18D7  75 06		      C 	jnz	SP_Set_Noise_End	;効果音鳴っているか？
			      C 
 18D9			      C SP_Set_Noise_Step:			;
 18D9  BA 008E		      C 	mov	dx,PCM_Com_Noise	;dx←I/O Address
 18DC  E8 0099		      C 	call	SP_Set_with_mask	;
			      C 
 18DF			      C SP_Set_Noise_End:			;
 18DF  5A		      C 	pop	dx			;
 18E0  C3		      C 	ret				;レジスタの復帰
 18E1			      C SP_Set_Noise	endp			;
			      C ;===============================================================|
			      C ;			Channel modeの設定			|
			      C ;===============================================================|
			      C ;	引き数							|
			      C ;		AL	Channel mode				|
			      C ;		AH	Set bit					|
			      C ;	返り値							|
			      C ;		無し						|
			      C ;	処理							|
			      C ;		チャンネルモードの設定				|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 18E2			      C SP_Set_Channel	proc near		;
 18E2  52		      C 	push	dx			;レジスタの保存
			      C 
 18E3  F7 05 4000	      C 	test	ds:[di].WTD_FlagControl,WTD_Ctrl_Effect
 18E7  75 10		      C 	jnz	SP_Set_Channel_Step	;効果音パート？
 18E9  8A CD		      C 	mov	cl,ch			;
 18EB  FE C1		      C 	inc	cl			;
 18ED  BA 0800		      C 	mov	dx,00800h		;
 18F0  D3 E2		      C 	shl	dx,cl			;
 18F2  3E: 85 96 0380	      C 	test	ds:[bp].WTD_WorkAdd_System+WTD_Sys_Flag,dx
 18F7  75 06		      C 	jnz	SP_Set_Channel_End	;効果音鳴っているか？
			      C 
 18F9			      C SP_Set_Channel_Step:			;
 18F9  BA 0090		      C 	mov	dx,PCM_Com_Channel	;dx←I/O Address
 18FC  E8 0079		      C 	call	SP_Set_with_mask	;
			      C 
 18FF			      C SP_Set_Channel_End:			;
 18FF  5A		      C 	pop	dx			;
 1900  C3		      C 	ret				;レジスタの復帰
 1901			      C SP_Set_Channel	endp			;
			      C ;===============================================================|
			      C ;			音色の設定				|
			      C ;===============================================================|
			      C ;	引き数							|
			      C ;		CH	チャンネル				|
			      C ;		DS:SI	音色データのアドレス			|
			      C ;	返り値							|
			      C ;		無し						|
			      C ;	処理							|
			      C ;		音色を設定する					|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 1902			      C SP_Set_Voice	proc	near		;
 1902  51		      C 	push	cx			;
 1903  52		      C 	push	dx			;
 1904  57		      C 	push	di			;
 1905  56		      C 	push	si			;
 1906  06		      C 	push	es			;レジスタ保存
			      C 
 1907  F7 05 4000	      C 	test	ds:[di].WTD_FlagControl,WTD_Ctrl_Effect
 190B  75 10		      C 	jnz	SP_Set_Voice_Step	;効果音パート？
 190D  8A CD		      C 	mov	cl,ch			;
 190F  FE C1		      C 	inc	cl			;
 1911  BA 0800		      C 	mov	dx,00800h		;
 1914  D3 E2		      C 	shl	dx,cl			;
 1916  3E: 85 96 0380	      C 	test	ds:[bp].WTD_WorkAdd_System+WTD_Sys_Flag,dx
 191B  75 17		      C 	jnz	SP_Set_Voice_End	;効果音鳴っているか？
			      C 
 191D			      C SP_Set_Voice_Step:			;
			      C 
 191D  FC		      C 	cld				;インクリメントモード
			      C 
 191E  6A 00		      C 	push	IRAM_Segment		;es←0000h
 1920  07		      C 	pop	es			;
			      C ;	mov	di,PCM_Wrok_VoiceTable	;0180h(音色テーブルアドレス)
 1921  3E: 8B BE 03B2	      C 	mov	di,ds:[bp].WTD_WorkAdd_System+WTD_Sys_VoiceTableOffset
 1926  81 E1 0300	      C 	and	cx,PCM_Channel_mask	;
 192A  C1 E9 04		      C 	shr	cx,4			;
 192D  03 F9		      C 	add	di,cx			;es:di←0000h:0180h + ch × 16
 192F  B9 0008		      C 	mov	cx,8			;16byte転送する。
 1932  F3/ A5		      C 	rep	movsw			;転送
			      C 
 1934			      C SP_Set_Voice_End:			;
 1934  07		      C 	pop	es			;レジスタ復帰
 1935  5E		      C 	pop	si			;
 1936  5F		      C 	pop	di			;
 1937  5A		      C 	pop	dx
 1938  59		      C 	pop	cx			;
 1939  C3		      C 	ret				;
 193A			      C SP_Set_Voice	endp			;
			      C ;***************************************************************
			      C ;*			システム				*
			      C ;***************************************************************
			      C ;===============================================================|
			      C ;			音色テーブルのアドレス			|
			      C ;===============================================================|
			      C ;	引き数							|
			      C ;		AX	Address					|
			      C ;	返り値							|
			      C ;		無し						|
			      C ;	処理							|
			      C ;		音色テーブルのアドレス設定			|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 193A			      C SP_Set_VoiceAdd	proc near	uses ax	;
 193A  50		   *	    push   ax
 193B  C1 E8 06		      C 	shr	ax,6			;64Byte単位。64で割る。
 193E  E6 8F		      C 	out	PCM_Com_VoiceAddress,al	;出力
			      C 	ret				;
 1940  58		   *	    pop    ax
 1941  C3		   *	    ret    00000h
 1942			      C SP_Set_VoiceAdd	endp			;
			      C ;===============================================================|
			      C ;			Channel modeの取得			|
			      C ;===============================================================|
			      C ;	引き数							|
			      C ;		無し						|
			      C ;	返り値							|
			      C ;		AX	Channel mode(ah = 00h)			|
			      C ;	処理							|
			      C ;		チャンネルモードの取得				|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 1942			      C SP_Get_Channel	proc near		;
 1942  33 C0		      C 	xor	ax,ax			;
 1944  E4 90		      C 	in	al,PCM_Com_Channel	;入力
 1946  C3		      C 	ret				;
 1947			      C SP_Get_Channel	endp			;
			      C ;===============================================================|
			      C ;			Output modeの設定			|
			      C ;===============================================================|
			      C ;	引き数							|
			      C ;		AL	Output mode				|
			      C ;		AH	Set bit					|
			      C ;	返り値							|
			      C ;		無し						|
			      C ;	処理							|
			      C ;		出力モードの設定				|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 1948			      C SP_Set_Output	proc near	uses dx	;
 1948  52		   *	    push   dx
 1949  BA 0091		      C 	mov	dx,PCM_Com_Output	;dx←I/O Address
 194C  E8 0029		      C 	call	SP_Set_with_mask	;
			      C 	ret				;レジスタの復帰
 194F  5A		   *	    pop    dx
 1950  C3		   *	    ret    00000h
 1951			      C SP_Set_Output	endp			;
			      C ;===============================================================|
			      C ;			Output modeの取得			|
			      C ;===============================================================|
			      C ;	引き数							|
			      C ;		無し						|
			      C ;	返り値							|
			      C ;		AX	Output mode (AH = 0)			|
			      C ;	処理							|
			      C ;		出力モードの取得				|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 1952			      C SP_Get_Output	proc near		;
 1952  33 C0		      C 	xor	ax,ax			;
 1954  E4 91		      C 	in	al,PCM_Com_Output	;入力
 1956  C3		      C 	ret				;
 1957			      C SP_Get_Output	endp			;
			      C ;===============================================================|
			      C ;			疑似乱数の取得				|
			      C ;===============================================================|
			      C ;	引き数							|
			      C ;		無し						|
			      C ;	返り値							|
			      C ;		AX	疑似乱数				|
			      C ;	処理							|
			      C ;		疑似乱数の取得					|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 1958			      C SP_Get_Random	proc near		;
 1958  E5 92		      C 	in	ax,PCM_Com_Random	;入力
 195A  C3		      C 	ret				;
 195B			      C SP_Get_Random	endp			;
			      C ;===============================================================|
			      C ;			PCM Volume Volumeの設定			|
			      C ;===============================================================|
			      C ;	引き数							|
			      C ;		AL	PCM Voice Volume			|
			      C ;		AH	Set bit					|
			      C ;	返り値							|
			      C ;		無し						|
			      C ;	処理							|
			      C ;		出力モードの設定				|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 195C			      C SP_Set_VolumePCM	proc near	uses dx
 195C  52		   *	    push   dx
 195D  BA 0094		      C 	mov	dx,PCM_Com_VolumePCM	;dx←I/O Address
 1960  E8 0015		      C 	call	SP_Set_with_mask	;
			      C 	ret				;レジスタの復帰
 1963  5A		   *	    pop    dx
 1964  C3		   *	    ret    00000h
 1965			      C SP_Set_VolumePCM	endp		;
			      C ;===============================================================|
			      C ;			PCM Volume Volumeの設定			|
			      C ;===============================================================|
			      C ;	引き数							|
			      C ;		AL	PCM Voice Volume			|
			      C ;		AH	Set bit					|
			      C ;	返り値							|
			      C ;		無し						|
			      C ;	処理							|
			      C ;		出力モードの設定				|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 1966			      C SP_Get_VolumePCM	proc near	;
 1966  E4 94		      C 	in	al,PCM_Com_VolumePCM	;入力
 1968  C3		      C 	ret				;
 1969			      C SP_Get_VolumePCM	endp		;
			      C 
			      C ;===============================================================|
			      C ;			PCM Volume Volumeの設定			|
			      C ;===============================================================|
			      C ;	引き数							|
			      C ;		AL	PCM Voice Volume			|
			      C ;		AH	Set bit					|
			      C ;	返り値							|
			      C ;		無し						|
			      C ;	処理							|
			      C ;		出力モードの設定				|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 196A			      C SP_Set_PCMVoice		proc near	uses dx
 196A  52		   *	    push   dx
 196B  BA 0095		      C 	mov	dx,PCM_Com_VoiceCtrl	;dx←I/O Address
 196E  E8 0007		      C 	call	SP_Set_with_mask	;
			      C 	ret				;レジスタの復帰
 1971  5A		   *	    pop    dx
 1972  C3		   *	    ret    00000h
 1973			      C SP_Set_PCMVoice		endp		;
			      C ;===============================================================|
			      C ;			PCM Volume Volumeの設定			|
			      C ;===============================================================|
			      C ;	引き数							|
			      C ;		AL	PCM Voice Volume			|
			      C ;		AH	Set bit					|
			      C ;	返り値							|
			      C ;		無し						|
			      C ;	処理							|
			      C ;		出力モードの設定				|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 1974			      C SP_Get_PCMVoice	proc near		;
 1974  E4 95		      C 	in	al,PCM_Com_VoiceCtrl	;入力
 1976  C3		      C 	ret				;
 1977			      C SP_Get_PCMVoice	endp			;
			      C 
			      C ;---------------------------------------------------------------|
			      C ;		マスクを利用して一部出力			|
			      C ;---------------------------------------------------------------|
			      C ;	dx		i/o address				|
			      C ;	al		set data				|
			      C ;	ah		set bit					|
			      C ;---------------------------------------------------------------|
			      C 	even				;偶数アドレス配置
 1978			      C SP_Set_with_mask	proc	near	uses ax cx
			      C 
 1978  50		   *	    push   ax
 1979  51		   *	    push   cx
 197A  22 C4		      C 	and	al,ah			;マスク
 197C  8A C8		      C 	mov	cl,al			;ch←Set Data
 197E  F6 D4		      C 	not	ah			;マスクデータの反転
 1980  EC		      C 	in	al,dx			;入力
 1981  22 C4		      C 	and	al,ah			;マスク
 1983  0A C1		      C 	or	al,cl			;論理和
 1985  EE		      C 	out	dx,al			;出力
			      C 
			      C 	ret				;
 1986  59		   *	    pop    cx
 1987  58		   *	    pop    ax
 1988  C3		   *	    ret    00000h
 1989			      C SP_Set_with_mask	endp
			      C ;****************************************************************
			      C ;*								*
			      C ;*			ＭＩＤＩ制御				*
			      C ;*				JIS X 6054-1			*
			      C ;*				JIS X 6054-2 参照		*
			      C ;*								*
			      C ;****************************************************************
			      C ifndef	hyoka
			      C ;===============================================================|
			      C ;			コマンド				|
			      C ;===============================================================|
 = 0080			      C MIDI_Com_KeyOff		equ	080h	;
 = 0090			      C MIDI_Com_KeyOn		equ	090h	;
 = 00A0			      C MIDI_Com_KeyPress	equ	0A0h	;
 = 00B0			      C MIDI_Com_Control	equ	0B0h	;
 = 00C0			      C MIDI_Com_Program	equ	0C0h	;
 = 00D0			      C MIDI_Com_ChPress	equ	0D0h	;
 = 00E0			      C MIDI_Com_PitchBend	equ	0E0h	;
 = 00F0			      C MIDI_Com_Exclucive	equ	0F0h	;
			      C ;===============================================================|
			      C ;			コントロールコード			|
			      C ;===============================================================|
 = 0020			      C MIDI_Ctrl_MSB		equ	20h	;
 = 0000			      C MIDI_Ctrl_Bank		equ	00h	;
 = 0001			      C MIDI_Ctrl_Mod		equ	01h	;
 = 0002			      C MIDI_Ctrl_Bress		equ	02h	;
 = 0004			      C MIDI_Ctrl_Foot		equ	04h	;
 = 0005			      C MIDI_Ctrl_PolTime	equ	05h	;
 = 0006			      C MIDI_Ctrl_DataEntly	equ	06h	;
 = 0007			      C MIDI_Ctrl_Volume	equ	07h	;
 = 0008			      C MIDI_Ctrl_Blance	equ	08h	;
 = 000A			      C MIDI_Ctrl_Pan		equ	0Ah	;
 = 000B			      C MIDI_Ctrl_Expression	equ	0Bh	;
 = 000C			      C MIDI_Ctrl_Effect1	equ	0Ch	;
 = 000D			      C MIDI_Ctrl_Effect2	equ	0Dh	;
 = 0040			      C MIDI_Ctrl_Hold		equ	40h	;
 = 0041			      C MIDI_Ctrl_PolSW		equ	41h	;ポルタメントスイッチ
 = 0042			      C MIDI_Ctrl_S		equ	42h	;ソヌーテート
 = 0043			      C MIDI_Ctrl_Soft		equ	43h	;ソフトペダル
 = 0044			      C MIDI_Ctrl_Legert	equ	44h	;レガートスイッチ
 = 0045			      C MIDI_Ctrl_Hold2		equ	45h	;ホールド
 = 0054			      C MIDI_Ctrl_PolControl	equ	54h	;ポルタメントコントロール
 = 005B			      C MIDI_Ctrl_Reverv	equ	5Bh	;リバーブ
 = 005C			      C MIDI_Ctrl_Tremono	equ	5Ch	;トレモノ
 = 005D			      C MIDI_Ctrl_Chorus	equ	5Dh	;コーラス
 = 005E			      C MIDI_Ctrl_Delay		equ	5Eh	;ディレイ
 = 005F			      C MIDI_Ctrl_F		equ	5Fh	;フェザー
 = 0060			      C MIDI_Ctrl_DataInc	equ	60h	;
 = 0061			      C MIDI_Ctrl_DaraDec	equ	61h	;
 = 0062			      C MIDI_Ctrl_NonRegLSB	equ	62h	;ディレイ
 = 0063			      C MIDI_Ctrl_NonRegMSB	equ	63h	;フェザー
 = 0064			      C MIDI_Ctrl_RegLSB	equ	64h	;
 = 0065			      C MIDI_Ctrl_RegMSB	equ	65h	;
			      C ;===============================================================|
			      C ;			レジスタードパラメータ			|
			      C ;===============================================================|
			      C ;				LSB-MSB
 = 0000			      C MIDI_Reg_PitchBend	equ	0000h	;ピッチベンドセンシティビティ
 = 0001			      C MIDI_Reg_Fain		equ	0001h	;ファインチューン
 = 0002			      C MIDI_Reg_Cose		equ	0002h	;コースチューン
 = 0003			      C MIDI_Reg_CProgram	equ	0003h	;チューニングプログラムセレクト
 = 0004			      C MIDI_Reg_CBank		equ	0004h	;チューニングバンクセレクト
 = 7F7F			      C MIDI_Reg_NULL		equ	7F7Fh	;ヌル
			      C ;===============================================================|
			      C ;			定数					|
			      C ;===============================================================|
 = 000F			      C MIDI_Channel_mask	equ	0Fh	;マスク
			      C ;===============================================================|
			      C ;			エクスクルーシブ			|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 198A 06 F0 7E 7F 09 01	      C MIDI_Ex_GmReset		db	6,0f0h,7eh,7fh,09h,01h,0f7h
       F7
 1991 00		      C MIDI_Ex_GsReset		db	0
 1992 00		      C MIDI_Ex_XgReset		db	0
			      C ;===============================================================|
			      C ;			MIDI Running Status			|
			      C ;===============================================================|
			      C ;	引き数							|
			      C ;		al	MIDI Command				|
			      C ;	返り値							|
			      C ;		無し						|
			      C ;	処理							|
			      C ;		ランニング・ステータスを考慮したコマンド送信	|
			      C ;===============================================================|
 1993			      C SM_Send_With_Running_Status:		;
 1993  3E: 38 86 03B0	      C 	cmp	ds:[bp].WTD_WorkAdd_System+WTD_Sys_RunningStatus,al
 1998  74 08		      C 	jz	SM_Send_With_Running_Status_e
 199A  E8 0105		      C 	call	C_Send			;コマンドの送信
 199D  3E: 88 86 03B0	      C 	mov	ds:[bp].WTD_WorkAdd_System+WTD_Sys_RunningStatus,al
 19A2			      C SM_Send_With_Running_Status_e:		;
 19A2  C3		      C 	ret				;
			      C ;===============================================================|
			      C ;			MIDIの初期化				|
			      C ;===============================================================|
			      C ;	引き数							|
			      C ;		無し						|
			      C ;	返り値							|
			      C ;		無し						|
			      C ;	処理							|
			      C ;			GM Resetの送信				|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 19A4			      C SM_init	proc near			;
 19A4  51		      C 	push	cx			;
 19A5  56		      C 	push	si			;
 19A6  06		      C 	push	es			;レジスタ保存
			      C 
 19A7  0E		      C 	push	cs			;
 19A8  07		      C 	pop	es			;ds←cs
 19A9  33 C9		      C 	xor	cx,cx			;cx←MIDI_Ex_GmReset
 19AB  26: 8A 0E 198A R	      C 	mov	cl,byte ptr es:[MIDI_Ex_GmReset]
 19B0  BE 198B R	      C 	mov	si,offset CGROUP:MIDI_Ex_GmReset + 1
 19B3  E8 0154		      C 	call	C_Send_Block		;ブロック送信
			      C 
			      C 	;ランニングステータスの初期化
 19B6  C6 44 30 00	      C 	mov	ds:[si].WTD_Sys_RunningStatus,0
			      C 
 19BA  07		      C 	pop	es			;レジスタ復帰
 19BB  5E		      C 	pop	si			;
 19BC  59		      C 	pop	cx			;
 19BD  C3		      C 	ret				;
 19BE			      C SM_init	endp				;
			      C ;===============================================================|
			      C ;			KeyOff					|
			      C ;===============================================================|
			      C ;	引き数							|
			      C ;		CH	Track					|
			      C ;		AL	Key					|
			      C ;	返り値							|
			      C ;		AH	00h					|
			      C ;	処理							|
			      C ;		KeyOff						|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 19BE			      C SM_KeyOff:				;
 19BE  32 E4		      C 	xor	ah,ah			;発音停止(KeyOff)
			      C ;===============================================================|
			      C ;			KeyOn					|
			      C ;===============================================================|
			      C ;	引き数							|
			      C ;		CH	Track					|
			      C ;		AH	Velocity (0:KeyOff)			|
			      C ;		AL	Key					|
			      C ;	返り値							|
			      C ;		無し						|
			      C ;	処理							|
			      C ;		KeyOn						|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 19C0			      C SM_KeyOn	proc near		;
 19C0  51		      C 	push	cx			;レジスタ保存
			      C 
 19C1  50		      C 	push	ax			;レジスタ保存
 19C2  B0 90		      C 	mov	al,MIDI_Com_KeyOn	;
 19C4  80 E5 0F		      C 	and	ch,MIDI_Channel_mask	;
 19C7  0A C5		      C 	or	al,ch			;
 19C9  E8 FFC7		      C 	call	SM_Send_With_Running_Status	;コマンドの送信
 19CC  58		      C 	pop	ax			;レジスタ復帰
 19CD  E8 012E		      C 	call	C_Send_Word		;データの送信
			      C 
 19D0  59		      C 	pop	cx			;レジスタ復帰
 19D1  C3		      C 	ret				;
 19D2			      C SM_KeyOn	endp			;
			      C ;===============================================================|
			      C ;			Poly Key Press				|
			      C ;===============================================================|
			      C ;	引き数							|
			      C ;		CH	Track					|
			      C ;		AH	Pressior				|
			      C ;		AL	Key					|
			      C ;	返り値							|
			      C ;		無し						|
			      C ;	処理							|
			      C ;		キープレッシャー（アフタータッチ）の送信	|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 19D2			      C SM_KeyPress	proc near		;
 19D2  51		      C 	push	cx			;レジスタ保存
			      C 
 19D3  50		      C 	push	ax			;レジスタ保存
 19D4  B0 A0		      C 	mov	al,MIDI_Com_KeyPress	;
 19D6  80 E5 0F		      C 	and	ch,MIDI_Channel_mask	;
 19D9  0A C5		      C 	or	al,ch			;
 19DB  E8 FFB5		      C 	call	SM_Send_With_Running_Status	;コマンドの送信
 19DE  58		      C 	pop	ax			;レジスタ復帰
 19DF  E8 011C		      C 	call	C_Send_Word		;データの送信
			      C 
 19E2  59		      C 	pop	cx			;レジスタ復帰
 19E3  C3		      C 	ret				;
 19E4			      C SM_KeyPress	endp			;
			      C ;===============================================================|
			      C ;			Control Change Byte			|
			      C ;===============================================================|
			      C ;	引き数							|
			      C ;		CH	Track					|
			      C ;		CL	Reg.					|
			      C ;		AL	Data					|
			      C ;	返り値							|
			      C ;		無し						|
			      C ;	処理							|
			      C ;		Control Change					|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 19E4			      C SM_ControlByte	proc near		;
 19E4  50		      C 	push	ax			;
 19E5  51		      C 	push	cx			;レジスタ保存
			      C 
 19E6  50		      C 	push	ax			;保存
 19E7  B0 B0		      C 	mov	al,MIDI_Com_Control	;
 19E9  80 E5 0F		      C 	and	ch,MIDI_Channel_mask	;
 19EC  0A C5		      C 	or	al,ch			;
 19EE  E8 FFA2		      C 	call	SM_Send_With_Running_Status	;コマンドの送信
 19F1  58		      C 	pop	ax			;復帰
 19F2  8A E0		      C 	mov	ah,al			;
 19F4  8A C1		      C 	mov	al,cl			;
 19F6  E8 0105		      C 	call	C_Send_Word		;データの送信
			      C 
 19F9  59		      C 	pop	cx			;レジスタ復帰
 19FA  58		      C 	pop	ax			;
 19FB  C3		      C 	ret				;
 19FC			      C SM_ControlByte	endp			;
			      C ;===============================================================|
			      C ;			Control Change Word			|
			      C ;===============================================================|
			      C ;	引き数							|
			      C ;		CH	Track					|
			      C ;		CL	Reg.					|
			      C ;		AX	Data					|
			      C ;	返り値							|
			      C ;		無し						|
			      C ;	処理							|
			      C ;		Control Change					|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 19FC			      C SM_ControlWord	proc near		;
 19FC  50		      C 	push	ax			;
 19FD  51		      C 	push	cx			;レジスタ保存
			      C 
 19FE  D1 E0		      C 	shl	ax,1			;
 1A00  D0 E8		      C 	shr	al,1			;
 1A02  25 7F7F		      C 	and	ax,07f7fh		;データの分離
			      C 
 1A05  50		      C 	push	ax			;保存
 1A06  B0 B0		      C 	mov	al,MIDI_Com_Control	;
 1A08  80 E5 0F		      C 	and	ch,MIDI_Channel_mask	;
 1A0B  0A C5		      C 	or	al,ch			;
 1A0D  E8 FF83		      C 	call	SM_Send_With_Running_Status	;コマンドの送信
 1A10  58		      C 	pop	ax			;復帰
 1A11  50		      C 	push	ax			;
 1A12  8A C1		      C 	mov	al,cl			;
 1A14  E8 00E7		      C 	call	C_Send_Word		;レジスタ(ah)，データの送信(ah(LSB))
 1A17  58		      C 	pop	ax			;復帰
 1A18  8A E0		      C 	mov	ah,al			;
 1A1A  8A C1		      C 	mov	al,cl			;
 1A1C  04 20		      C 	add	al,MIDI_Ctrl_MSB	;
 1A1E  E8 00DD		      C 	call	C_Send_Word		;レジスタ(ah)，データの送信(al(MSB))
			      C 
 1A21  59		      C 	pop	cx			;レジスタ復帰
 1A22  58		      C 	pop	ax			;
 1A23  C3		      C 	ret				;
 1A24			      C SM_ControlWord	endp			;
			      C ;===============================================================|
			      C ;			Program Change				|
			      C ;===============================================================|
			      C ;	引き数							|
			      C ;		CH	Track					|
			      C ;		AL	Program					|
			      C ;	返り値							|
			      C ;		無し						|
			      C ;	処理							|
			      C ;		Program Change					|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 1A24			      C SM_Program	proc near		;
 1A24  50		      C 	push	ax			;
 1A25  51		      C 	push	cx			;レジスタ保存
			      C 
 1A26  8A E0		      C 	mov	ah,al			;
 1A28  B0 C0		      C 	mov	al,MIDI_Com_Program	;
 1A2A  80 E5 0F		      C 	and	ch,MIDI_Channel_mask	;
 1A2D  0A C5		      C 	or	al,ch			;
 1A2F  E8 FF61		      C 	call	SM_Send_With_Running_Status	;コマンドの送信
 1A32  8A C4		      C 	mov	al,ah			;
 1A34  E8 006B		      C 	call	C_Send			;データの送信
			      C 
 1A37  59		      C 	pop	cx			;レジスタ復帰
 1A38  58		      C 	pop	ax			;
 1A39  C3		      C 	ret				;
 1A3A			      C SM_Program	endp			;
			      C ;===============================================================|
			      C ;			Program Change with Bank		|
			      C ;===============================================================|
			      C ;	引き数							|
			      C ;		CH	Track					|
			      C ;		AL	Program					|
			      C ;		BX	Bank(AH:Msb,AL:Lsb)			|
			      C ;	返り値							|
			      C ;		無し						|
			      C ;	処理							|
			      C ;		Program ChangeとBank Selectの送信		|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 1A3A			      C SM_BankProgram	proc near		;
 1A3A  51		      C 	push	cx			;レジスタの保存
			      C 
 1A3B  50		      C 	push	ax			;
 1A3C  B1 00		      C 	mov	cl,MIDI_Ctrl_Bank	;バンクセレクト
 1A3E  8B C3		      C 	mov	ax,bx			;バンク
 1A40  D0 E0		      C 	shl	al,1			;
 1A42  D1 E8		      C 	shr	ax,1			;
 1A44  25 3FFF		      C 	and	ax,03fffh		;データ合成
 1A47  E8 FFB2		      C 	call	SM_ControlWord		;
 1A4A  58		      C 	pop	ax			;
 1A4B  E8 FFD6		      C 	call	SM_Program		;プログラムチェンジ
			      C 	
 1A4E  59		      C 	pop	cx			;レジスタの復帰
 1A4F  C3		      C 	ret				;
 1A50			      C SM_BankProgram	endp			;
			      C ;===============================================================|
			      C ;			Poly Ch Press				|
			      C ;===============================================================|
			      C ;	引き数							|
			      C ;		CH	Track					|
			      C ;		AL	Pressior				|
			      C ;	返り値							|
			      C ;		無し						|
			      C ;	処理							|
			      C ;		キープレッシャー（アフタータッチ）の送信	|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 1A50			      C SM_ChPress	proc near		;
 1A50  51		      C 	push	cx			;
 1A51  50		      C 	push	ax			;レジスタ保存
			      C 
 1A52  8A E0		      C 	mov	ah,al			;
 1A54  B0 A0		      C 	mov	al,MIDI_Com_KeyPress	;
 1A56  80 E5 0F		      C 	and	ch,MIDI_Channel_mask	;
 1A59  0A C5		      C 	or	al,ch			;
 1A5B  E8 FF35		      C 	call	SM_Send_With_Running_Status	;コマンドの送信
 1A5E  8A C4		      C 	mov	al,ah			;
 1A60  E8 003F		      C 	call	C_Send			;データの送信
			      C 
 1A63  58		      C 	pop	ax			;レジスタ復帰
 1A64  59		      C 	pop	cx			;
 1A65  C3		      C 	ret				;
 1A66			      C SM_ChPress	endp			;
			      C ;===============================================================|
			      C ;			Pitch Bend				|
			      C ;===============================================================|
			      C ;	引き数							|
			      C ;		CH	Track					|
			      C ;		AX	Pitch Bend				|
			      C ;	返り値							|
			      C ;		無し						|
			      C ;	処理							|
			      C ;		Pitch Bendの送信				|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 1A66			      C SM_PitchBend	proc near		;
 1A66  51		      C 	push	cx			;レジスタ保存
			      C 
 1A67  50		      C 	push	ax			;レジスタ保存
 1A68  B0 E0		      C 	mov	al,MIDI_Com_PitchBend	;
 1A6A  80 E5 0F		      C 	and	ch,MIDI_Channel_mask	;
 1A6D  0A C5		      C 	or	al,ch			;
 1A6F  E8 FF21		      C 	call	SM_Send_With_Running_Status	;コマンドの送信
 1A72  58		      C 	pop	ax			;レジスタ復帰
 1A73  50		      C 	push	ax			;レジスタ保存
 1A74  D1 E0		      C 	shl	ax,1			;
 1A76  D0 E8		      C 	shr	al,1			;
 1A78  25 7F7F		      C 	and	ax,07f7fh		;データの分離
 1A7B  E8 0080		      C 	call	C_Send_Word		;データの送信
 1A7E  58		      C 	pop	ax			;レジスタ復帰
			      C 
 1A7F  59		      C 	pop	cx			;レジスタ復帰
 1A80  C3		      C 	ret				;
 1A81			      C SM_PitchBend	endp			;
			      C ;===============================================================|
			      C endif
			      C 
				include	wtd_com.asm			;シリアル制御用サブルーチン
			      C ;=======================================================================|
			      C ;									|
			      C ;		Wander Swan Total Sound Driver				|
			      C ;				Serial Control				|
			      C ;									|
			      C ;					Programmed by			|
			      C ;						A.Watanabe		|
			      C ;									|
			      C ;=======================================================================|
			      C ifndef	hyoka
			      C ;===============================================================|
			      C ;			I/O Address				|
			      C ;===============================================================|
 = 00B1			      C COMM_DATA		equ	0b1h	;Send / Receive data
 = 00B3			      C COMM_STATUS		equ	0b3h	;Serial Status
			      C ;===============================================================|
			      C ;			INT Status bit flag			|
			      C ;===============================================================|
 = 0001			      C INT_CommSendSet		equ	001h	;CommSend値セット　(or)
 = 00FE			      C INT_CommSendReset	equ	0feh	;CommSend値リセット(and)
			      C ;===============================================================|
			      C ;			COMM Status bit flag			|
			      C ;===============================================================|
 = 0001			      C COMM_Receive		equ	001h	;受信データ有り（受信可）
 = 0002			      C COMM_OverRun		equ	002h	;オーバーラン・エラー
 = 0004			      C COMM_SendEmpty		equ	004h	;送信バッファ空（送信可）
 = 0020			      C COMM_OrReset		equ	020h	;オーバーラン・エラーのリセット
 = 0000			      C COMM_Baudrate9K		equ	000h	;ボーレート（ 9600 [bps])(+)
 = 0040			      C COMM_Baudrate38k	equ	040h	;ボーレート（38400 [bps])(+)
 = 0080			      C COMM_Enable		equ	080h	;通信イネーブル(or)
 = 007F			      C COMM_Disable		equ	07fh	;通信ディセーブル(and)
			      C ;===============================================================|
			      C ;			定数					|
			      C ;===============================================================|
 = FFFF			      C COMM_TimeOut		equ	0ffffh	;タイムアウトの時間
			      C ;===============================================================|
			      C ;			通信回線を開く				|
			      C ;===============================================================|
			      C ;	引き数							|
			      C ;		無し						|
			      C ;	返り値							|
			      C ;		無し						|
			      C ;	処理							|
			      C ;		回線を38400bpsに設定、通信回線を開く。		|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 1A82			      C C_Open	proc near	uses ax		;
			      C 	
 1A82  50		   *	    push   ax
 1A83  B0 E0		      C 	mov	al,COMM_OrReset + COMM_Baudrate38k + COMM_Enable
 1A85  E6 B3		      C 	out	COMM_Status,al		;
			      C 
			      C 	ret				;
 1A87  58		   *	    pop    ax
 1A88  C3		   *	    ret    00000h
 1A89			      C C_Open	endp				;
			      C ;===============================================================|
			      C ;			通信回線を閉じる			|
			      C ;===============================================================|
			      C ;	引き数							|
			      C ;		無し						|
			      C ;	返り値							|
			      C ;		無し						|
			      C ;	処理							|
			      C ;		通信回線を閉じる。				|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 1A8A			      C C_Close	proc near	uses ax		;
			      C 
 1A8A  50		   *	    push   ax
			      C 	.repeat
 1A8B			   *@C0135:
 1A8B  E4 B3		      C 	  in	al,COMM_Status			;ステータス読み込み
			      C 	  .break  .if	!(al&COMM_Enable)	;通信機能はイネーブル？
 1A8D  A8 80		   *	    test   al, COMM_Enable
 1A8F  74 04		   *	    je     @C0137
			      C 	.until		 (al&COMM_SendEmpty)	;送信データ空？
 1A91  A8 04		   *	    test   al, COMM_SendEmpty
 1A93  74 F6		   *	    je     @C0135
 1A95			   *@C0137:
 1A95  24 7F		      C 	and	al,COMM_Disable		;通信ディセーブル設定。
 1A97  E6 B3		      C 	out	COMM_Status,al		;出力
			      C 
 1A99  E4 B2		      C 	in	al,Int_Enable		;
 1A9B  24 FE		      C 	and	al,INT_CommSendReset	;シリアル送信エンプティー
 1A9D  E6 B2		      C 	out	Int_Enable,al		;割り込み禁止
			      C 
			      C 	ret				;
 1A9F  58		   *	    pop    ax
 1AA0  C3		   *	    ret    00000h
 1AA1			      C C_Close	endp				;
			      C ;===============================================================|
			      C ;			1 byte送信				|
			      C ;===============================================================|
			      C ;	引き数							|
			      C ;		al	send data				|
			      C ;	返り値							|
			      C ;		無し						|
			      C ;	処理							|
			      C ;		回線にデータを出力する。			|
			      C ;		送信中だったら、FIFOへ書き込み			|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 1AA2			      C C_Send	proc near	uses ax bx cx di si es
			      C 
 1AA2  50		   *	    push   ax
 1AA3  53		   *	    push   bx
 1AA4  51		   *	    push   cx
 1AA5  57		   *	    push   di
 1AA6  56		   *	    push   si
 1AA7  06		   *	    push   es
 1AA8  9C		      C 	pushf				;
 1AA9  FA		      C 	cli
			      C 
 1AAA  8B C8		      C 	mov	cx,ax
			      C 
 1AAC  E4 B2		      C 	in	al,Int_Enable		;
 1AAE  24 FE		      C 	and	al,INT_CommSendReset	;シリアル送信エンプティー
 1AB0  E6 B2		      C 	out	Int_Enable,al		;割り込み禁止
			      C 
			      C 	;ハードウェア送信バッファ ＆ ソフトウェアFIFOバッファ が両方とも空であるかチェック。
 1AB2  3E: 8B 9E 03AA	      C 	mov	bx,word ptr ds:[bp].WTD_WorkAdd_System+WTD_Sys_ComFIFO_Cnt
 1AB7  8D B6 03AC	      C 	lea	si,word ptr ds:[bp].WTD_WorkAdd_System+WTD_Sys_ComFIFO_Adr
 1ABB  E4 B3		      C 	in	al,COMM_Status		;ステータス読み込み
			      C 	.if	((!(al & COMM_SendEmpty))||(bx != word ptr ds:[si]))
 1ABD  A8 04		   *	    test   al, COMM_SendEmpty
 1ABF  74 04		   *	    je     @C013B
 1AC1  3B 1C		   *	    cmp    bx, word ptr ds : [si]
 1AC3  74 2C		   *	    je     @C013A
 1AC5			   *@C013B:
			      C 		;空ではなかった。（まだ送信中）
 1AC5  8B FB		      C 		mov	di,bx			;di ← 現在の書き込みポインタ
 1AC7  43		      C 		inc	bx			
			      C 		.if	(bx >= word ptr ds:[bp].WTD_WorkAdd_System+WTD_Sys_ComFIFO_Size)
 1AC8  3E: 3B 9E 03AE	   *	    cmp    bx, word ptr ds : [bp] . WTD_WorkAdd_System + WTD_Sys_ComFIFO_Size
 1ACD  72 02		   *	    jb     @C013D
 1ACF  33 DB		      C 			xor	bx,bx		;
			      C 		.endif				;bx ← 次の書き込みポインタ
			      C 		.while	(bx == word ptr ds:[si])
 1AD1			   *@C013D:
 1AD1  EB 03		   *	    jmp    @C013F
 1AD3			   *@C0140:
 1AD3  E8 0042		      C 			call	IC_Send		;FIFOの送信を試みる。
			      C 		.endw				;FIFOに空きが出来るまで繰り返す。
 1AD6			   *@C013F:
 1AD6  3B 1C		   *	    cmp    bx, word ptr ds : [si]
 1AD8  74 F9		   *	    je     @C0140
 1ADA  3E: 89 9E 03AA	      C 		mov	word ptr ds:[bp].WTD_WorkAdd_System+WTD_Sys_ComFIFO_Cnt,bx
			      C 
 1ADF  3E: C4 9E 039C	      C 		les	bx,dword ptr ds:[bp].(WTD_WorkAdd_System+WTD_Sys_ComFIFO_Offset)
 1AE4  8B C1		      C 		mov	ax,cx			;al←送信データ
 1AE6  26: 88 01	      C 		mov	byte ptr es:[di+bx],al	;FIFOバッファに書き込み
			      C 
 1AE9  E4 B2		      C 		in	al,Int_Enable		;バッファにデータが来たので、
 1AEB  0C 01		      C 		or	al,INT_CommSendSet	;シリアル送信エンプティー
 1AED  E6 B2		      C 		out	Int_Enable,al		;割り込み許可
			      C 
			      C 	.else
 1AEF  EB 04		   *	    jmp    @C0142
 1AF1			   *@C013A:
			      C 		;どっちも空だったら、FIFO割り込み使わないで直接出力する。
 1AF1  8B C1		      C 		mov	ax,cx			;al←送信データ
 1AF3  E6 B1		      C 		out	COMM_DATA,al		;送信
			      C 	.endif
 1AF5			   *@C0142:
			      C 
 1AF5  9D		      C 	popf				;
			      C 	ret				;
 1AF6  07		   *	    pop    es
 1AF7  5E		   *	    pop    si
 1AF8  5F		   *	    pop    di
 1AF9  59		   *	    pop    cx
 1AFA  5B		   *	    pop    bx
 1AFB  58		   *	    pop    ax
 1AFC  C3		   *	    ret    00000h
			      C ;----------------------------------------------------------------
			      C ;C_Send_0:
			      C ;	mov	di,ds:[bp].WTD_WorkAdd_System+WTD_Sys_ComFIFO_Cnt
			      C ;;	mov	di,ax			;ax←FIFOポインタCnt
			      C ;
			      C ;	mov	bx,ds:[bp].WTD_WorkAdd_System+WTD_Sys_ComFIFO_Cnt
			      C ;
			      C ;	inc	word ptr ds:[bp].WTD_WorkAdd_System+WTD_Sys_ComFIFO_Cnt
			      C ;	mov	ax,word ptr ds:[bp].WTD_WorkAdd_System+WTD_Sys_ComFIFO_Cnt
			      C ;	cmp	ax,word ptr ds:[bp].WTD_WorkAdd_System+WTD_Sys_ComFIFO_Size
			      C ;	jnz	C_Send_1		;
			      C ;	mov	word ptr ds:[bp].WTD_WorkAdd_System+WTD_Sys_ComFIFO_Cnt,0
			      C ;C_Send_1:				;
			      C ;	mov	ax,word ptr ds:[bp].WTD_WorkAdd_System+WTD_Sys_ComFIFO_Cnt
			      C ;	cmp	ax,word ptr ds:[bp].WTD_WorkAdd_System+WTD_Sys_ComFIFO_Adr
			      C ;	jnz	C_Send_3		;FIFOバッファはいっぱい？
			      C ;	mov	word ptr ds:[bp].WTD_WorkAdd_System+WTD_Sys_ComFIFO_Cnt,bx
			      C ;	call	IC_Send			;FIFOの送信を試みて、
			      C ;	jmp	C_Send_1		;やり直し。
			      C ;
			      C ;C_Send_3:				;
			      C ;;	mov	bx,word ptr ds:[bp].WTD_WorkAdd_System+WTD_Sys_ComFIFO_Offset
			      C ;;	mov	es,word ptr ds:[bp].WTD_WorkAdd_System+WTD_Sys_ComFIFO_Segment
			      C ;	les	bx,dword ptr ds:[bp].(WTD_WorkAdd_System+WTD_Sys_ComFIFO_Offset)
			      C ;	pop	ax			;FIFOバッファに書き込み
			      C ;	push	ax			;
			      C ;	mov	byte ptr es:[di+bx],al	;
			      C ;
			      C ;C_Send_e:
			      C ;	in	al,Int_Enable		;バッファにデータが来たので、
			      C ;	or	al,INT_CommSendSet	;シリアル送信エンプティー
			      C ;	out	Int_Enable,al		;割り込み許可
			      C ;
			      C ;	pop	ax			;
			      C ;	pop	bx			;
			      C ;	pop	di			;レジスタ復帰
			      C ;	pop	es			;
			      C ;	popf				;
			      C ;	ret				;
 1AFD			      C C_Send	endp				;
			      C ;===============================================================|
			      C ;			2 byte送信				|
			      C ;===============================================================|
			      C ;	引き数							|
			      C ;		ax	send data(al:LSB,ah:MSB)		|
			      C ;	返り値							|
			      C ;		無し						|
			      C ;	処理							|
			      C ;		回線にデータを出力する。			|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 1AFE			      C C_Send_Word	proc near		;
 1AFE  E8 FFA1		      C 	call	C_Send			;
 1B01  86 C4		      C 	xchg	al,ah			;
 1B03  E8 FF9C		      C 	call	C_Send			;
 1B06  86 C4		      C 	xchg	al,ah			;
 1B08  C3		      C 	ret				;
 1B09			      C C_Send_Word	endp			;
			      C ;===============================================================|
			      C ;			ブロック送信				|
			      C ;===============================================================|
			      C ;	引き数							|
			      C ;		CX	Size					|
			      C ;		DS:SI	Data Address				|
			      C ;	返り値							|
			      C ;		無し						|
			      C ;	処理							|
			      C ;		回線にデータを出力する。			|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 1B0A			      C C_Send_Block	proc near	uses ax cx si
			      C 
 1B0A  50		   *	    push   ax
 1B0B  51		   *	    push   cx
 1B0C  56		   *	    push   si
			      C 	.repeat
 1B0D			   *@C0143:
 1B0D  AC		      C 		lodsb			;
 1B0E  E8 FF91		      C 		call	C_Send		;送信
			      C 	.untilcxz
 1B11  E2 FA		   *	    loop   @C0143
			      C 
			      C 	ret				;
 1B13  5E		   *	    pop    si
 1B14  59		   *	    pop    cx
 1B15  58		   *	    pop    ax
 1B16  C3		   *	    ret    00000h
 1B17			      C C_Send_Block	endp			;
			      C ;===============================================================|
			      C ;			1 byte送信				|
			      C ;===============================================================|
			      C ;	引き数							|
			      C ;		FIFO	send data				|
			      C ;	返り値							|
			      C ;		無し						|
			      C ;	処理							|
			      C ;		FIFOから回線にデータを出力する。		|
			      C ;===============================================================|
			      C 	even				;偶数アドレス配置
 1B18			      C IC_Send	proc	near	uses ax bx dx di es
 1B18  50		   *	    push   ax
 1B19  53		   *	    push   bx
 1B1A  52		   *	    push   dx
 1B1B  57		   *	    push   di
 1B1C  06		   *	    push   es
 1B1D  9C		      C 	pushf				;
 1B1E  FA		      C 	cli				;
			      C 
			      C ;---------------------------------------------------------------
 1B1F  E4 B2		      C 	in	al,Int_Enable		;
 1B21  24 FE		      C 	and	al,INT_CommSendReset	;シリアル送信エンプティー
 1B23  E6 B2		      C 	out	Int_Enable,al		;割り込み禁止
			      C 
 1B25  3E: 8B 96 03AA	      C 	mov	dx,word ptr ds:[bp].WTD_WorkAdd_System+WTD_Sys_ComFIFO_Cnt
 1B2A  3E: 8B 9E 03AC	      C 	mov	bx,word ptr ds:[bp].WTD_WorkAdd_System+WTD_Sys_ComFIFO_Adr
			      C 	.if	(dx != bx)			;空だったら処理しない。
 1B2F  3B D3		   *	    cmp    dx, bx
 1B31  74 2D		   *	    je     @C0144
			      C 
			      C 	   ;まだハードウェアで送信中だったら、FIFO送信はしない。
 1B33  E4 B3		      C 	   in	al,COMM_Status			;ステータス読み込み
			      C 	   .if	(al & COMM_SendEmpty)		;送信バッファ空？
 1B35  A8 04		   *	    test   al, COMM_SendEmpty
 1B37  74 1D		   *	    je     @C0146
 1B39  8B FB		      C 		mov	di,bx			;di ← 現在の読み込みポインタ
 1B3B  43		      C 		inc	bx			;
			      C 		.if	(bx >= word ptr ds:[bp].WTD_WorkAdd_System+WTD_Sys_ComFIFO_Size)
 1B3C  3E: 3B 9E 03AE	   *	    cmp    bx, word ptr ds : [bp] . WTD_WorkAdd_System + WTD_Sys_ComFIFO_Size
 1B41  72 02		   *	    jb     @C0148
 1B43  33 DB		      C 			xor	bx,bx		;
			      C 		.endif				;bx ← 次の読み込みポインタ
 1B45			   *@C0148:
 1B45  3E: 89 9E 03AC	      C 		mov	word ptr ds:[bp].WTD_WorkAdd_System+WTD_Sys_ComFIFO_Adr,bx
 1B4A  53		      C 		push	bx			;
 1B4B  3E: C4 9E 039C	      C 		les	bx,dword ptr ds:[bp].(WTD_WorkAdd_System+WTD_Sys_ComFIFO_Offset)
 1B50  26: 8A 01	      C 		mov	al,byte ptr es:[di+bx]	;
 1B53  E6 B1		      C 		out	COMM_DATA,al		;送信
 1B55  5B		      C 		pop	bx			;
			      C 	   .endif				;
			      C 	   .if	(dx != bx)			;空だったら処理しない。（送信後の再check）
 1B56			   *@C0146:
 1B56  3B D3		   *	    cmp    dx, bx
 1B58  74 06		   *	    je     @C014A
 1B5A  E4 B2		      C 		in	al,Int_Enable		;
 1B5C  0C 01		      C 		or	al,INT_CommSendSet	;シリアル送信エンプティー
 1B5E  E6 B2		      C 		out	Int_Enable,al		;割り込み許可
			      C 	   .endif
			      C 	.endif
 1B60			   *@C014A:
 1B60			   *@C0144:
			      C 
 1B60  9D		      C 	popf				;
			      C 	ret				;
 1B61  07		   *	    pop    es
 1B62  5F		   *	    pop    di
 1B63  5A		   *	    pop    dx
 1B64  5B		   *	    pop    bx
 1B65  58		   *	    pop    ax
 1B66  C3		   *	    ret    00000h
 1B67			      C IC_Send	endp
			      C ;===============================================================|
			      C endif
			      C 

 1B67				_TEXT	ends

				;=======================================================================|
				;				グローバル変数				|
				;=======================================================================|
				ifdef	library				;※　ライブラリ版のみ必要
 0000				_BSS	segment para public 'BSS'

				include wtd_lib.asm			;ライブラリ版　データ領域
			      C ;=======================================================================|
			      C ;									|
			      C ;		Wander Swan Total Sound Driver				|
			      C ;				Work erea for library			|
			      C ;									|
			      C ;					Programmed by			|
			      C ;						A.Watanabe		|
			      C ;									|
			      C ;=======================================================================|
			      C ;****************************************************************
			      C ;*								*
			      C ;*			グローバル変数 外部宣言			*
			      C ;*								*
			      C ;****************************************************************
			      C 	public	_WTD_Work		;制御用ワーク
			      C 
			      C ;****************************************************************
			      C ;*								*
			      C ;*			グローバル変数 実体			*
			      C ;*								*
			      C ;****************************************************************
			      C ;-------------------------------
			      C ;制御用ワーク
			      C ;-------------------------------
			      C 
			      C ifdef	hyoka	;------------------------
			      C ;static	cahr		WTD_Work[0x0800]	;MIDI無し版は、2kByte要
			      C _WTD_Work:		db	0800h	dup	(?)
			      C else	;--------------------------------
			      C ;static	cahr		WTD_Work[0x1000]	;MIDI有り版は、4kByte要
 0000  1000 [		      C _WTD_Work:		db	1000h	dup	(?)
        00
       ]
			      C endif	;--------------------------------
			      C 
			      C 

 1000				_BSS	ends
				endif
				;=======================================================================|

					end
Microsoft (R) Macro Assembler Version 6.11		    10/20/11 12:11:05
WTD.asm							     Symbols 2 - 1




Macros:

                N a m e                 Type

ROM0_GET_MAP . . . . . . . . . .	Proc
ROM0_SET_MAP . . . . . . . . . .	Proc
ROM1_GET_MAP . . . . . . . . . .	Proc
ROM1_SET_MAP . . . . . . . . . .	Proc
SRAM_GET_MAP . . . . . . . . . .	Proc
SRAM_SET_MAP . . . . . . . . . .	Proc
WTD_WorkGet  . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

ProcContext  . . . . . . . . . .	 0060
  ProcContext_id . . . . . . . .	 0000	     Byte
  ProcContext_pid  . . . . . . .	 0004	     Word
  ProcContext_ppid . . . . . . .	 0006	     Word
  ProcContext_pcbid  . . . . . .	 0008	     Word
  ProcContext_ppcbib . . . . . .	 000A	     Word
  ProcContext_ilib . . . . . . .	 000C	     DWord
  ProcContext_proc . . . . . . .	 0010	     DWord
  ProcContext_cwfs . . . . . . .	 0014	     DWord
  ProcContext_currentdir . . . .	 0018	     Byte
  ProcContext_argv . . . . . . .	 0058	     Word
  ProcContext_resource . . . . .	 005A	     DWord
  ProcContext_heap . . . . . . .	 005E	     Word
ProcControl  . . . . . . . . . .	 0010
  ProcControl_status . . . . . .	 0000	     Word
  ProcControl_exit_code  . . . .	 0002	     Word
  ProcControl_born . . . . . . .	 0004	     DWord
  ProcControl_started  . . . . .	 0008	     DWord
  ProcControl_ellapse  . . . . .	 000C	     DWord
RiffHed  . . . . . . . . . . . .	 0009
  RiffHed_Head . . . . . . . . .	 0000	     Byte
  RiffHed_Size . . . . . . . . .	 0004	     DWord
  RiffHed_Data . . . . . . . . .	 0008	     Byte
Riff . . . . . . . . . . . . . .	 000D
  Riff_Head  . . . . . . . . . .	 0000	     Byte
  Riff_Size  . . . . . . . . . .	 0004	     DWord
  Riff_Type  . . . . . . . . . .	 0008	     Byte
  Riff_Data  . . . . . . . . . .	 000C	     Byte
WTD_ChEmb  . . . . . . . . . . .	 0005
  WTD_ChEmb_Address  . . . . . .	 0000	     Byte
  WTD_ChEmb_Rate . . . . . . . .	 0001	     Byte
  WTD_ChEmb_Counter  . . . . . .	 0002	     Byte
  WTD_ChEmb_MaxMin . . . . . . .	 0003	     Byte
  WTD_ChEmb_LevelSet . . . . . .	 0004	     Byte
WTD_ChLfo  . . . . . . . . . . .	 0009
  WTD_ChLfo_DecayRate  . . . . .	 0000	     Byte
  WTD_ChLfo_SpeedRate  . . . . .	 0001	     Byte
  WTD_ChLfo_Level  . . . . . . .	 0002	     Word
  WTD_ChLfo_Count  . . . . . . .	 0004	     Byte
  WTD_ChLfo_RateCounter  . . . .	 0005	     Byte
  WTD_ChLfo_LevelSet . . . . . .	 0006	     Word
  WTD_ChLfo_CountCounter . . . .	 0008	     Byte
WTD_Emb  . . . . . . . . . . . .	 0010
  WTD_Emb_AR . . . . . . . . . .	 0000	     Byte
  WTD_Emb_AS . . . . . . . . . .	 0001	     Byte
  WTD_Emb_AL . . . . . . . . . .	 0002	     Byte
  WTD_Emb_FL . . . . . . . . . .	 0003	     Byte
  WTD_Emb_DR . . . . . . . . . .	 0004	     Byte
  WTD_Emb_DS . . . . . . . . . .	 0005	     Byte
  WTD_Emb_DL . . . . . . . . . .	 0006	     Byte
  WTD_Emb_Null1  . . . . . . . .	 0007	     Byte
  WTD_Emb_SR . . . . . . . . . .	 0008	     Byte
  WTD_Emb_SS . . . . . . . . . .	 0009	     Byte
  WTD_Emb_SL . . . . . . . . . .	 000A	     Byte
  WTD_Emb_Null2  . . . . . . . .	 000B	     Byte
  WTD_Emb_RR . . . . . . . . . .	 000C	     Byte
  WTD_Emb_RS . . . . . . . . . .	 000D	     Byte
  WTD_Emb_RL . . . . . . . . . .	 000E	     Byte
  WTD_Emb_Null3  . . . . . . . .	 000F	     Byte
WTD_MusEx  . . . . . . . . . . .	 0000
WTD_Mus  . . . . . . . . . . . .	 0012
  WTD_Mus_Name . . . . . . . . .	 0000	     Byte
  WTD_Mus_Version  . . . . . . .	 0004	     Word
  WTD_Mus_Extr . . . . . . . . .	 0006	     Word
  WTD_Mus_Emb  . . . . . . . . .	 0008	     Byte
  WTD_Mus_Voice  . . . . . . . .	 0009	     Byte
  WTD_Mus_Part . . . . . . . . .	 000A	     Byte
  WTD_Mus_TimeBase . . . . . . .	 000B	     Byte
  WTD_Mus_ExtrAdr  . . . . . . .	 000C	     Word
  WTD_Mus_DataAdr  . . . . . . .	 000E	     Word
  WTD_Mus_PartAdr  . . . . . . .	 0010	     Word
WTD_Sys  . . . . . . . . . . . .	 0034
  WTD_Sys_Flag . . . . . . . . .	 0000	     Word
  WTD_Sys_ProgramOffset  . . . .	 0002	     Word
  WTD_Sys_ProgramSegment . . . .	 0004	     Word
  WTD_Sys_MusicOffset  . . . . .	 0006	     Word
  WTD_Sys_MusicSegment . . . . .	 0008	     Word
  WTD_Sys_EffectOffset . . . . .	 000A	     Word
  WTD_Sys_EffectSegment  . . . .	 000C	     Word
  WTD_Sys_PcmOffset  . . . . . .	 000E	     Word
  WTD_Sys_PcmSegment . . . . . .	 0010	     Word
  WTD_Sys_StayOutMask  . . . . .	 0012	     Word
  WTD_Sys_OldIntvector . . . . .	 0014	     Word
  WTD_Sys_OldIntvectorCom  . . .	 0018	     Word
  WTD_Sys_ComFIFO_Offset . . . .	 001C	     Word
  WTD_Sys_ComFIFO_Segment  . . .	 001E	     Word
  WTD_Sys_PCMVoice . . . . . . .	 0020	     Byte
  WTD_Sys_VolumeMusic  . . . . .	 0021	     Byte
  WTD_Sys_VolumeEffect . . . . .	 0022	     Byte
  WTD_Sys_VolumePCM  . . . . . .	 0023	     Byte
  WTD_Sys_Tempo  . . . . . . . .	 0024	     Word
  WTD_Sys_TempoCounter . . . . .	 0026	     Word
  WTD_Sys_MusicPart  . . . . . .	 0028	     Byte
  WTD_Sys_EffectPart . . . . . .	 0029	     Byte
  WTD_Sys_ComFIFO_Cnt  . . . . .	 002A	     Word
  WTD_Sys_ComFIFO_Adr  . . . . .	 002C	     Word
  WTD_Sys_ComFIFO_Size . . . . .	 002E	     Word
  WTD_Sys_RunningStatus  . . . .	 0030	     Byte
  WTD_Sys_InterruptBase  . . . .	 0031	     Byte
  WTD_Sys_VoiceTableOffset . . .	 0032	     Word
WTD  . . . . . . . . . . . . . .	 0077
  WTD_FlagControl  . . . . . . .	 0000	     Word
  WTD_FlagTai  . . . . . . . . .	 0002	     Byte
  WTD_FlagSharp  . . . . . . . .	 0003	     Byte
  WTD_FlagFlat . . . . . . . . .	 0004	     Byte
  WTD_Channel  . . . . . . . . .	 0005	     Byte
  WTD_Address  . . . . . . . . .	 0006	     Word
  WTD_LoopCount  . . . . . . . .	 0008	     Byte
  WTD_LoopCountPointer . . . . .	 0010	     Byte
  WTD_Program  . . . . . . . . .	 0011	     Byte
  WTD_SweepLevel . . . . . . . .	 0012	     Byte
  WTD_SweepTime  . . . . . . . .	 0013	     Byte
  WTD_Leng . . . . . . . . . . .	 0014	     Word
  WTD_LengCounter  . . . . . . .	 0016	     Word
  WTD_LengDefault  . . . . . . .	 0018	     Word
  WTD_KeyOffTime . . . . . . . .	 001A	     Word
  WTD_KeyOnDelay . . . . . . . .	 001C	     Word
  WTD_KeyShift . . . . . . . . .	 001E	     Byte
  WTD_Key  . . . . . . . . . . .	 001F	     Byte
  WTD_KeySet . . . . . . . . . .	 0020	     Byte
  WTD_KeySetPointer  . . . . . .	 0028	     Byte
  WTD_AcsentVelocity . . . . . .	 0029	     Byte
  WTD_BendSet  . . . . . . . . .	 002A	     Word
  WTD_Bend . . . . . . . . . . .	 002C	     Word
  WTD_BendDetune . . . . . . . .	 002E	     Word
  WTD_BendLfoDecayRate . . . . .	 0030	     Byte
  WTD_BendLfoSpeedRate . . . . .	 0031	     Byte
  WTD_BendLfoLevel . . . . . . .	 0032	     Word
  WTD_BendLfoCount . . . . . . .	 0034	     Byte
  WTD_BendLfoRateCounter . . . .	 0035	     Byte
  WTD_BendLfoLevelSet  . . . . .	 0036	     Word
  WTD_BendLfoCountCounter  . . .	 0038	     Byte
  WTD_BendEmbAddress . . . . . .	 0039	     Byte
  WTD_BendEmbRate  . . . . . . .	 003A	     Byte
  WTD_BendEmbCounter . . . . . .	 003B	     Byte
  WTD_BendEmbMaxMin  . . . . . .	 003C	     Byte
  WTD_BendEmbLevelSet  . . . . .	 003D	     Byte
  WTD_Null_3E  . . . . . . . . .	 003E	     Byte
  WTD_ExprPanSet . . . . . . . .	 003F	     Byte
  WTD_ExprSet  . . . . . . . . .	 0040	     Byte
  WTD_Expr . . . . . . . . . . .	 0041	     Byte
  WTD_ExprDetune . . . . . . . .	 0042	     Word
  WTD_ExprLfoDecayRate . . . . .	 0044	     Byte
  WTD_ExprLfoSpeedRate . . . . .	 0045	     Byte
  WTD_ExprLfoLevel . . . . . . .	 0046	     Word
  WTD_ExprLfoCount . . . . . . .	 0048	     Byte
  WTD_ExprLfoRateCounter . . . .	 0049	     Byte
  WTD_ExprLfoLevelSet  . . . . .	 004A	     Word
  WTD_ExprLfoCountCounter  . . .	 004C	     Byte
  WTD_ExprEmbAddress . . . . . .	 004D	     Byte
  WTD_ExprEmbRate  . . . . . . .	 004E	     Byte
  WTD_ExprEmbCounter . . . . . .	 004F	     Byte
  WTD_ExprEmbMaxMin  . . . . . .	 0050	     Byte
  WTD_ExprEmbLevelSet  . . . . .	 0051	     Byte
  WTD_WorkAddress  . . . . . . .	 0052	     Byte
  WTD_OctaveSet  . . . . . . . .	 0053	     Byte
  WTD_Octave . . . . . . . . . .	 0054	     Byte
  WTD_GateTime8  . . . . . . . .	 0055	     Byte
  WTD_GateTimeStepLast . . . . .	 0056	     Word
  WTD_GateTimeStepFirst  . . . .	 0058	     Word
  WTD_VolumeUpDown . . . . . . .	 005A	     Byte
  WTD_ModDecay . . . . . . . . .	 005B	     Word
  WTD_ModLevel . . . . . . . . .	 005D	     Byte
  WTD_ModLevelSet  . . . . . . .	 005E	     Byte
  WTD_Null_5F  . . . . . . . . .	 005F	     Byte
  WTD_PanSet . . . . . . . . . .	 0060	     Byte
  WTD_Pan  . . . . . . . . . . .	 0061	     Byte
  WTD_PanDetune  . . . . . . . .	 0062	     Word
  WTD_PanLfoDecayRate  . . . . .	 0064	     Byte
  WTD_PanLfoSpeedRate  . . . . .	 0065	     Byte
  WTD_PanLfoLevel  . . . . . . .	 0066	     Word
  WTD_PanLfoCount  . . . . . . .	 0068	     Byte
  WTD_PanLfoRateCounter  . . . .	 0069	     Byte
  WTD_PanLfoLevelSet . . . . . .	 006A	     Word
  WTD_PanLfoCountCounter . . . .	 006C	     Byte
  WTD_PanEmbAddress  . . . . . .	 006D	     Byte
  WTD_PanEmbRate . . . . . . . .	 006E	     Byte
  WTD_PanEmbCounter  . . . . . .	 006F	     Byte
  WTD_PanEmbMaxMin . . . . . . .	 0070	     Byte
  WTD_PanEmbLevelSet . . . . . .	 0071	     Byte
  WTD_ProgramRate  . . . . . . .	 0072	     Word
  WTD_Program1st . . . . . . . .	 0074	     Byte
  WTD_Program2nd . . . . . . . .	 0075	     Byte
  WTD_Program3rd . . . . . . . .	 0076	     Byte
WaveData . . . . . . . . . . . .	 0009
  WaveData_Head  . . . . . . . .	 0000	     Byte
  WaveData_Size  . . . . . . . .	 0004	     DWord
  WaveData_Data  . . . . . . . .	 0008	     Byte
WaveFmt  . . . . . . . . . . . .	 0018
  WaveFmt_Head . . . . . . . . .	 0000	     Byte
  WaveFmt_Size . . . . . . . . .	 0004	     DWord
  WaveFmt_Type . . . . . . . . .	 0008	     Word
  WaveFmt_Channel  . . . . . . .	 000A	     Word
  WaveFmt_SamplingRate . . . . .	 000C	     DWord
  WaveFmt_SamplingSec  . . . . .	 0010	     DWord
  WaveFmt_DataSize . . . . . . .	 0014	     Word
  WaveFmt_ChannelSize  . . . . .	 0016	     Word
xmodeminfo . . . . . . . . . . .	 0010
  xmodeminfo_state . . . . . . .	 0000	     Word
  xmodeminfo_mode  . . . . . . .	 0002	     Byte
  xmodeminfo_retry_c . . . . . .	 0003	     Byte
  xmodeminfo_block_c . . . . . .	 0004	     Word
  xmodeminfo_block_max . . . . .	 0006	     Word
  xmodeminfo_block_sixa  . . . .	 0008	     Word
  xmodeminfo_bank  . . . . . . .	 000A	     Word
  xmodeminfo_offset  . . . . . .	 000C	     Word
  xmodeminfo_timeout_c . . . . .	 000E	     Word


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

CGROUP . . . . . . . . . . . . .	GROUP
_TEXT  . . . . . . . . . . . . .	16 Bit	 1B67	  Para	  Public  'CODE'	
DGROUP . . . . . . . . . . . . .	GROUP
DATA . . . . . . . . . . . . . .	16 Bit	 0000	  Para	  Public  'DATA'	
_BSS . . . . . . . . . . . . . .	16 Bit	 1000	  Para	  Public  'BSS'  


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

C_Close  . . . . . . . . . . . .	P Near	 1A8A	  _TEXT	Length= 0017 Private
C_Open . . . . . . . . . . . . .	P Near	 1A82	  _TEXT	Length= 0007 Private
C_Send_Block . . . . . . . . . .	P Near	 1B0A	  _TEXT	Length= 000D Private
C_Send_Word  . . . . . . . . . .	P Near	 1AFE	  _TEXT	Length= 000B Private
C_Send . . . . . . . . . . . . .	P Near	 1AA2	  _TEXT	Length= 005B Private
IC_Send  . . . . . . . . . . . .	P Near	 1B18	  _TEXT	Length= 004F Private
I_PlayCommand  . . . . . . . . .	P Near	 10C4	  _TEXT	Length= 0015 Private
I_PlayKey_Auto . . . . . . . . .	P Near	 0F36	  _TEXT	Length= 0018 Private
I_PlayKey  . . . . . . . . . . .	P Near	 0F56	  _TEXT	Length= 006E Private
I_Play_Emb . . . . . . . . . . .	P Near	 0DE0	  _TEXT	Length= 007A Private
I_Play_Frection  . . . . . . . .	P Near	 0C2A	  _TEXT	Length= 004F Private
I_Play_KeyOff_Emb  . . . . . . .	P Near	 0DAC	  _TEXT	Length= 0034 Private
I_Play_KeyOff  . . . . . . . . .	P Near	 0BCE	  _TEXT	Length= 005B Private
I_Play_KeyOn_Emb . . . . . . . .	P Near	 0D76	  _TEXT	Length= 0035 Private
I_Play_KeyOn_LFO . . . . . . . .	P Near	 0D5A	  _TEXT	Length= 001C Private
I_Play_KeyOn . . . . . . . . . .	P Near	 0B3C	  _TEXT	Length= 0092 Private
I_Play_LFO . . . . . . . . . . .	P Near	 0E5A	  _TEXT	Length= 0038 Private
I_Play_Loop  . . . . . . . . . .	P Near	 0B1C	  _TEXT	Length= 001F Private
I_Play_Pan . . . . . . . . . . .	P Near	 0CFA	  _TEXT	Length= 005F Private
I_Play_Volume  . . . . . . . . .	P Near	 0C7A	  _TEXT	Length= 007F Private
I_Play . . . . . . . . . . . . .	P Near	 0A6C	  _TEXT	Length= 00B0 Private
I_Read16 . . . . . . . . . . . .	P Near	 0F23	  _TEXT	Length= 0012 Private
I_Read8  . . . . . . . . . . . .	P Near	 0F11	  _TEXT	Length= 0012 Private
I_SP_Volume  . . . . . . . . . .	P Near	 165E	  _TEXT	Length= 007D Private
IntVector_Get  . . . . . . . . .	P Near	 17D0	  _TEXT	Length= 0003 Private
SM_BankProgram . . . . . . . . .	P Near	 1A3A	  _TEXT	Length= 0016 Private
SM_ChPress . . . . . . . . . . .	P Near	 1A50	  _TEXT	Length= 0016 Private
SM_ControlByte . . . . . . . . .	P Near	 19E4	  _TEXT	Length= 0018 Private
SM_ControlWord . . . . . . . . .	P Near	 19FC	  _TEXT	Length= 0028 Private
SM_KeyOn . . . . . . . . . . . .	P Near	 19C0	  _TEXT	Length= 0012 Private
SM_KeyPress  . . . . . . . . . .	P Near	 19D2	  _TEXT	Length= 0012 Private
SM_PitchBend . . . . . . . . . .	P Near	 1A66	  _TEXT	Length= 001B Private
SM_Program . . . . . . . . . . .	P Near	 1A24	  _TEXT	Length= 0016 Private
SM_init  . . . . . . . . . . . .	P Near	 19A4	  _TEXT	Length= 001A Private
SP_Get_Channel . . . . . . . . .	P Near	 1942	  _TEXT	Length= 0005 Private
SP_Get_Output  . . . . . . . . .	P Near	 1952	  _TEXT	Length= 0005 Private
SP_Get_PCMVoice  . . . . . . . .	P Near	 1974	  _TEXT	Length= 0003 Private
SP_Get_Random  . . . . . . . . .	P Near	 1958	  _TEXT	Length= 0003 Private
SP_Get_VolumePCM . . . . . . . .	P Near	 1966	  _TEXT	Length= 0003 Private
SP_Set_Channel . . . . . . . . .	P Near	 18E2	  _TEXT	Length= 001F Private
SP_Set_Frection  . . . . . . . .	P Near	 1850	  _TEXT	Length= 0028 Private
SP_Set_Noise . . . . . . . . . .	P Near	 18C2	  _TEXT	Length= 001F Private
SP_Set_Output  . . . . . . . . .	P Near	 1948	  _TEXT	Length= 0009 Private
SP_Set_PCMVoice  . . . . . . . .	P Near	 196A	  _TEXT	Length= 0009 Private
SP_Set_Sweep . . . . . . . . . .	P Near	 18A0	  _TEXT	Length= 0021 Private
SP_Set_VoiceAdd  . . . . . . . .	P Near	 193A	  _TEXT	Length= 0008 Private
SP_Set_Voice . . . . . . . . . .	P Near	 1902	  _TEXT	Length= 0038 Private
SP_Set_VolumePCM . . . . . . . .	P Near	 195C	  _TEXT	Length= 0009 Private
SP_Set_Volume  . . . . . . . . .	P Near	 1878	  _TEXT	Length= 0028 Private
SP_Set_with_mask . . . . . . . .	P Near	 1978	  _TEXT	Length= 0011 Private
SP_init  . . . . . . . . . . . .	P Near	 1812	  _TEXT	Length= 003D Private
T_Set_Frection . . . . . . . . .	P Near	 180E	  _TEXT	Length= 0003 Private
T_Set_Status . . . . . . . . . .	P Near	 1804	  _TEXT	Length= 0009 Private
T_close  . . . . . . . . . . . .	P Near	 17E6	  _TEXT	Length= 0013 Private
T_init . . . . . . . . . . . . .	P Near	 17FA	  _TEXT	Length= 0009 Private
T_open . . . . . . . . . . . . .	P Near	 17D4	  _TEXT	Length= 0012 Private
WTD_FunctionLoad . . . . . . . .	P Near	 0093	  _TEXT	Length= 002F Public C
  Wtd_Function . . . . . . . . .	Word	 bp + 0004
_ChangeFar . . . . . . . . . . .	P Far	 0753	  _TEXT	Length= 0013 Public C
  fptData  . . . . . . . . . . .	DWord	 bp + 0006
_EffectPlay  . . . . . . . . . .	P Far	 03FD	  _TEXT	Length= 0169 Public C
  fptEffect  . . . . . . . . . .	DWord	 bp + 0006
_EffectStop  . . . . . . . . . .	P Far	 0566	  _TEXT	Length= 005B Public C
_GetEffectVolume . . . . . . . .	P Far	 07DC	  _TEXT	Length= 0016 Public C
_GetInfo . . . . . . . . . . . .	P Far	 00C2	  _TEXT	Length= 0006 Public C
_GetMusicVolume  . . . . . . . .	P Far	 07A9	  _TEXT	Length= 0016 Public C
_GetPcmVolume  . . . . . . . . .	P Far	 0814	  _TEXT	Length= 0016 Public C
_Init  . . . . . . . . . . . . .	P Far	 01C4	  _TEXT	Length= 0030 Public C
_MusicPlay . . . . . . . . . . .	P Far	 01F4	  _TEXT	Length= 0170 Public C
  fptMusic . . . . . . . . . . .	DWord	 bp + 0006
_MusicStop . . . . . . . . . . .	P Far	 0364	  _TEXT	Length= 0207 Public C
_PcmPlay . . . . . . . . . . . .	P Far	 05C1	  _TEXT	Length= 00F4 Public C
  fptPCM . . . . . . . . . . . .	DWord	 bp + 0006
_PcmStop . . . . . . . . . . . .	P Far	 06B5	  _TEXT	Length= 0026 Public C
_PcmVoiceSet . . . . . . . . . .	P Far	 06DB	  _TEXT	Length= 003C Public C
  cNumber  . . . . . . . . . . .	Byte	 bp + 0006
  fptWave  . . . . . . . . . . .	DWord	 bp + 0008
_SetEffectVolume . . . . . . . .	P Far	 07BF	  _TEXT	Length= 001D Public C
  cVolume  . . . . . . . . . . .	Byte	 bp + 0006
_SetFIFO . . . . . . . . . . . .	P Far	 082A	  _TEXT	Length= 003F Public C
  szFIFO . . . . . . . . . . . .	Word	 bp + 0006
  fptFIFO  . . . . . . . . . . .	DWord	 bp + 0008
_SetMusicVolume  . . . . . . . .	P Far	 078C	  _TEXT	Length= 001D Public C
  cVolume  . . . . . . . . . . .	Byte	 bp + 0006
_SetPcmVolume  . . . . . . . . .	P Far	 07F2	  _TEXT	Length= 0022 Public C
  cVolume  . . . . . . . . . . .	Byte	 bp + 0006
_SoftEmbSet  . . . . . . . . . .	P Far	 0717	  _TEXT	Length= 003C Public C
  cNumber  . . . . . . . . . . .	Byte	 bp + 0006
  fptWave  . . . . . . . . . . .	DWord	 bp + 0008
_SoundGetChannel . . . . . . . .	P Far	 0773	  _TEXT	Length= 0004 Public C
_SoundGetOutput  . . . . . . . .	P Far	 0784	  _TEXT	Length= 0004 Public C
_SoundGetRandom  . . . . . . . .	P Far	 0788	  _TEXT	Length= 0004 Public C
_SoundSetChannel . . . . . . . .	P Far	 0766	  _TEXT	Length= 000D Public C
  iMode  . . . . . . . . . . . .	Word	 bp + 0006
_SoundSetOutput  . . . . . . . .	P Far	 0777	  _TEXT	Length= 000D Public C
  iMode  . . . . . . . . . . . .	Word	 bp + 0006
_StayOut . . . . . . . . . . . .	P Far	 0178	  _TEXT	Length= 004C Public C
_Stay  . . . . . . . . . . . . .	P Far	 00C8	  _TEXT	Length= 00B0 Public C


Symbols:

                N a m e                 Type     Value    Attr

BANK_ERASE_FLASH . . . . . . . .	Number	 0009h	 
BANK_FILL_BLOCK  . . . . . . . .	Number	 0008h	 
BANK_GET_MAP . . . . . . . . . .	Number	 0001h	 
BANK_MAX_BANKS . . . . . . . . .	Number	 007Fh	 
BANK_OSWORK  . . . . . . . . . .	Number	 0003h	 
BANK_READ_BLOCK  . . . . . . . .	Number	 0006h	 
BANK_READ_BYTE . . . . . . . . .	Number	 0002h	 
BANK_READ_WORD . . . . . . . . .	Number	 0004h	 
BANK_ROM0_ADDRESS  . . . . . . .	Number	 2000h	 
BANK_ROM0  . . . . . . . . . . .	Number	 0001h	 
BANK_ROM1_ADDRESS  . . . . . . .	Number	 3000h	 
BANK_ROM1  . . . . . . . . . . .	Number	 0002h	 
BANK_SET_MAP . . . . . . . . . .	Number	 0000h	 
BANK_SOFTFS  . . . . . . . . . .	Number	 0000h	 
BANK_SRAM_ADDRESS  . . . . . . .	Number	 1000h	 
BANK_SRAM  . . . . . . . . . . .	Number	 0000h	 
BANK_USERDS0 . . . . . . . . . .	Number	 0002h	 
BANK_USERDS1 . . . . . . . . . .	Number	 0001h	 
BANK_WRITE_BLOCK . . . . . . . .	Number	 0007h	 
BANK_WRITE_BYTE  . . . . . . . .	Number	 0003h	 
BANK_WRITE_WORD  . . . . . . . .	Number	 0005h	 
BankSram . . . . . . . . . . . .	Number	 00C1h	 
COMM_Baudrate38k . . . . . . . .	Number	 0040h	 
COMM_Baudrate9K  . . . . . . . .	Number	 0000h	 
COMM_CLOSE . . . . . . . . . . .	Number	 0001h	 
COMM_DATA  . . . . . . . . . . .	Number	 00B1h	 
COMM_Disable . . . . . . . . . .	Number	 007Fh	 
COMM_Enable  . . . . . . . . . .	Number	 0080h	 
COMM_GET_BAUDRATE  . . . . . . .	Number	 000Ah	 
COMM_GET_CANCEL_KEY  . . . . . .	Number	 000Ch	 
COMM_OPEN  . . . . . . . . . . .	Number	 0000h	 
COMM_OrReset . . . . . . . . . .	Number	 0020h	 
COMM_OverRun . . . . . . . . . .	Number	 0002h	 
COMM_RECEIVE_BLOCK . . . . . . .	Number	 0007h	 
COMM_RECEIVE_CHAR  . . . . . . .	Number	 0003h	 
COMM_RECEIVE_WITH_TIMEOUT  . . .	Number	 0004h	 
COMM_Receive . . . . . . . . . .	Number	 0001h	 
COMM_SEND_BLOCK  . . . . . . . .	Number	 0006h	 
COMM_SEND_CHAR . . . . . . . . .	Number	 0002h	 
COMM_SEND_STRING . . . . . . . .	Number	 0005h	 
COMM_SET_BAUDRATE  . . . . . . .	Number	 0009h	 
COMM_SET_CANCEL_KEY  . . . . . .	Number	 000Bh	 
COMM_SET_TIMEOUT . . . . . . . .	Number	 0008h	 
COMM_SPEED_38400 . . . . . . . .	Number	 0001h	 
COMM_SPEED_9600  . . . . . . . .	Number	 0000h	 
COMM_STATUS  . . . . . . . . . .	Number	 00B3h	 
COMM_SendEmpty . . . . . . . . .	Number	 0004h	 
COMM_TimeOut . . . . . . . . . .	Number	 FFFFh	 
COMM_XMODEM  . . . . . . . . . .	Number	 000Dh	 
ERR_SIO_BUSY . . . . . . . . . .	Number	 8100h	 
ERR_SIO_CANCEL . . . . . . . . .	Number	 8103h	 
ERR_SIO_OK . . . . . . . . . . .	Number	 0000h	 
ERR_SIO_OVERRUN  . . . . . . . .	Number	 8102h	 
ERR_SIO_TIMEOUT  . . . . . . . .	Number	 8101h	 
ERR_XM_BLOCK_LOST  . . . . . . .	Number	 8106h	 
ERR_XM_CANCELED  . . . . . . . .	Number	 8105h	 
ERR_XM_STATECODE . . . . . . . .	Number	 8104h	 
ERR_XM_TOO_LARGE . . . . . . . .	Number	 8107h	 
E_PROC_CANTLOAD  . . . . . . . .	Number	 -0001h	  
E_PROC_SUCCESS . . . . . . . . .	Number	 0000h	 
EffectMaxPart  . . . . . . . . .	Number	 0003h	 
FROM_Segment . . . . . . . . . .	Text   	 BANK_ROM0_ADDRESS
IC_Start_End . . . . . . . . . .	L Near	 17CB	  _TEXT	
IC_Start_Step1 . . . . . . . . .	L Near	 17C2	  _TEXT	
IC_Start_Step2 . . . . . . . . .	L Near	 17C8	  _TEXT	
IC_Start . . . . . . . . . . . .	L Near	 17B4	  _TEXT	Public
IL_F00 . . . . . . . . . . . . .	Word	 000A	  _TEXT	
IL_F01 . . . . . . . . . . . . .	Word	 000E	  _TEXT	
IL_F02 . . . . . . . . . . . . .	Word	 0012	  _TEXT	
IL_F03 . . . . . . . . . . . . .	Word	 0016	  _TEXT	
IL_F04 . . . . . . . . . . . . .	Word	 001A	  _TEXT	
IL_F05 . . . . . . . . . . . . .	Word	 001E	  _TEXT	
IL_F06 . . . . . . . . . . . . .	Word	 0022	  _TEXT	
IL_F07 . . . . . . . . . . . . .	Word	 0026	  _TEXT	
IL_F08 . . . . . . . . . . . . .	Word	 002A	  _TEXT	
IL_F09 . . . . . . . . . . . . .	Word	 002E	  _TEXT	
IL_F10 . . . . . . . . . . . . .	Word	 0032	  _TEXT	
IL_F11 . . . . . . . . . . . . .	Word	 0036	  _TEXT	
IL_F12 . . . . . . . . . . . . .	Word	 003A	  _TEXT	
IL_F13 . . . . . . . . . . . . .	Word	 003E	  _TEXT	
IL_F14 . . . . . . . . . . . . .	Word	 0042	  _TEXT	
IL_F15 . . . . . . . . . . . . .	Word	 0046	  _TEXT	
IL_F16 . . . . . . . . . . . . .	Word	 004A	  _TEXT	
IL_F17 . . . . . . . . . . . . .	Word	 004E	  _TEXT	
IL_F18 . . . . . . . . . . . . .	Word	 0052	  _TEXT	
IL_F19 . . . . . . . . . . . . .	Word	 0056	  _TEXT	
IL_F20 . . . . . . . . . . . . .	Word	 005A	  _TEXT	
IL_F21 . . . . . . . . . . . . .	Word	 005E	  _TEXT	
IL_F22 . . . . . . . . . . . . .	Word	 0062	  _TEXT	
IL_F23 . . . . . . . . . . . . .	Word	 0066	  _TEXT	
IL_F_End . . . . . . . . . . . .	L Near	 006A	  _TEXT	
IL_GetInfo . . . . . . . . . . .	Word	 0006	  _TEXT	
IL_Link_Pos  . . . . . . . . . .	Word	 0000	  _TEXT	
IL_N_Methods . . . . . . . . . .	Word	 0004	  _TEXT	
ILinfoD_ClassName  . . . . . . .	Byte	 007E	  _TEXT	
ILinfoD_Depends  . . . . . . . .	Word	 008F	  _TEXT	
ILinfoD_Description  . . . . . .	Byte	 008E	  _TEXT	
ILinfoD_Name . . . . . . . . . .	Byte	 0085	  _TEXT	
ILinfoD_Version  . . . . . . . .	Byte	 0089	  _TEXT	
ILinfoD_WTD  . . . . . . . . . .	L Near	 007E	  _TEXT	
ILinfo_ClassName . . . . . . . .	Word	 006A	  _TEXT	
ILinfo_Depends . . . . . . . . .	Word	 007A	  _TEXT	
ILinfo_Description . . . . . . .	Word	 0076	  _TEXT	
ILinfo_Name  . . . . . . . . . .	Word	 006E	  _TEXT	
ILinfo_Version . . . . . . . . .	Word	 0072	  _TEXT	
ILinfo . . . . . . . . . . . . .	L Near	 006A	  _TEXT	
IL . . . . . . . . . . . . . . .	L Near	 0000	  _TEXT	
INT_BANK . . . . . . . . . . . .	Number	 0018h	 
INT_BIOS_VECTOR_BASE . . . . . .	Number	 0010h	 
INT_CASETTE  . . . . . . . . . .	Number	 002Ah	 
INT_COMM . . . . . . . . . . . .	Number	 0014h	 
INT_CommSendReset  . . . . . . .	Number	 00FEh	 
INT_CommSendSet  . . . . . . . .	Number	 0001h	 
INT_DISPLINE . . . . . . . . . .	Number	 002Ch	 
INT_DISP . . . . . . . . . . . .	Number	 0012h	 
INT_EXIT . . . . . . . . . . . .	Number	 0010h	 
INT_FILESYS  . . . . . . . . . .	Number	 0031h	 
INT_HARDHAEW_VECTOR_BASE . . . .	Number	 0028h	 
INT_HBLANK_COUNTUP . . . . . . .	Number	 002Fh	 
INT_HblankReset  . . . . . . . .	Number	 007Fh	 
INT_HblankSet  . . . . . . . . .	Number	 0080h	 
INT_ILIB . . . . . . . . . . . .	Number	 0032h	 
INT_KEY_PUSH . . . . . . . . . .	Number	 0029h	 
INT_KEY  . . . . . . . . . . . .	Number	 0011h	 
INT_PROCESS  . . . . . . . . . .	Number	 0030h	 
INT_RECEIVEREADY . . . . . . . .	Number	 002Bh	 
INT_SENDREADY  . . . . . . . . .	Number	 0028h	 
INT_SOUND  . . . . . . . . . . .	Number	 0015h	 
INT_SYSCALL_VECTOR_BASE  . . . .	Number	 0030h	 
INT_SYSTEM . . . . . . . . . . .	Number	 0017h	 
INT_TEXT . . . . . . . . . . . .	Number	 0013h	 
INT_TIMER  . . . . . . . . . . .	Number	 0016h	 
INT_VBLANK_COUNTUP . . . . . . .	Number	 002Dh	 
INT_VBLANK . . . . . . . . . . .	Number	 002Eh	 
IRAM_Segment . . . . . . . . . .	Number	 0000h	 
IRAM_SoundVoiceTable_WW  . . . .	Number	 0180h	 
IRAM_SoundVoiceTable . . . . . .	Text   	 IRAM_SoundVoiceTable_WW
IRAM . . . . . . . . . . . . . .	Text   	 1
I_Com00  . . . . . . . . . . . .	L Near	 10DA	  _TEXT	
I_Com01  . . . . . . . . . . . .	L Near	 10DA	  _TEXT	
I_Com02  . . . . . . . . . . . .	L Near	 10DA	  _TEXT	
I_Com03  . . . . . . . . . . . .	L Near	 10DA	  _TEXT	
I_Com04  . . . . . . . . . . . .	L Near	 10DA	  _TEXT	
I_Com05  . . . . . . . . . . . .	L Near	 10DA	  _TEXT	
I_Com06  . . . . . . . . . . . .	L Near	 10DA	  _TEXT	
I_Com07  . . . . . . . . . . . .	L Near	 10DA	  _TEXT	
I_Com08  . . . . . . . . . . . .	L Near	 10DA	  _TEXT	
I_Com09  . . . . . . . . . . . .	L Near	 10DA	  _TEXT	
I_Com0a  . . . . . . . . . . . .	L Near	 10DA	  _TEXT	
I_Com0b  . . . . . . . . . . . .	L Near	 10DA	  _TEXT	
I_Com0c  . . . . . . . . . . . .	L Near	 10DA	  _TEXT	
I_Com0d  . . . . . . . . . . . .	L Near	 10DA	  _TEXT	
I_Com0e  . . . . . . . . . . . .	L Near	 10DA	  _TEXT	
I_Com0f  . . . . . . . . . . . .	L Near	 10DA	  _TEXT	
I_Com10  . . . . . . . . . . . .	L Near	 10DA	  _TEXT	
I_Com11  . . . . . . . . . . . .	L Near	 10DA	  _TEXT	
I_Com12  . . . . . . . . . . . .	L Near	 10DA	  _TEXT	
I_Com13  . . . . . . . . . . . .	L Near	 10DA	  _TEXT	
I_Com14  . . . . . . . . . . . .	L Near	 10DA	  _TEXT	
I_Com15  . . . . . . . . . . . .	L Near	 10DA	  _TEXT	
I_Com16  . . . . . . . . . . . .	L Near	 10DA	  _TEXT	
I_Com17  . . . . . . . . . . . .	L Near	 10DA	  _TEXT	
I_Com18  . . . . . . . . . . . .	L Near	 10DA	  _TEXT	
I_Com19  . . . . . . . . . . . .	L Near	 10DA	  _TEXT	
I_Com1a  . . . . . . . . . . . .	L Near	 10DA	  _TEXT	
I_Com1b  . . . . . . . . . . . .	L Near	 10DA	  _TEXT	
I_Com1c  . . . . . . . . . . . .	L Near	 10DA	  _TEXT	
I_Com1d  . . . . . . . . . . . .	L Near	 10DA	  _TEXT	
I_Com1e  . . . . . . . . . . . .	L Near	 10DA	  _TEXT	
I_Com1f  . . . . . . . . . . . .	L Near	 10DA	  _TEXT	
I_Com20  . . . . . . . . . . . .	L Near	 10DA	  _TEXT	
I_Com21  . . . . . . . . . . . .	L Near	 10DC	  _TEXT	
I_Com22  . . . . . . . . . . . .	L Near	 10E2	  _TEXT	
I_Com23  . . . . . . . . . . . .	L Near	 10EA	  _TEXT	
I_Com24  . . . . . . . . . . . .	L Near	 10EC	  _TEXT	
I_Com25  . . . . . . . . . . . .	L Near	 10EE	  _TEXT	
I_Com26  . . . . . . . . . . . .	L Near	 10F0	  _TEXT	
I_Com27  . . . . . . . . . . . .	L Near	 10F2	  _TEXT	
I_Com28  . . . . . . . . . . . .	L Near	 10FC	  _TEXT	
I_Com29  . . . . . . . . . . . .	L Near	 110A	  _TEXT	
I_Com2a  . . . . . . . . . . . .	L Near	 1118	  _TEXT	
I_Com2b  . . . . . . . . . . . .	L Near	 113C	  _TEXT	
I_Com2c  . . . . . . . . . . . .	L Near	 113E	  _TEXT	
I_Com2d  . . . . . . . . . . . .	L Near	 1140	  _TEXT	
I_Com2e  . . . . . . . . . . . .	L Near	 1142	  _TEXT	
I_Com2f  . . . . . . . . . . . .	L Near	 1144	  _TEXT	
I_Com30  . . . . . . . . . . . .	L Near	 116A	  _TEXT	
I_Com31  . . . . . . . . . . . .	L Near	 117A	  _TEXT	
I_Com32  . . . . . . . . . . . .	L Near	 118C	  _TEXT	
I_Com33  . . . . . . . . . . . .	L Near	 119E	  _TEXT	
I_Com34  . . . . . . . . . . . .	L Near	 11B0	  _TEXT	
I_Com35  . . . . . . . . . . . .	L Near	 11C2	  _TEXT	
I_Com36  . . . . . . . . . . . .	L Near	 11D4	  _TEXT	
I_Com37  . . . . . . . . . . . .	L Near	 11EC	  _TEXT	
I_Com38  . . . . . . . . . . . .	L Near	 1204	  _TEXT	
I_Com39  . . . . . . . . . . . .	L Near	 1216	  _TEXT	
I_Com3a  . . . . . . . . . . . .	L Near	 1244	  _TEXT	
I_Com3b  . . . . . . . . . . . .	L Near	 125A	  _TEXT	
I_Com3c  . . . . . . . . . . . .	L Near	 1274	  _TEXT	
I_Com3d  . . . . . . . . . . . .	L Near	 1278	  _TEXT	
I_Com3e  . . . . . . . . . . . .	L Near	 127A	  _TEXT	
I_Com3f  . . . . . . . . . . . .	L Near	 127E	  _TEXT	
I_Com3x_Flag . . . . . . . . . .	L Near	 1226	  _TEXT	
I_Com40_1st  . . . . . . . . . .	L Near	 1289	  _TEXT	
I_Com40_2nd  . . . . . . . . . .	L Near	 12A8	  _TEXT	
I_Com40  . . . . . . . . . . . .	L Near	 1280	  _TEXT	
I_Com41  . . . . . . . . . . . .	L Near	 12B2	  _TEXT	
I_Com42  . . . . . . . . . . . .	L Near	 12B4	  _TEXT	
I_Com43  . . . . . . . . . . . .	L Near	 12E0	  _TEXT	
I_Com44  . . . . . . . . . . . .	L Near	 12FA	  _TEXT	
I_Com45_End  . . . . . . . . . .	L Near	 1358	  _TEXT	
I_Com45  . . . . . . . . . . . .	L Near	 1302	  _TEXT	
I_Com46  . . . . . . . . . . . .	L Near	 135A	  _TEXT	
I_Com47  . . . . . . . . . . . .	L Near	 1366	  _TEXT	
I_Com48  . . . . . . . . . . . .	L Near	 1370	  _TEXT	
I_Com49  . . . . . . . . . . . .	L Near	 137C	  _TEXT	
I_Com4a  . . . . . . . . . . . .	L Near	 137E	  _TEXT	
I_Com4b  . . . . . . . . . . . .	L Near	 1380	  _TEXT	
I_Com4c  . . . . . . . . . . . .	L Near	 1388	  _TEXT	
I_Com4d  . . . . . . . . . . . .	L Near	 13A8	  _TEXT	
I_Com4e  . . . . . . . . . . . .	L Near	 13B6	  _TEXT	
I_Com4f  . . . . . . . . . . . .	L Near	 13D8	  _TEXT	
I_Com50  . . . . . . . . . . . .	L Near	 13E8	  _TEXT	
I_Com51  . . . . . . . . . . . .	L Near	 13F2	  _TEXT	
I_Com52  . . . . . . . . . . . .	L Near	 13FA	  _TEXT	
I_Com53  . . . . . . . . . . . .	L Near	 1406	  _TEXT	
I_Com54  . . . . . . . . . . . .	L Near	 1416	  _TEXT	
I_Com55  . . . . . . . . . . . .	L Near	 1422	  _TEXT	
I_Com56  . . . . . . . . . . . .	L Near	 142C	  _TEXT	
I_Com57  . . . . . . . . . . . .	L Near	 1434	  _TEXT	
I_Com58_Step1  . . . . . . . . .	L Near	 1441	  _TEXT	
I_Com58  . . . . . . . . . . . .	L Near	 1440	  _TEXT	
I_Com59  . . . . . . . . . . . .	L Near	 1452	  _TEXT	
I_Com5a  . . . . . . . . . . . .	L Near	 1454	  _TEXT	
I_Com5b  . . . . . . . . . . . .	L Near	 1468	  _TEXT	
I_Com5c  . . . . . . . . . . . .	L Near	 1478	  _TEXT	
I_Com5d  . . . . . . . . . . . .	L Near	 147A	  _TEXT	
I_Com5e  . . . . . . . . . . . .	L Near	 1490	  _TEXT	
I_Com5f  . . . . . . . . . . . .	L Near	 1492	  _TEXT	
I_Com60  . . . . . . . . . . . .	L Near	 149A	  _TEXT	
I_Com61  . . . . . . . . . . . .	L Near	 149C	  _TEXT	
I_Com62  . . . . . . . . . . . .	L Near	 149E	  _TEXT	
I_Com63  . . . . . . . . . . . .	L Near	 14A0	  _TEXT	
I_Com64  . . . . . . . . . . . .	L Near	 14A2	  _TEXT	
I_Com65  . . . . . . . . . . . .	L Near	 14A4	  _TEXT	
I_Com66  . . . . . . . . . . . .	L Near	 14A6	  _TEXT	
I_Com67  . . . . . . . . . . . .	L Near	 14A8	  _TEXT	
I_Com68  . . . . . . . . . . . .	L Near	 14AA	  _TEXT	
I_Com69  . . . . . . . . . . . .	L Near	 14AC	  _TEXT	
I_Com6a  . . . . . . . . . . . .	L Near	 14AE	  _TEXT	
I_Com6b  . . . . . . . . . . . .	L Near	 14B0	  _TEXT	
I_Com6c  . . . . . . . . . . . .	L Near	 14B8	  _TEXT	
I_Com6d  . . . . . . . . . . . .	L Near	 14C6	  _TEXT	
I_Com6e  . . . . . . . . . . . .	L Near	 14F8	  _TEXT	
I_Com6f  . . . . . . . . . . . .	L Near	 1506	  _TEXT	
I_Com70  . . . . . . . . . . . .	L Near	 150E	  _TEXT	
I_Com71  . . . . . . . . . . . .	L Near	 1516	  _TEXT	
I_Com72  . . . . . . . . . . . .	L Near	 151E	  _TEXT	
I_Com73  . . . . . . . . . . . .	L Near	 1520	  _TEXT	
I_Com74  . . . . . . . . . . . .	L Near	 153A	  _TEXT	
I_Com75  . . . . . . . . . . . .	L Near	 1556	  _TEXT	
I_Com76  . . . . . . . . . . . .	L Near	 155E	  _TEXT	
I_Com77  . . . . . . . . . . . .	L Near	 1566	  _TEXT	
I_Com78  . . . . . . . . . . . .	L Near	 1568	  _TEXT	
I_Com79  . . . . . . . . . . . .	L Near	 1570	  _TEXT	
I_Com7a  . . . . . . . . . . . .	L Near	 1580	  _TEXT	
I_Com7b  . . . . . . . . . . . .	L Near	 1582	  _TEXT	
I_Com7c  . . . . . . . . . . . .	L Near	 15A0	  _TEXT	
I_Com7d  . . . . . . . . . . . .	L Near	 15A2	  _TEXT	
I_Com7e  . . . . . . . . . . . .	L Near	 15A4	  _TEXT	
I_Com7f  . . . . . . . . . . . .	L Near	 15A6	  _TEXT	
I_Effect_Return_End  . . . . . .	L Near	 0F0F	  _TEXT	
I_Effect_Return_Loop0  . . . . .	L Near	 0EBF	  _TEXT	
I_Effect_Return_Step0  . . . . .	L Near	 0ECE	  _TEXT	
I_Effect_Return_Step2  . . . . .	L Near	 0EFE	  _TEXT	
I_Effect_Return_Step3  . . . . .	L Near	 0F0F	  _TEXT	
I_Effect_Return  . . . . . . . .	L Near	 0E92	  _TEXT	
I_Frection_Table . . . . . . . .	L Near	 096A	  _TEXT	
I_MusicEffectStep  . . . . . . .	L Near	 0A63	  _TEXT	
I_PlayCommand_JumpTable  . . . .	L Near	 0FC4	  _TEXT	
I_PlayKey_Code . . . . . . . . .	L Near	 0F4E	  _TEXT	
I_PlayKey_StepE  . . . . . . . .	L Near	 0FC2	  _TEXT	
I_Play_Emb_Step3 . . . . . . . .	L Near	 0E26	  _TEXT	
I_Play_Emb_StepEnd . . . . . . .	L Near	 0E4E	  _TEXT	
I_Read16_End . . . . . . . . . .	L Near	 0F34	  _TEXT	
I_Read8_End  . . . . . . . . . .	L Near	 0F22	  _TEXT	
I_SM_CtrlChgB  . . . . . . . . .	L Near	 1766	  _TEXT	
I_SM_CtrlChgW  . . . . . . . . .	L Near	 177C	  _TEXT	
I_SM_Frection  . . . . . . . . .	L Near	 1714	  _TEXT	
I_SM_KeyOff  . . . . . . . . . .	L Near	 163E	  _TEXT	
I_SM_KeyOn . . . . . . . . . . .	L Near	 15F2	  _TEXT	
I_SM_Mode  . . . . . . . . . . .	L Near	 17A6	  _TEXT	
I_SM_PolyChPress . . . . . . . .	L Near	 175C	  _TEXT	
I_SM_PolyKeyPress  . . . . . . .	L Near	 1752	  _TEXT	
I_SM_Voice . . . . . . . . . . .	L Near	 1740	  _TEXT	
I_SM_Volume  . . . . . . . . . .	L Near	 16DC	  _TEXT	
I_SP_CtrlChgB  . . . . . . . . .	L Near	 1764	  _TEXT	
I_SP_CtrlChgW  . . . . . . . . .	L Near	 177A	  _TEXT	
I_SP_Frection  . . . . . . . . .	L Near	 16F0	  _TEXT	
I_SP_KeyOff  . . . . . . . . . .	L Near	 1638	  _TEXT	
I_SP_KeyOn . . . . . . . . . . .	L Near	 15D0	  _TEXT	
I_SP_Mode  . . . . . . . . . . .	L Near	 1790	  _TEXT	
I_SP_PolyChPress . . . . . . . .	L Near	 175A	  _TEXT	
I_SP_PolyKeyPress  . . . . . . .	L Near	 1750	  _TEXT	
I_SP_Voice . . . . . . . . . . .	L Near	 1724	  _TEXT	
I_Start  . . . . . . . . . . . .	L Near	 0982	  _TEXT	Public
I_Table_CtrlChgB . . . . . . . .	L Near	 1760	  _TEXT	
I_Table_CtrlChgW . . . . . . . .	L Near	 1776	  _TEXT	
I_Table_Frection . . . . . . . .	L Near	 16EC	  _TEXT	
I_Table_Jump . . . . . . . . . .	L Near	 15A8	  _TEXT	
I_Table_KeyOff . . . . . . . . .	L Near	 1634	  _TEXT	
I_Table_KeyOn  . . . . . . . . .	L Near	 15CC	  _TEXT	
I_Table_Mode . . . . . . . . . .	L Near	 178C	  _TEXT	
I_Table_PolyChPress  . . . . . .	L Near	 1756	  _TEXT	
I_Table_PolyKeyPress . . . . . .	L Near	 174C	  _TEXT	
I_Table_Voice  . . . . . . . . .	L Near	 1720	  _TEXT	
I_Table_Volume . . . . . . . . .	L Near	 165A	  _TEXT	
I_Volume_Table . . . . . . . . .	L Near	 086A	  _TEXT	
Int_Base . . . . . . . . . . . .	Number	 00B0h	 
Int_Case . . . . . . . . . . . .	Number	 00B4h	 
Int_Enable . . . . . . . . . . .	Number	 00B2h	 
Int_Eoi  . . . . . . . . . . . .	Number	 00B6h	 
InterruptVectorBase_WW . . . . .	Text   	 INT_HARDHAEW_VECTOR_BASE
InterruptVectorBase  . . . . . .	Text   	 InterruptVectorBase_WW
MAXPROCESSES . . . . . . . . . .	Number	 0003h	 
MIDI_Channel_mask  . . . . . . .	Number	 000Fh	 
MIDI_Com_ChPress . . . . . . . .	Number	 00D0h	 
MIDI_Com_Control . . . . . . . .	Number	 00B0h	 
MIDI_Com_Exclucive . . . . . . .	Number	 00F0h	 
MIDI_Com_KeyOff  . . . . . . . .	Number	 0080h	 
MIDI_Com_KeyOn . . . . . . . . .	Number	 0090h	 
MIDI_Com_KeyPress  . . . . . . .	Number	 00A0h	 
MIDI_Com_PitchBend . . . . . . .	Number	 00E0h	 
MIDI_Com_Program . . . . . . . .	Number	 00C0h	 
MIDI_Ctrl_Bank . . . . . . . . .	Number	 0000h	 
MIDI_Ctrl_Blance . . . . . . . .	Number	 0008h	 
MIDI_Ctrl_Bress  . . . . . . . .	Number	 0002h	 
MIDI_Ctrl_Chorus . . . . . . . .	Number	 005Dh	 
MIDI_Ctrl_DaraDec  . . . . . . .	Number	 0061h	 
MIDI_Ctrl_DataEntly  . . . . . .	Number	 0006h	 
MIDI_Ctrl_DataInc  . . . . . . .	Number	 0060h	 
MIDI_Ctrl_Delay  . . . . . . . .	Number	 005Eh	 
MIDI_Ctrl_Effect1  . . . . . . .	Number	 000Ch	 
MIDI_Ctrl_Effect2  . . . . . . .	Number	 000Dh	 
MIDI_Ctrl_Expression . . . . . .	Number	 000Bh	 
MIDI_Ctrl_Foot . . . . . . . . .	Number	 0004h	 
MIDI_Ctrl_F  . . . . . . . . . .	Number	 005Fh	 
MIDI_Ctrl_Hold2  . . . . . . . .	Number	 0045h	 
MIDI_Ctrl_Hold . . . . . . . . .	Number	 0040h	 
MIDI_Ctrl_Legert . . . . . . . .	Number	 0044h	 
MIDI_Ctrl_MSB  . . . . . . . . .	Number	 0020h	 
MIDI_Ctrl_Mod  . . . . . . . . .	Number	 0001h	 
MIDI_Ctrl_NonRegLSB  . . . . . .	Number	 0062h	 
MIDI_Ctrl_NonRegMSB  . . . . . .	Number	 0063h	 
MIDI_Ctrl_Pan  . . . . . . . . .	Number	 000Ah	 
MIDI_Ctrl_PolControl . . . . . .	Number	 0054h	 
MIDI_Ctrl_PolSW  . . . . . . . .	Number	 0041h	 
MIDI_Ctrl_PolTime  . . . . . . .	Number	 0005h	 
MIDI_Ctrl_RegLSB . . . . . . . .	Number	 0064h	 
MIDI_Ctrl_RegMSB . . . . . . . .	Number	 0065h	 
MIDI_Ctrl_Reverv . . . . . . . .	Number	 005Bh	 
MIDI_Ctrl_Soft . . . . . . . . .	Number	 0043h	 
MIDI_Ctrl_S  . . . . . . . . . .	Number	 0042h	 
MIDI_Ctrl_Tremono  . . . . . . .	Number	 005Ch	 
MIDI_Ctrl_Volume . . . . . . . .	Number	 0007h	 
MIDI_Ex_GmReset  . . . . . . . .	Byte	 198A	  _TEXT	
MIDI_Ex_GsReset  . . . . . . . .	Byte	 1991	  _TEXT	
MIDI_Ex_XgReset  . . . . . . . .	Byte	 1992	  _TEXT	
MIDI_Reg_CBank . . . . . . . . .	Number	 0004h	 
MIDI_Reg_CProgram  . . . . . . .	Number	 0003h	 
MIDI_Reg_Cose  . . . . . . . . .	Number	 0002h	 
MIDI_Reg_Fain  . . . . . . . . .	Number	 0001h	 
MIDI_Reg_NULL  . . . . . . . . .	Number	 7F7Fh	 
MIDI_Reg_PitchBend . . . . . . .	Number	 0000h	 
MusicMaxPart . . . . . . . . . .	Number	 0014h	 
PCM_Channel_mask . . . . . . . .	Number	 0300h	 
PCM_Com_Channel  . . . . . . . .	Number	 0090h	 
PCM_Com_FrectionCh1  . . . . . .	Number	 0080h	 
PCM_Com_FrectionCh2  . . . . . .	Number	 0082h	 
PCM_Com_FrectionCh3  . . . . . .	Number	 0084h	 
PCM_Com_FrectionCh4  . . . . . .	Number	 0086h	 
PCM_Com_Frection . . . . . . . .	Number	 0080h	 
PCM_Com_Noise  . . . . . . . . .	Number	 008Eh	 
PCM_Com_Output . . . . . . . . .	Number	 0091h	 
PCM_Com_PCMVoice . . . . . . . .	Text   	 Pcm_Com_VolumeCh2
PCM_Com_Random . . . . . . . . .	Number	 0092h	 
PCM_Com_SweepLevel . . . . . . .	Number	 008Ch	 
PCM_Com_SweepTime  . . . . . . .	Number	 008Dh	 
PCM_Com_Sweep  . . . . . . . . .	Number	 008Ch	 
PCM_Com_VoiceAddress . . . . . .	Number	 008Fh	 
PCM_Com_VoiceCtrl  . . . . . . .	Number	 0095h	 
PCM_Com_VolumeCh1  . . . . . . .	Number	 0088h	 
PCM_Com_VolumeCh2  . . . . . . .	Number	 0089h	 
PCM_Com_VolumeCh3  . . . . . . .	Number	 008Ah	 
PCM_Com_VolumeCh4  . . . . . . .	Number	 008Bh	 
PCM_Com_VolumePCM  . . . . . . .	Number	 0094h	 
PCM_Com_Volume . . . . . . . . .	Number	 0088h	 
PcmVoiceMode_Reset . . . . . . .	Number	 2000h	 
PcmVoiceMode_Set . . . . . . . .	Number	 2020h	 
RTC_DATE . . . . . . . . . . . .	Number	 0002h	 
RTC_DAY_OF_WEEK  . . . . . . . .	Number	 0003h	 
RTC_DISABLE_ALARM  . . . . . . .	Number	 0006h	 
RTC_ENABLE_ALARM . . . . . . . .	Number	 0005h	 
RTC_GET_DATETIME_STRUCT  . . . .	Number	 0004h	 
RTC_GET_DATETIME . . . . . . . .	Number	 0001h	 
RTC_HOUR . . . . . . . . . . . .	Number	 0004h	 
RTC_MIN  . . . . . . . . . . . .	Number	 0005h	 
RTC_MONTH  . . . . . . . . . . .	Number	 0001h	 
RTC_RESET  . . . . . . . . . . .	Number	 0000h	 
RTC_SEC  . . . . . . . . . . . .	Number	 0006h	 
RTC_SET_DATETIME_STRUCT  . . . .	Number	 0003h	 
RTC_SET_DATETIME . . . . . . . .	Number	 0002h	 
RTC_YEAR . . . . . . . . . . . .	Number	 0000h	 
SM_KeyOff  . . . . . . . . . . .	L Near	 19BE	  _TEXT	
SM_Send_With_Running_Status_e  .	L Near	 19A2	  _TEXT	
SM_Send_With_Running_Status  . .	L Near	 1993	  _TEXT	
SOUND_GET_CHANNEL  . . . . . . .	Number	 0002h	 
SOUND_GET_NOISE  . . . . . . . .	Number	 000Dh	 
SOUND_GET_OUTPUT . . . . . . . .	Number	 0004h	 
SOUND_GET_PITCH  . . . . . . . .	Number	 0007h	 
SOUND_GET_RANDOM . . . . . . . .	Number	 000Eh	 
SOUND_GET_SWEEP  . . . . . . . .	Number	 000Bh	 
SOUND_GET_VOLUME . . . . . . . .	Number	 0009h	 
SOUND_INIT . . . . . . . . . . .	Number	 0000h	 
SOUND_SET_CHANNEL  . . . . . . .	Number	 0001h	 
SOUND_SET_NOISE  . . . . . . . .	Number	 000Ch	 
SOUND_SET_OUTPUT . . . . . . . .	Number	 0003h	 
SOUND_SET_PITCH  . . . . . . . .	Number	 0006h	 
SOUND_SET_SWEEP  . . . . . . . .	Number	 000Ah	 
SOUND_SET_VOLUME . . . . . . . .	Number	 0008h	 
SOUND_SET_WAVE . . . . . . . . .	Number	 0005h	 
SP_Set_Channel_End . . . . . . .	L Near	 18FF	  _TEXT	
SP_Set_Channel_Step  . . . . . .	L Near	 18F9	  _TEXT	
SP_Set_Frection_End  . . . . . .	L Near	 1875	  _TEXT	
SP_Set_Frection_Step . . . . . .	L Near	 1868	  _TEXT	
SP_Set_Noise_End . . . . . . . .	L Near	 18DF	  _TEXT	
SP_Set_Noise_Step  . . . . . . .	L Near	 18D9	  _TEXT	
SP_Set_Sweep_End . . . . . . . .	L Near	 18BF	  _TEXT	
SP_Set_Sweep_Step  . . . . . . .	L Near	 18B7	  _TEXT	
SP_Set_Voice_End . . . . . . . .	L Near	 1934	  _TEXT	
SP_Set_Voice_Step  . . . . . . .	L Near	 191D	  _TEXT	
SP_Set_Volume_End  . . . . . . .	L Near	 189D	  _TEXT	
SP_Set_Volume_Step . . . . . . .	L Near	 1890	  _TEXT	
SRAM_Segment . . . . . . . . . .	Text   	 BANK_SRAM_ADDRESS
SYS_INT_CASETTE  . . . . . . . .	Number	 0002h	 
SYS_INT_DISPLINE . . . . . . . .	Number	 0004h	 
SYS_INT_HBLANK_COUNTUP . . . . .	Number	 0007h	 
SYS_INT_KEY  . . . . . . . . . .	Number	 0001h	 
SYS_INT_RECEIVEREADY . . . . . .	Number	 0003h	 
SYS_INT_SENDREADY  . . . . . . .	Number	 0000h	 
SYS_INT_VBLANK_COUNTUP . . . . .	Number	 0005h	 
SYS_INT_VBLANK . . . . . . . . .	Number	 0006h	 
S_PCB_LOAD . . . . . . . . . . .	Number	 0001h	 
S_PCB_NOT_USED . . . . . . . . .	Number	 0000h	 
S_PCB_RUN  . . . . . . . . . . .	Number	 0002h	 
S_PCB_SUSPEND  . . . . . . . . .	Number	 0003h	 
TIMER_AUTOPRESET . . . . . . . .	Number	 0001h	 
TIMER_CounterH . . . . . . . . .	Number	 00A8h	 
TIMER_CounterV . . . . . . . . .	Number	 00AAh	 
TIMER_DISABLE  . . . . . . . . .	Number	 0008h	 
TIMER_ENABLE . . . . . . . . . .	Number	 0007h	 
TIMER_GET_COUNT  . . . . . . . .	Number	 0009h	 
TIMER_HBLANK . . . . . . . . . .	Number	 0000h	 
TIMER_MaxCountH  . . . . . . . .	Number	 00A4h	 
TIMER_MaxCountV  . . . . . . . .	Number	 00A6h	 
TIMER_ONESHOT  . . . . . . . . .	Number	 0000h	 
TIMER_Status . . . . . . . . . .	Number	 00A2h	 
TIMER_VBLANK . . . . . . . . . .	Number	 0001h	 
Timer_Close  . . . . . . . . . .	Number	 0100h	 
Timer_H_Disable  . . . . . . . .	Number	 00FEh	 
Timer_H_Enable . . . . . . . . .	Number	 0001h	 
Timer_H_auto . . . . . . . . . .	Number	 0002h	 
Timer_H_shot . . . . . . . . . .	Number	 00FDh	 
Timer_Open . . . . . . . . . . .	Number	 0303h	 
Timer_Tempo120 . . . . . . . . .	Number	 007Dh	 
Timer_V_Disable  . . . . . . . .	Number	 00FBh	 
Timer_V_Enable . . . . . . . . .	Number	 0004h	 
Timer_V_auto . . . . . . . . . .	Number	 0008h	 
Timer_V_shot . . . . . . . . . .	Number	 00F7h	 
WTD_BendEmb  . . . . . . . . . .	Text   	 WTD_BendEmbAddress
WTD_BendLFO  . . . . . . . . . .	Text   	 WTD_BendLfoDecayRate
WTD_Ctrl_AcsentR . . . . . . . .	Number	 FFBFh	 
WTD_Ctrl_Acsent  . . . . . . . .	Number	 0040h	 
WTD_Ctrl_BendEmbR  . . . . . . .	Number	 FFFDh	 
WTD_Ctrl_BendEmb . . . . . . . .	Number	 0002h	 
WTD_Ctrl_BendLfoR  . . . . . . .	Number	 FFFEh	 
WTD_Ctrl_BendLfo . . . . . . . .	Number	 0001h	 
WTD_Ctrl_EffectR . . . . . . . .	Number	 BFFFh	 
WTD_Ctrl_Effect  . . . . . . . .	Number	 4000h	 
WTD_Ctrl_EmbFreqR  . . . . . . .	Number	 FF7Fh	 
WTD_Ctrl_EmbFreq . . . . . . . .	Number	 0080h	 
WTD_Ctrl_EmbPanR . . . . . . . .	Number	 FDFFh	 
WTD_Ctrl_EmbPan  . . . . . . . .	Number	 0200h	 
WTD_Ctrl_EmbVolR . . . . . . . .	Number	 FEFFh	 
WTD_Ctrl_EmbVol  . . . . . . . .	Number	 0100h	 
WTD_Ctrl_ExprEmbR  . . . . . . .	Number	 FFF7h	 
WTD_Ctrl_ExprEmb . . . . . . . .	Number	 0008h	 
WTD_Ctrl_ExprLfoR  . . . . . . .	Number	 FFFBh	 
WTD_Ctrl_ExprLfo . . . . . . . .	Number	 0004h	 
WTD_Ctrl_PamEmbR . . . . . . . .	Number	 FFDFh	 
WTD_Ctrl_PanEmb  . . . . . . . .	Number	 0020h	 
WTD_Ctrl_PanLfoR . . . . . . . .	Number	 FFEFh	 
WTD_Ctrl_PanLfo  . . . . . . . .	Number	 0010h	 
WTD_Ctrl_PlayEndR  . . . . . . .	Number	 7FFFh	 
WTD_Ctrl_PlayEnd . . . . . . . .	Number	 8000h	 
WTD_Ctrl_Vol0R . . . . . . . . .	Number	 FBFFh	 
WTD_Ctrl_Vol0  . . . . . . . . .	Number	 0400h	 
WTD_Ctrl_WorkCyR . . . . . . . .	Number	 EFFFh	 
WTD_Ctrl_WorkCy  . . . . . . . .	Number	 1000h	 
WTD_Ctrl_WorkSwR . . . . . . . .	Number	 F7FFh	 
WTD_Ctrl_WorkSw  . . . . . . . .	Number	 0800h	 
WTD_Ctrl_WorkZeR . . . . . . . .	Number	 DFFFh	 
WTD_Ctrl_WorkZe  . . . . . . . .	Number	 2000h	 
WTD_ExprEmb  . . . . . . . . . .	Text   	 WTD_ExprEmbAddress
WTD_ExprLFO  . . . . . . . . . .	Text   	 WTD_ExprLfoDecayRate
WTD_FrectionSet  . . . . . . . .	Text   	 WTD_BendSet
WTD_Frection . . . . . . . . . .	Text   	 WTD_Bend
WTD_NoiseMode  . . . . . . . . .	Text   	 WTD_SweepLevel
WTD_PanEmb . . . . . . . . . . .	Text   	 WTD_PanEmbAddress
WTD_PanLFO . . . . . . . . . . .	Text   	 WTD_PanLfoDecayRate
WTD_PcmAddress . . . . . . . . .	Text   	 WTD_LoopCount
WTD_PcmSize  . . . . . . . . . .	Text   	 WTD_LoopCount+4
WTD_Sys_3R . . . . . . . . . . .	Number	 FFF7h	 
WTD_Sys_3  . . . . . . . . . . .	Number	 0008h	 
WTD_Sys_5R . . . . . . . . . . .	Number	 FFDFh	 
WTD_Sys_5  . . . . . . . . . . .	Number	 0020h	 
WTD_Sys_6R . . . . . . . . . . .	Number	 FFBFh	 
WTD_Sys_6  . . . . . . . . . . .	Number	 0040h	 
WTD_Sys_ChannelMode1R  . . . . .	Number	 FEFFh	 
WTD_Sys_ChannelMode1 . . . . . .	Number	 0100h	 
WTD_Sys_ChannelMode2R  . . . . .	Number	 FDFFh	 
WTD_Sys_ChannelMode2 . . . . . .	Number	 0200h	 
WTD_Sys_ChannelMode3R  . . . . .	Number	 FBFFh	 
WTD_Sys_ChannelMode3 . . . . . .	Number	 0400h	 
WTD_Sys_ChannelMode4R  . . . . .	Number	 F7FFh	 
WTD_Sys_ChannelMode4 . . . . . .	Number	 0800h	 
WTD_Sys_EffectMask1R . . . . . .	Number	 EFFFh	 
WTD_Sys_EffectMask1  . . . . . .	Number	 1000h	 
WTD_Sys_EffectMask2R . . . . . .	Number	 DFFFh	 
WTD_Sys_EffectMask2  . . . . . .	Number	 2000h	 
WTD_Sys_EffectMask3R . . . . . .	Number	 BFFFh	 
WTD_Sys_EffectMask3  . . . . . .	Number	 4000h	 
WTD_Sys_EffectMask4R . . . . . .	Number	 7FFFh	 
WTD_Sys_EffectMask4  . . . . . .	Number	 8000h	 
WTD_Sys_EffectR  . . . . . . . .	Number	 FFFDh	 
WTD_Sys_Effect . . . . . . . . .	Number	 0002h	 
WTD_Sys_MidiR  . . . . . . . . .	Number	 FFEFh	 
WTD_Sys_Midi . . . . . . . . . .	Number	 0010h	 
WTD_Sys_MusicR . . . . . . . . .	Number	 FFFEh	 
WTD_Sys_Music  . . . . . . . . .	Number	 0001h	 
WTD_Sys_PcmR . . . . . . . . . .	Number	 FFFBh	 
WTD_Sys_Pcm  . . . . . . . . . .	Number	 0004h	 
WTD_Sys_TimerEmulateR  . . . . .	Number	 FF7Fh	 
WTD_Sys_TimerEmulate . . . . . .	Number	 0080h	 
WTD_Velocity . . . . . . . . . .	Text   	 WTD_ExprPanSet
WTD_Voice1st . . . . . . . . . .	Text   	 WTD_Program1st
WTD_Voice2nd . . . . . . . . . .	Text   	 WTD_Program2nd
WTD_Voice3rd . . . . . . . . . .	Text   	 WTD_Program3rd
WTD_VoiceCnt . . . . . . . . . .	Text   	 WTD_ProgramCnt
WTD_VoiceRate  . . . . . . . . .	Text   	 WTD_ProgramRate
WTD_Voice  . . . . . . . . . . .	Text   	 WTD_Program
WTD_WorkAdd_Ch0  . . . . . . . .	Number	 0600h	 
WTD_WorkAdd_Ch10 . . . . . . . .	Number	 0B00h	 
WTD_WorkAdd_Ch11 . . . . . . . .	Number	 0B80h	 
WTD_WorkAdd_Ch12 . . . . . . . .	Number	 0C00h	 
WTD_WorkAdd_Ch13 . . . . . . . .	Number	 0C80h	 
WTD_WorkAdd_Ch14 . . . . . . . .	Number	 0D00h	 
WTD_WorkAdd_Ch15 . . . . . . . .	Number	 0D80h	 
WTD_WorkAdd_Ch17 . . . . . . . .	Number	 0E80h	 
WTD_WorkAdd_Ch18 . . . . . . . .	Number	 0F00h	 
WTD_WorkAdd_Ch19 . . . . . . . .	Number	 0F80h	 
WTD_WorkAdd_Ch1  . . . . . . . .	Number	 0680h	 
WTD_WorkAdd_Ch2  . . . . . . . .	Number	 0700h	 
WTD_WorkAdd_Ch3  . . . . . . . .	Number	 0780h	 
WTD_WorkAdd_Ch4  . . . . . . . .	Number	 0800h	 
WTD_WorkAdd_Ch5  . . . . . . . .	Number	 0880h	 
WTD_WorkAdd_Ch6  . . . . . . . .	Number	 0900h	 
WTD_WorkAdd_Ch7  . . . . . . . .	Number	 0980h	 
WTD_WorkAdd_Ch8  . . . . . . . .	Number	 0A00h	 
WTD_WorkAdd_Ch9  . . . . . . . .	Number	 0A80h	 
WTD_WorkAdd_Ech0 . . . . . . . .	Number	 0400h	 
WTD_WorkAdd_Ech1 . . . . . . . .	Number	 0480h	 
WTD_WorkAdd_Ech2 . . . . . . . .	Number	 0500h	 
WTD_WorkAdd_Emb  . . . . . . . .	Number	 0200h	 
WTD_WorkAdd_End  . . . . . . . .	Text   	 WTD_WorkSize
WTD_WorkAdd_PCM  . . . . . . . .	Number	 0580h	 
WTD_WorkAdd_System . . . . . . .	Number	 0380h	 
WTD_WorkAdd_User . . . . . . . .	Number	 0000h	 
WTD_WorkAdd_Wave . . . . . . . .	Number	 0100h	 
WTD_WorkChSize . . . . . . . . .	Number	 0080h	 
WTD_WorkSize_H . . . . . . . . .	Number	 0800h	 
WTD_WorkSize . . . . . . . . . .	Number	 1000h	 
WTR_WorkAdd_Ch16 . . . . . . . .	Number	 0E00h	 
WTdIL_Version_N  . . . . . . . .	Number	 010Ch	 
WanderSwanTotalSoundDriver_  . .	L Near	 0000	  _TEXT	Public
WtdIL_Name . . . . . . . . . . .	Text   	 'WTD',0
WtdIL_Version  . . . . . . . . .	Text   	 '1.0c',0
XMODE_AUTO_ERASE . . . . . . . .	Number	 0004h	 
XMODE_RECEIVE_ENCRYPTED  . . . .	Number	 0003h	 
XMODE_RECEIVE  . . . . . . . . .	Number	 0001h	 
XMODE_SEND_ENCRYPTED . . . . . .	Number	 0002h	 
XMODE_SEND . . . . . . . . . . .	Number	 0000h	 
XM_ABORT . . . . . . . . . . . .	Number	 0006h	 
XM_BLOCK_RETRY . . . . . . . . .	Number	 0004h	 
XM_BLOCK . . . . . . . . . . . .	Number	 0003h	 
XM_CLOSE . . . . . . . . . . . .	Number	 0005h	 
XM_DONE  . . . . . . . . . . . .	Number	 0007h	 
XM_ERASE_BANK  . . . . . . . . .	Number	 0008h	 
XM_NEGO  . . . . . . . . . . . .	Number	 0002h	 
XM_START . . . . . . . . . . . .	Number	 0001h	 
_EffectPlay_End  . . . . . . . .	L Near	 0557	  _TEXT	
_EffectPlay_Step2  . . . . . . .	L Near	 04A2	  _TEXT	
_MusicPlay_Chk2  . . . . . . . .	L Near	 024A	  _TEXT	
_MusicPlay_End . . . . . . . . .	L Near	 0355	  _TEXT	
_PCMVoiceSet_End . . . . . . . .	L Near	 070E	  _TEXT	
_PcmPlay_EndJmpStep  . . . . . .	L Near	 0648	  _TEXT	
_PcmPlay_EndJmp  . . . . . . . .	L Near	 0643	  _TEXT	
_PcmPlay_End . . . . . . . . . .	L Near	 06A6	  _TEXT	
_PcmPlay_FileChkEnd2 . . . . . .	L Near	 066E	  _TEXT	
_PcmPlay_FileChkEnd  . . . . . .	L Near	 0625	  _TEXT	
_PcmPlay_FileChkLoop2  . . . . .	L Near	 0655	  _TEXT	
_PcmPlay_FileChkLoop . . . . . .	L Near	 060B	  _TEXT	
_PcmPlay_FileChkStep1  . . . . .	L Near	 061F	  _TEXT	
_PcmPlay_FileChkStep2  . . . . .	L Near	 0669	  _TEXT	
_SoftEmbSet_End  . . . . . . . .	L Near	 074A	  _TEXT	
_StayOut_End . . . . . . . . . .	L Near	 01BD	  _TEXT	
_Stay_00 . . . . . . . . . . . .	L Near	 00E3	  _TEXT	
_Stay_End  . . . . . . . . . . .	L Near	 016F	  _TEXT	
_WTD_Work  . . . . . . . . . . .	L Near	 0000	  _BSS	Public
library  . . . . . . . . . . . .	Text   	 1

	   0 Warnings
	   0 Errors
