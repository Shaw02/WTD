;=======================================================================|
;									|
;		Wander Swan Total Sound Driver				|
;				MML Compiler Program			|
;				SUB Routine				|
;									|
;					Programmed by			|
;						A.Watanabe		|
;									|
;=======================================================================|
;---------------------------------------------------------------|
;		タイトル、バージョンの表示			|
;---------------------------------------------------------------|
WTD_TITLE	DB	'Wonder Swan Total Souund Driver',0Dh,0Ah,24h
VER_P		DB	'Version '
		DB	WtdIL_Version
		DB	0Dh,0Ah,24h
TPRINT:					;
	MOV	AX,CS			;
	MOV	DS,AX			;
	MOV	AH,09H			;
	MOV	DX,OFFSET WTD_TITLE	;
	INT	21H			;
	MOV	DX,OFFSET P_TAB		;
	INT	21H			;
	MOV	DX,OFFSET VER_P		;
	INT	21H			;
	MOV	DX,OFFSET P		;
	MOV	AH,09H			;
	INT	21H			;
	RET
;---------------------------------------------------------------|
;		コンパイルルーチン				|
;---------------------------------------------------------------|
COMPAIL:				;コンパイル
	MOV	AX,CS:[segWTD_File]	;
	MOV	DS,AX			;DS←WTD SEGMENT
	MOV	AX,CS:[segMML_File]	;
	MOV	ES,AX			;ES←MML SEGMENT

	CALL	c_Head_first		;ヘッダー設定
	CALL	c_voice			;音色転送
	CALL	c_Command		;パートコンパイル
	CALL	c_Head_end		;ヘッダー設定

	CALL	WTD_SAVE		;ＦＳＰ形式でセーブする

	RET				;RETURN
;---------------------------------------------------------------|
;		コンパイルデータのＦＳＰ形式セーブ		|
;---------------------------------------------------------------|
WTD_SAVE:
	MOV	DX,CS:[pWTD_File]	;
	CALL	SOPEN			;
	CALL	MSAVE			;
	CALL	SCLOSE			;
	RET				;
;---------------------------------------------------------------|
;		ASCII CODE→１６進コード(-127〜255)		|
;			数値データがあるまでずっと		|
;---------------------------------------------------------------|
;	引数							|
;		CS:[pMML_File] ←変換したい文字列先頭アドレス	|
;		ES←MML Dataのあるセグメント			|
;	返り値							|
;		AH←データ					|
;		CS:[pMML_File] ←次のアドレス			|
;---------------------------------------------------------------|
A2H8R:
	PUSH	BX			;
	PUSH	CX			;
	PUSH	DX			;
	PUSH	DS			;
	MOV	CL,AL			;ALの保存
	PUSH	AX			;
	MOV	AX,ES			;
	MOV	DS,AX			;
	POP	AX			;
	MOV	DX,CS:[pMML_File]	;
A2H8R1:	CALL	COMMENT_CHK		;コメントチェック
	CALL	ASC2HEX8		;ASC Code →16進Code変換
	MOV	DX,BX			;
	JNC	A2H8RR			;変換不可能？だったら
	JMP	A2H8R1			;やり直し。
A2H8RR:	MOV	CS:[pMML_File],DX	;
	MOV	AL,CL			;ALの復帰
	POP	DS			;
	POP	DX			;
	POP	CX			;
	POP	BX			;
	RET				;RETURN
;---------------------------------------------------------------|
;		ASCII CODE→１６進コード(-32767〜65535)		|
;			数値データがあるまでずっと		|
;---------------------------------------------------------------|
;	引数							|
;		CS:[pMML_File] ←変換したい文字列先頭アドレス	|
;		ES←MML Dataのあるセグメント			|
;	返り値							|
;		AX←データ					|
;		CS:[pMML_File] ←次のアドレス			|
;---------------------------------------------------------------|
A2H16R:
	CALL	COMMENT_CHK		;コメントチェック

	PUSH	BX			;
	PUSH	DX			;
	PUSH	DS			;
	PUSH	AX			;
	MOV	AX,ES			;
	MOV	DS,AX			;
	POP	AX			;
	MOV	DX,CS:[pMML_File]	;
A2H16R1:CALL	ASC2HEX16		;ASC Code →16進Code変換
	MOV	DX,BX			;
	JNC	A2H16RR			;変換不可能？だったら
	JMP	A2H16R1			;やり直し。
A2H16RR:MOV	CS:[pMML_File],DX	;
	POP	DS			;
	POP	DX			;
	POP	BX			;
	RET				;RETURN
;---------------------------------------------------------------|
;		ASCII CODE→１６進コード(-127〜255)		|
;---------------------------------------------------------------|
;	引数							|
;		DS:DX←変換したい文字列先頭アドレス		|
;	返り値							|
;		AH←変換後					|
;		DS:BX←次のアドレス				|
;---------------------------------------------------------------|
HEX_8	DB	00H,00H,00H		;
DHEX8	DB	00H			;
F8FLAG	DB	00H			;
ASC2HEX8:				;
	PUSH	CX			;
	PUSH	DX			;
	XOR	CX,CX			;CX←0
	MOV	BX,DX			;BX←DX（文字列先頭アドレス）
	MOV	DX,OFFSET HEX_8		;DX←変換用データバッファ
	XOR	AX,AX			;
	MOV	CS:[F8FLAG],AH		;符号フラグのリセット
	MOV	AH,DS:[BX]		;
	CMP	AH,'-'			;
	JNZ	A2H8L0			;
	INC	BX			;
	MOV	AH,0F8H			;Flag
	MOV	CS:[F8FLAG],AH		;Set
A2H8L0:	MOV	AH,DS:[BX]		;
	INC	BX			;
	SUB	AH,30H			;CHR CODE→HEX CODE
	JNC	A2H8L1			;AH<0　だったら一時変換終了
	JMP	A2H8E1			;
A2H8L1:	CMP	AH,10			;
	JC	A2H8L2			;AH>10 だったら一時変換終了
	JMP	A2H8E1			;
A2H8L2:	XCHG	BX,DX			;
	MOV	CS:[BX],AH		;保存
	INC	BX			;
	XCHG	BX,DX			
	INC	CL			;
	CMP	CL,3			;３回変換したら一時変換終了
	JZ	A2H8E0			;（最大３桁( 0~255)）
	JMP	A2H8L0			;
A2H8E1:
	DEC	BX			;
A2H8E0:
	CMP	CL,0			;数値文字（-, 0~9）があった場合
	JNZ	A2H8L3			;ジャンプ
	STC				;それ以外、
	INC	BX			;エラーで戻る
	JMP	A2H8EE			;
A2H8L3:					;
	MOV	CH,0			;
	MOV	CS:[DHEX8],CH		;
	MOV	CH,CL			;CH←一時変換で変換した文字数
	MOV	CL,3			;CL←桁計算用
	XCHG	BX,DX			;	3･10^0	2･10^1	1･10^2
A2H8L4:	
	DEC	BX			;
	MOV	AH,CS:[BX]		;
	CALL	A2H8AA			;桁計算
	DEC	CL			;
	DEC	CH			;
	JNZ	A2H8L4			;文字数分
	XCHG	BX,DX			;
	MOV	AH,CS:[DHEX8]		;
	CMP	CS:[F8FLAG],00H		;
	JZ	A2H8L5			;
	NEG	AH			;
A2H8L5:	CLC				;
A2H8EE:	POP	DX			;
	POP	CX			;
	RET				;

;	*	*	*	*	*	*	*	*

A2H8AA:					;
	CMP	CL,1			;CLが	１の場合
	JNZ	A2H8C1			;AX←AH*100
	MOV	AL,100			;
	JMP	A2H8C3			;
A2H8C1:	CMP	CL,2			;	２の場合
	JNZ	A2H8C2			;AX←AH*10
	MOV	AL,10			;
	JMP	A2H8C3			;
A2H8C2:	CMP	CL,3			;	３の場合
	JNZ	A2H8C4			;AX←AH*1
	MOV	AL,1			;
;	JMP	A2H8C3			;
A2H8C3:	CALL	KAKE8			;
	ADD	CS:[DHEX8],AL		;[DHEX8]←[DHEX8]*AX
	RET				;
A2H8C4:	MOV	CL,0			;ＣＬがそれ以外の場合
	XCHG	BX,DX			;エラー
	POP	DX			;
	MOV	DX,OFFSET A2H8EE	;
	PUSH	DX			;
	STC				;
	RET				;
;---------------------------------------------------------------|
;		かけ算ルーチン					|
;---------------------------------------------------------------|
;	引数							|
;		AH←かけられる数				|
;		AL←かける数					|
;	返り値							|
;		AX←答						|
;---------------------------------------------------------------|
KAKE8:					;
	PUSH	CX			;
	PUSH	DX			;レジスタ保存
	XOR	DX,DX			;DX←0000<h>
	MOV	CH,0			;CH←0
	MOV	CL,1			;CL←00000001<h>
KLOOP0:	TEST	AH,CL			;Bit check
	JZ	KLOOP1			;if 'L' then *KLOOP1
	CALL	KADD			;加算処理(DX+AL*2^CL)
KLOOP1:	INC	CH			;CH←CH+1
	SHL	CL,1			;CL Bit shift ←
	JNC	KLOOP0			;CL>128で終了
	MOV	AX,DX			;
	POP	DX			;
	POP	CX			;レジスタ復帰
	RET				;RETURN
;		*************************
;		*	加算処理	*
;		*************************
KADD:					;
	PUSH	AX			;
	XOR	AH,AH			;AH←00h
	CMP	CH,1			;CH=1ならば加算のみ
	JC	KADD1			;
	PUSH	CX			;
	MOV	CL,CH			;
	SHL	AX,CL			;AX←AX*2^CH
	POP	CX			;
KADD1:	ADD	DX,AX			;DX←DX+AX
	POP	AX			;
	RET				;
;---------------------------------------------------------------|
;		ASCII CODE→１６進コード(-32767〜65535)		|
;---------------------------------------------------------------|
;	引数							|
;		DS:DX←変換したい文字列先頭アドレス		|
;	返り値							|
;		AX←変換後					|
;		DS:BX←次のアドレス				|
;---------------------------------------------------------------|
HEX_16	DB	00H,00H,00H,00H,00H	;
DHEX16	DW	0000H			;
F6FLAG	DB	00H			;
ASC2HEX16:				;
	PUSH	CX			;
	PUSH	DX			;
	XOR	CX,CX			;CX←0
	MOV	BX,DX			;BX←DX（文字列先頭アドレス）
	MOV	DX,OFFSET HEX_16	;DX←変換用データバッファ
	XOR	AX,AX
	MOV	CS:[F6FLAG],AH
	MOV	AH,DS:[BX]
	CMP	AH,'-'
	JNZ	A2H6L0
	INC	BX
	MOV	AH,0F6H
	MOV	CS:[F6FLAG],AH
A2H6L0:	MOV	AH,DS:[BX]		;
	INC	BX			;
	SUB	AH,30H			;CHR CODE→HEX CODE
	JNC	A2H6L1			;AH<0　だったら一時変換終了
	JMP	A2H6E1			;
A2H6L1:	CMP	AH,10			;
	JC	A2H6L2			;AH>10 だったら一時変換終了
	JMP	A2H6E1			;
A2H6L2:	XCHG	BX,DX			
	MOV	CS:[BX],AH		;保存
	INC	BX			;
	XCHG	BX,DX			
	INC	CL			;
	CMP	CL,5			;５回変換したら一時変換終了
	JZ	A2H6E0			;
	JMP	A2H6L0			;
A2H6E1:
	DEC	BX			
A2H6E0:
	CMP	CL,0			
	JNZ	A2H6L3			
	STC				
	INC	BX			
	JMP	A2H6EE			
A2H6L3:					
	XOR	AX,AX			
	MOV	CS:[DHEX16],AX		
	MOV	CH,CL			
	MOV	CL,5			
	XCHG	BX,DX			
A2H6L4:	
	DEC	BX			
	XOR	AH,AH			
	MOV	AL,CS:[BX]		
	CALL	A2H6AA			
	DEC	CL			
	DEC	CH			
	JNZ	A2H6L4			
	XCHG	BX,DX			
	MOV	AX,CS:[DHEX16]		
	CMP	CS:[F6FLAG],00H		
	JZ	A2H6L5			
	NEG	AX			
A2H6L5:	CLC				
A2H6EE:	POP	DX			
	POP	CX			
	RET				

;	*	*	*	*	*	*	*	*

A2H6AA:					
	PUSH	DX			
	CMP	CL,1			
	JNZ	A2H6C1			
	MOV	DX,10000		
	JMP	A2H6C5			
A2H6C1:	CMP	CL,2			
	JNZ	A2H6C2			
	MOV	DX,1000			
	JMP	A2H6C5			
A2H6C2:	CMP	CL,3			
	JNZ	A2H6C3			
	MOV	DX,100			
	JMP	A2H6C5			
A2H6C3:	CMP	CL,4			
	JNZ	A2H6C4			
	MOV	DX,10			
	JMP	A2H6C5			
A2H6C4:	CMP	CL,5			
	JNZ	A2H6C6			
	MOV	DX,1			
;	JMP	A2H6C5			
A2H6C5:	MUL	DX			
	POP	DX			
	ADD	CS:[DHEX16],AX		
	RET				
A2H6C6:	MOV	CL,0			
	POP	DX			
	XCHG	BX,DX			
	POP	DX			
	MOV	DX,OFFSET A2H6EE	
	PUSH	DX			
	STC				
	RET				
;---------------------------------------------------------------|
;		コンパイルデータ読み込み			|
;---------------------------------------------------------------|
;	引数							|
;		CS:[pMML_File]：コンパイルアドレス		|
;		ES←MML Dataのあるセグメント			|
;	返り値							|
;		AH	 　：データ				|
;		CS:[pMML_File]：次のアドレス			|
;---------------------------------------------------------------|
CREAD:	
	call	COMMENT_CHK		;

	PUSH	BX			;
	MOV	BX,CS:[pMML_File]	;BX←コンパイルするアドレス
	MOV	AH,ES:[BX]		;AH←そこのデータ
	INC	BX			;BX（ポインタ）を増加
	PUSH	AX			;
	MOV	AX,CS:[szMml_File]	;AX← *.MMLのサイズ
	CMP	AX,BX			;ポインタがサイズを越えていたら
	MOV	CS:[pMML_File],BX	;Cy←'H'
	POP	AX			;
	POP	BX			;
	RET				;
;---------------------------------------------------------------|
;		コンパイルデータ書き込み			|
;---------------------------------------------------------------|
;	引数							|
;		AH	 　：データ				|
;		CS:[pWTD_File]：コンパイルアドレス		|
;		DS←FSP データを書くセグメント			|
;	返り値							|
;		CS:[pWTD_File]：次のアドレス			|
;---------------------------------------------------------------|
CSET:	PUSH	BX			;
	MOV	BX,CS:[pWTD_File]	;BX←コンパイルしたアドレス
	MOV	DS:[BX],AH		;書き込み
	INC	BX			;BX（ポインタ）増加
	MOV	CS:[pWTD_File],BX	;
	POP	BX			;
	RET				;
;---------------------------------------------------------------
CSET16:	PUSH	BX			;
	MOV	BX,CS:[pWTD_File]	;BX←コンパイルしたアドレス
	MOV	DS:[BX],ax		;書き込み
	add	bx,2			;BX（ポインタ）増加
	MOV	CS:[pWTD_File],BX	;
	POP	BX			;
	RET				;
;---------------------------------------------------------------|
;		コメントチェック				|
;---------------------------------------------------------------|
COMMENT_CHK:				;
	PUSH	AX			;
	PUSH	BX			;
	MOV	BX,CS:[pMML_File]	;BX←コンパイル中アドレス
	MOV	AH,ES:[BX]		;AH←そこのデータ
	CMP	AH,';'			;もしコメントがあったら改行までジャンプ
	JNZ	REMCHK			;
	CALL	CRJUMP			;
REMCHK:	POP	BX			;
	POP	AX			;
	RET				;
;---------------------------------------------------------------|
;		改行まで飛ばす					|
;---------------------------------------------------------------|
CRJUMP:	PUSH	AX			;
	push	bx			;

CR_JMP:	
	MOV	BX,CS:[pMML_File]	;BX←コンパイルするアドレス
	MOV	AH,ES:[BX]		;AH←そこのデータ
	inc	CS:[pMML_File]		;ポインタを増加

	CMP	AH,0DH			;改行？
	JNZ	CR_JMP			;でなかったら↑

	dec	CS:[pMML_File]		;ポインタを増加

	pop	bx			;
	POP	AX			;
	RET				;
;****************************************************************
;								*
;			ファイル関連				*
;								*
;****************************************************************
;---------------------------------------------------------------|
;		インクルードファイルチェック			|
;---------------------------------------------------------------|
INCFILE	DB	'            ',000,00DH,00AH,024H
CHK_INCLUDE:				;インクルード定義の処理
	CALL	IOPEN			;ファイル読み込み用のメモリ割当
	xor	bx,bx			;
	MOV	CS:[pMML_File],BX	;ＭＭＬデータ先頭アドレス
	MOV	AX,CS:[segMml_File]	;
	MOV	ES,AX			;
	JMP	INCL01			;
INCLOOP:				;
	CALL	CREAD			;
	JNC	INCL00			;サイズオーバ
	JMP	INCEOF			;
INCL00:	CMP	AH,00AH			;改行？
	JNZ	INCLOOP			;
INCL01:	CALL	CREAD			;
	CMP	AH,'I'			;I
	JNZ	INCLOOP			;
INCL02:	CALL	CREAD			;
	CMP	AH,'N'			;N
	JNZ	INCLOOP			;行の先頭に'IN'の文字があるか？
INCL03:	CALL	CREAD			;
	CMP	AH,21H			;
	JC	INCL03			;２０未満のコードは飛ばす
INCL04:	MOV	BX,OFFSET INCFILE	;BX←ファイル名を格納するアドレス
	MOV	CL,13			;
	MOV	AX,CS:[pMML_File]	;
	DEC	AX			;
	MOV	CS:[pMML_File],AX	;
INCL05:	CALL	CREAD			;
	CMP	AH,0DH			;改行だったら
	JZ	INCL06			;格納終了
	MOV	CS:[BX],AH		;
	INC	BX			;
	DEC	CL			;
	JNZ	INCL05			;文字列オーバ
	JMP	INC_ERROR		;存在しないファイル
INCL06:	MOV	AH,00H			;
	MOV	CS:[BX],AH		;
	CALL	CREAD			;ポインタを進ませる
	CALL	INC_FILE_OPEN		;インクルードファイルオープン
	CALL	INC_MREAD		;メモリ読み込み
	CALL	INC_FILE_CLOSE		;インクルードファイルクローズ
	CALL	INC_SCROOL		;インクルードの挿入
	JMP	INCLOOP			;
INCEOF:	
	CALL	ICLOSE			;割り当てたメモリの解放
	RET				;
;---------------------------------------------------------------|
;		インクルードファイル挿入			|
;---------------------------------------------------------------|
INC_SCROOL:
	STD				;ブロック転送時ディクリメント
	MOV	SI,0FFFFH		;
	SUB	SI,CS:[szInclude_File]		;
	MOV	DI,0FFFFH		;
	MOV	AX,CS:[segMml_File]		;
	MOV	DS,AX			;
	MOV	ES,AX			;
INC_SCROOL_L0:				;
	MOVSB				;
	CMP	SI,CS:[pMML_File]		;
	JNC	INC_SCROOL_L0		;サイズ分したにずらす。

	MOV	CX,CS:[szInclude_File]		;CX ←転送サイズ
	MOV	SI,0000H		;DS:SI ←転送元
	MOV	DI,CS:[pMML_File]		;ES:DI ←送り先
	MOV	AX,CS:[segInclude_File]		;
	MOV	DS,AX			;
	MOV	AX,CS:[segMml_File]		;
	MOV	ES,AX			;
	
	CLD				;ブロック転送時インクリメント
	REP	MOVSB			;ブロック転送
	
	DEC	DI			;
	MOV	AH,ES:[DI]		;インクルードファイルの最後にEOFが
	CMP	AH,1AH			;ついていたら、20h を入れる
	JNZ	INC_SCROOL_L1		;
	MOV	AH,20H			;
	MOV	ES:[DI],AH		;
INC_SCROOL_L1:				;
	MOV	AX,CS:[szMml_File]		;ＭＭＬサイズをインクルードファイルの
	ADD	AX,CS:[szInclude_File]		;サイズ分だけ大きくする。
	MOV	CS:[szMml_File],AX		;
	RET				;
;---------------------------------------------------------------|
;		セーブ用ファイルのオープン			|
;---------------------------------------------------------------|
SOPEN:
	PUSH	DS			;
	PUSH	AX			;
	PUSH	BX			;
	PUSH	CX			;
	PUSH	DX			;

	MOV	AX,CS			;
	MOV	DS,AX			;DS←CS

	MOV	AX,CS:[F_ADD]		;
	MOV	SI,AX			;SI←ファイルアドレス
	MOV	BX,AX			;
SFLP1:					;拡張子を'.FSP'とする。
	INC	BX			;
	CMP	BYTE PTR CS:[BX],'.'	;
	JNZ	SFLP1			;
SFLP2:	INC	BX			;
	MOV	AH,'W'			;
	MOV	CS:[BX],AH		;
	INC	BX			;
	MOV	AH,'T'			;
	MOV	CS:[BX],AH		;
	INC	BX			;
	MOV	AH,'D'			;
	MOV	CS:[BX],AH		;
	INC	BX			;
	MOV	AH,00H			;
	MOV	CS:[BX],AH		;
	INC	BX			;
	MOV	AH,0AH			;
	MOV	CS:[BX],AH		;
	INC	BX			;
	MOV	AH,0DH			;
	MOV	CS:[BX],AH		;
	INC	BX			;
	MOV	AH,24H			;
	MOV	CS:[BX],AH		;

SFL20:	MOV	AX,3C00H		;ファイルのオープン
	MOV	DX,SI			;DX←ファイル名アドレス
	MOV	CX,00H			;普通
	INT	21H			;
	JNC	SFL02			;
	JMP	SOPEN_ERROR		;
SFL02:	MOV	WORD PTR CS:[hWtd_File],AX	;

	POP	DX			;
	POP	CX			;
	POP	BX			;
	POP	AX			;
	POP	DS			;
	RET				;
;---------------------------------------------------------------|
;		セーブ用ファイルのオープン（テスト）		|
;---------------------------------------------------------------|
TSOPEN:
	PUSH	DS			;
	PUSH	AX			;
	PUSH	BX			;
	PUSH	CX			;
	PUSH	DX			;

	MOV	AX,CS			;
	MOV	DS,AX			;DS←CS

	MOV	AX,CS:[F_ADD]		;
	MOV	SI,AX			;SI←ファイルアドレス
	MOV	BX,AX			;
TSFLP1:					;拡張子を'.TCM'とする。
	INC	BX			;
	CMP	BYTE PTR CS:[BX],'.'	;
	JNZ	TSFLP1			;
TSFLP2:	INC	BX			;
	MOV	AH,'T'			;
	MOV	CS:[BX],AH		;
	INC	BX			;
	MOV	AH,'C'			;
	MOV	CS:[BX],AH		;
	INC	BX			;
	MOV	AH,'M'			;
	MOV	CS:[BX],AH		;
	INC	BX			;
	MOV	AH,00H			;
	MOV	CS:[BX],AH		;
	INC	BX			;
	MOV	AH,0AH			;
	MOV	CS:[BX],AH		;
	INC	BX			;
	MOV	AH,0DH			;
	MOV	CS:[BX],AH		;
	INC	BX			;
	MOV	AH,24H			;
	MOV	CS:[BX],AH		;

TSFL20:	MOV	AX,3C00H		;ファイルのオープン
	MOV	DX,SI			;DX←ファイル名アドレス
	MOV	CX,00H			;普通
	INT	21H			;
	JNC	TSFL02			;
	JMP	SOPEN_ERROR		;
TSFL02:	MOV	WORD PTR CS:[hTest_File],AX	;

	POP	DX			;
	POP	CX			;
	POP	BX			;
	POP	AX			;
	POP	DS			;
	RET				;
;---------------------------------------------------------------|
;		ファイルのオープン				|
;---------------------------------------------------------------|
FOPEN:					;
	MOV	BX,0081H		;
	MOV	CH,CS:[BX - 1]		;
	ADD	BL,CH			;
	MOV	CS:[BX],BH		;
	MOV	BX,0081H		;
FLOOP:	CMP	CH,0			;
	JNZ	FL001			;
	JMP	FILE_ERROR		;
FL001:	DEC	CH			;
	INC	BX			;
	CMP	BYTE PTR CS:[BX],21H	;
	JC	FLOOP			;
	MOV	DX,BX			;
	MOV	CS:[F_ADD],BX		;ファイル名先頭アドレスの保存

FLOP1:	CMP	CH,0			;拡張子指定のない場合
	JNZ	FL012			;'.MML'とする。
	MOV	AH,'.'			;
	MOV	CS:[BX],AH		;
	INC	BX			;
	MOV	AH,'M'			;
	MOV	CS:[BX],AH		;
	INC	BX			;
	MOV	AH,'M'			;
	MOV	CS:[BX],AH		;
	INC	BX			;
	MOV	AH,'L'			;
	MOV	CS:[BX],AH		;
	INC	BX			;
	MOV	AH,00			;
	MOV	CS:[BX],AH		;
	
	JMP	FL020			;
FL012:	DEC	CH			;
	INC	BX			;
	CMP	BYTE PTR CS:[BX],'.'	;
	JNZ	FLOP1			;

FL020:	MOV	AX,3D00H		;ファイルのオープン
	INT	21H			;
	JNC	FL002			;
	JMP	LOAD_ERROR		;
FL002:	MOV	WORD PTR CS:[hMml_File],AX	;
	RET				;
;---------------------------------------------------------------|
;		インクルードファイルのオープン			|
;---------------------------------------------------------------|
INC_FILE_OPEN:				;インクルードファイル
	PUSH	DS			;
	PUSH	CS			;
	POP	DS			;
	MOV	DX,OFFSET INCFILE	;DS:DX←ファイル名ポインタ
	MOV	AX,3D00H		;
	INT	21H			;
	JNC	INC_FILE_OPEN_L0	;
	JMP	INC_ERROR		;無かったよぉ〜
INC_FILE_OPEN_L0:			;
	MOV	WORD PTR CS:[hInclude_File],AX	;ハンドルを保存しとこ。
	POP	DS			;
	RET				;
;---------------------------------------------------------------|
;		音色ファイルのオープン				|
;---------------------------------------------------------------|
;VOI_FILE_OPEN:				;音色ファイル
;	PUSH	DS			;
;	PUSH	CS			;
;	POP	DS			;
;	MOV	DX,OFFSET VOIFILE	;DS:DX←ファイル名ポインタ
;	MOV	AX,3D00H		;
;	INT	21H			;
;	JNC	VOI_FILE_OPEN_L0	;
;	JMP	VOI_ERROR		;無かったよぉ〜
;VOI_FILE_OPEN_L0:			;
;	MOV	WORD PTR CS:[hVoice_File],AX	;ハンドルを保存しとこ。
;	POP	DS			;
;	RET				;
;---------------------------------------------------------------|
;		メモリ確保（OPN Data）				|
;---------------------------------------------------------------|
MOPEN:					;
	MOV	AH,48H			;
	MOV	BX,1000H		;64KByte のデータ領域の確保
	INT	21H			;
	JNC	NOPERR			;割り当て失敗時に飛ぶ。
	JMP	MOPEN_ERROR		;
NOPERR:	MOV	CS:[segMml_File],AX	;割り当てたセグメントアドレスの保存。
	MOV	DS,AX			;
	RET				;
;---------------------------------------------------------------|
;		メモリ確保（WTD Data）				|
;---------------------------------------------------------------|
WOPEN:					;
	MOV	AH,48H			;
	MOV	BX,1000H		;64KByte のデータ領域の確保
	INT	21H			;
	JNC	WOPERR			;割り当て失敗時に飛ぶ。
	JMP	MOPEN_ERROR		;
WOPERR:	MOV	CS:[segWtd_File],AX	;割り当てたセグメントアドレスの保存。
	MOV	DS,AX			;
	RET				;
;---------------------------------------------------------------|
;		メモリ確保（INC Data）				|
;---------------------------------------------------------------|
IOPEN:					;
	MOV	AH,48H			;
	MOV	BX,0800H		;32KByte のデータ領域の確保
	INT	21H			;
	JNC	IOPERR			;割り当て失敗時に飛ぶ。
	JMP	MOPEN_ERROR		;
IOPERR:	MOV	CS:[segInclude_File],AX		;割り当てたセグメントアドレスの保存。
	MOV	DS,AX			;
	RET				;
;---------------------------------------------------------------|
;		メモリ確保（VOI Data）				|
;---------------------------------------------------------------|
VOPEN:					;
	MOV	AH,48H			;
	MOV	BX,0200H		;8KByte のデータ領域の確保
	INT	21H			;
	JNC	VOPERR			;割り当て失敗時に飛ぶ。
	JMP	MOPEN_ERROR		;
VOPERR:	MOV	CS:[segVoice_File],AX		;割り当てたセグメントアドレスの保存。
	MOV	DS,AX			;
	RET				;
;---------------------------------------------------------------|
;		メモリ開放（OPN Data）				|
;---------------------------------------------------------------|
MCLOSE:					;
	MOV	AX,CS:[segMml_File]		;
	MOV	ES,AX			;セグメントを読む。
	MOV	AH,49H			;
	INT	21H			;データ領域の開放
	JNC	MCLRET			;
	JMP	CLOSE_ERROR		;
MCLRET:	RET				;
;---------------------------------------------------------------|
;		メモリ開放（OPN Data）				|
;---------------------------------------------------------------|
WCLOSE:					;
	MOV	AX,CS:[segWtd_File]	;
	MOV	ES,AX			;セグメントを読む。
	MOV	AH,49H			;
	INT	21H			;データ領域の開放
	JNC	WCLRET			;
	JMP	CLOSE_ERROR		;
WCLRET:	RET				;
;---------------------------------------------------------------|
;		メモリ開放（INC Data）				|
;---------------------------------------------------------------|
ICLOSE:					;
	MOV	AX,CS:[segInclude_File]		;
	MOV	ES,AX			;セグメントを読む。
	MOV	AH,49H			;
	INT	21H			;データ領域の開放
	JNC	ICLRET			;
	JMP	CLOSE_ERROR		;
ICLRET:	RET				;
;---------------------------------------------------------------|
;		メモリ開放（VOI Data）				|
;---------------------------------------------------------------|
VCLOSE:					;
	MOV	AX,CS:[segVoice_File]		;
	MOV	ES,AX			;セグメントを読む。
	MOV	AH,49H			;
	INT	21H			;データ領域の開放
	JNC	VCLRET			;
	JMP	CLOSE_ERROR		;
VCLRET:	RET				;
;---------------------------------------------------------------|
;		ファイル→メモリ転送（OPN Data）		|
;---------------------------------------------------------------|
MREAD:					;
	MOV	AX,CS:[segMml_File]	;
	MOV	DS,AX			;
	xor	dx,dx
	MOV	CX,0FFFFH		;
	MOV	BX,WORD PTR CS:[hMml_File]	;
	MOV	AH,3FH			;
	INT	21H			;
	JNC	FL003			;
	JMP	READ_ERROR		;
FL003:	MOV	CS:[szMml_File],AX	;
	RET				;
;---------------------------------------------------------------|
;		ファイル→メモリ転送（INC Data）		|
;---------------------------------------------------------------|
INC_MREAD:				;
	MOV	AX,CS:[segInclude_File]	;
	MOV	DS,AX			;
	xor	dx,dx			;
	MOV	CX,07FFFH		;
	MOV	BX,WORD PTR CS:[hInclude_File]	;
	MOV	AH,3FH			;
	INT	21H			;
	JNC	INC_MREAD_L0		;
	JMP	READ_ERROR		;
INC_MREAD_L0:				;
	MOV	BX,AX			;
	DEC	BX			;
	CMP	DS:[BX],BYTE PTR 01AH	;[EOF] が最後にくっついている？
	JNZ	INC_MREAD_L1		;
	DEC	AX			;ならば、ファイルサイズを１Ｂｙｔｅ
INC_MREAD_L1:				;小さくする。
	MOV	CS:[szInclude_File],AX		;
	RET				;
;---------------------------------------------------------------|
;		ファイル→メモリ転送（OPN Data）		|
;---------------------------------------------------------------|
VOI_MREAD:				;
	PUSH	DS			;
	MOV	AX,CS:[segVoice_File]		;
	MOV	DS,AX			;DS←音色ファイル用セグメントアドレス
	MOV	DX,0000H		;DS:0000から
	MOV	CX,01FFFH		;1FFFh転送する。
	MOV	BX,WORD PTR CS:[hVoice_File]	;
	MOV	AH,3FH			;
	INT	21H			;
	JNC	VOI_MREAD_L1		;
	JMP	READ_ERROR		;
VOI_MREAD_L1:				;
	POP	DS			;
	RET				;
;---------------------------------------------------------------|
;		メモリ→ファイル転送				|
;---------------------------------------------------------------|
MSAVE:					;
	PUSH	AX			;
	PUSH	BX			;
	PUSH	CX			;
	PUSH	DX			;
	PUSH	DS			;

	MOV	CX,DX			;
	xor	dx,dx
	MOV	BX,CS:[hWtd_File]	;
	MOV	AH,40H			;
	INT	21H			;
	JNC	SFL03			;
	JMP	READ_ERROR		;

SFL03:	POP	DS			;
	POP	DX			;
	POP	CX			;
	POP	BX			;
	POP	AX			;
	RET				;
;---------------------------------------------------------------|
;		メモリ→ファイル転送				|
;---------------------------------------------------------------|
TMSAVE:					;
	PUSH	AX			;
	PUSH	BX			;
	PUSH	CX			;
	PUSH	DX			;
	PUSH	DS			;

	MOV	AX,CS:[segMml_File]		;
	MOV	DS,AX			;
	MOV	CX,CS:[szMml_File]		;
	xor	dx,dx
	MOV	BX,CS:[hTest_File]		;
	MOV	AH,40H			;
	INT	21H			;
	JNC	TSFL03			;
	JMP	READ_ERROR		;

TSFL03:	POP	DS			;
	POP	DX			;
	POP	CX			;
	POP	BX			;
	POP	AX			;
	RET				;
;---------------------------------------------------------------|
;		ファイルのクローズ				|
;---------------------------------------------------------------|
FCLOSE:
	MOV	BX,WORD PTR CS:[hMml_File]	;
	MOV	AH,3EH			;
	INT	21H			;
	JNC	FL004			;
	JMP	CLOSE_ERROR		;
FL004:	RET				;
;---------------------------------------------------------------|
;		セーブ用ファイルのクローズ			|
;---------------------------------------------------------------|
SCLOSE:	
	PUSH	AX			;
	PUSH	BX			;
	
	MOV	BX,WORD PTR CS:[hWtd_File]	;
	MOV	AH,3EH			;
	INT	21H			;
	JNC	SFL04			;
	JMP	CLOSE_ERROR		;

SFL04:	POP	BX			;
	POP	AX			;
	RET				;
;---------------------------------------------------------------|
;		セーブ用ファイルのクローズ			|
;---------------------------------------------------------------|
TSCLOSE:
	PUSH	AX			;
	PUSH	BX			;
	
	MOV	BX,WORD PTR CS:[hTest_File]	;
	MOV	AH,3EH			;
	INT	21H			;
	JNC	TSFL04			;
	JMP	CLOSE_ERROR		;

TSFL04:	POP	BX			;
	POP	AX			;
	RET				;
;---------------------------------------------------------------|
;		インクルードファイルのクローズ			|
;---------------------------------------------------------------|
INC_FILE_CLOSE:				;
	PUSH	AX			;
	PUSH	BX			;
	
	MOV	BX,WORD PTR CS:[hInclude_File]	;
	MOV	AH,3EH			;
	INT	21H			;
	JNC	INC_FILE_CLOSE_L0	;
	JMP	CLOSE_ERROR		;
INC_FILE_CLOSE_L0:			;

	POP	BX			;
	POP	AX			;
	RET				;
;---------------------------------------------------------------|
;		音色ファイルのクローズ			|
;---------------------------------------------------------------|
VOI_FILE_CLOSE:				;
	PUSH	AX			;
	PUSH	BX			;
	
	MOV	BX,WORD PTR CS:[hVoice_File]	;
	MOV	AH,3EH			;
	INT	21H			;
	JNC	VOI_FILE_CLOSE_L0	;
	JMP	CLOSE_ERROR		;
VOI_FILE_CLOSE_L0:			;

	POP	BX			;
	POP	AX			;
	RET				;
;---------------------------------------------------------------|
;								|
;		ＣＯＭファイルのメモリー最小化			|
;---------------------------------------------------------------|
;	処理							|
;		ＣＯＭプログラム実行時にメモリーを		|
;		最小限にする					|
;	引数							|
;		無し						|
;	返り値							|
;		DS←CS						|
;	◎	Cy←'L' のとき。（正常終了）			|
;		BX←変更したメモリーの大きさ。			|
;	◎	Cy←'H' のとき。（エラー）			|
;		BX←変更できる最大の大きさ			|
;		AX←INT21H ﾌｧﾝｸｼｮﾝ4AH参照			|
;---------------------------------------------------------------|
ComSmoleMessage7	DB	"プログラムによるメモリー中のデーターの破壊。",0DH,0AH,"$"
ComSmoleMessage8	DB	"十分な空きメモリーが無い。",0DH,0AH,"$"
ComSmoleMessage9	DB	"不正なメモリーブロックの使用。",0DH,0AH,"$"
ComSmole:			;メモリーの最小化
	PUSH	DX		;
	PUSH	CX		;レジスタの保存
	
	MOV	ES,CS:[002CH]	;環境セグメントの開放
	MOV	AH,49H		;
	INT	21H		;
	
	MOV	AX,CS		;
	MOV	DS,AX		;DS←CS
	MOV	ES,AX		;ES←CS
	MOV	BX,OFFSET WTD_MML_Compiler_End+BSTACK
	MOV	CL,4		;
	SHR	BX,CL		;
	INC	BX		;BX←プログラムの大きさ（パラグラフ単位）
	MOV	AH,04AH		;
	INT	21H		;最小化
	PUSH	BX		;
	PUSH	AX		;返り値の保存
	JC	ComSmoleERR	;エラー時に飛ぶ
	CLC			;Cy←'L'
	JMP	ComSmoleRET	;RETURN
;===============================================================|
ComSmoleERR:			;ファンクション4AH のＥＲＲＯＲ
	CMP	AX,07H		;
	JNZ	ComSmoleER8	;ERROR CODE=07H
	MOV	AH,09H		;
	MOV	DX,OFFSET ComSmoleMessage7
	INT	21H		;メッセージの表示
	STC			;Cy←'H'
	JMP	ComSmoleRET	;RETURN
ComSmoleER8:
	CMP	AX,08H		;
	JNZ	ComSmoleER9	;ERROR CODE=08H
	MOV	AH,09H		;
	MOV	DX,OFFSET ComSmoleMessage8
	INT	21H		;メッセージの表示
	STC			;Cy←'L'
	JMP	ComSmoleRET	;RETURN
ComSmoleER9:
	MOV	AH,09H		;ERROR CODE=09H
	MOV	DX,OFFSET ComSmoleMessage9
	INT	21H		;メッセージの表示
	STC			;Cy←'H'
	JMP	ComSmoleRET	;RETURN
;===============================================================|
ComSmoleRET:			;ＲＥＴＵＲＮ
	POP	AX		;
	POP	BX		;
	POP	CX		;レジスターの復帰
	POP	DX		;
	RET			;RETURN
;---------------------------------------------------------------|
;		エラー処理					|
;---------------------------------------------------------------|
P_TAB	DB	"	$"
P	DB	0DH,0AH,'$'
ERROR	DB	'ファイルが見つかりません。',0DH,0AH,'$'
FERROR	DB	'WTC[32;4m ファイル名[.mml][32;0m [m',0DH,0AH,'$'
RERROR	DB	'ファイルを読めません。',0AH,0DH,24H
MEMERR	DB	'メモリが足りません。',0AH,0DH,24H
ZERROR	DB	'ＦＳＰが常駐していません。',0AH,0DH,'$'
OERROR	DB	'オープンに失敗しました',0DH,0AH,'$'
CERROR	DB	'クローズに失敗しました',0DH,0AH,'$'
LERROR	DB	'ループ関係がおかしいです。',0DH,0AH,'$'
MACERR	DB	'マクロでマクロを呼び出し過ぎです。',0DH,0AH,'$'
MACERR2	DB	'定義されていないマクロを使用しています。',0DH,0AH,'$'
INCERR	DB	'存在しないインクルードファイルを指定しています。',0DH,0AH,'$'
VOIERR	DB	'存在しない音色ファイルを指定しています。',0DH,0AH,'$'

D_SEG:	MOV	AX,ES			;
	MOV	DS,AX			;DS←Data
	ADD	DX,1000H		;
	RET				;
C_SEG:	MOV	AX,CS			;
	MOV	DS,AX			;DS←Program
	RET				;
LPRINT:	MOV	AH,09H			;
	INT	21H			;PRINT
	RET				;
LOAD_ERROR:
	MOV	DX,OFFSET ERROR		;
PRINT:	MOV	AX,CS			;
	MOV	DS,AX			;
	MOV	AH,09H			;
	INT	21H			;
	JMP	COMEND			;
FILE_ERROR:
	MOV	DX,OFFSET FERROR	;
	JMP	PRINT			;
MOPEN_ERROR:
	MOV	DX,OFFSET MEMERR	;
	JMP	PRINT			;
OPEN_ERROR:
	MOV	DX,OFFSET OERROR	;
	JMP	PRINT			;
CLOSE_ERROR:
	MOV	DX,OFFSET CERROR	;
	JMP	PRINT			;
READ_ERROR:
	MOV	DX,OFFSET RERROR	;
	JMP	PRINT			;
ZYO_ERROR:
	MOV	DX,OFFSET ZERROR	;
	JMP	PRINT			;
LOOP_ERROR:
	MOV	DX,OFFSET LERROR	;ループ周りがおかしい
	JMP	PRINT			;
MACRO_ERROR:
	MOV	DX,OFFSET MACERR	;存在しないマクロの呼出
	JMP	PRINT			;
MACRO_ERROR2:
	MOV	DX,OFFSET MACERR2	;マクロでマクロを呼びすぎ
	JMP	PRINT			;
INC_ERROR:
	MOV	DX,OFFSET INCERR	;存在しないインクルードファイル
	MOV	AX,CS			;
	MOV	DS,AX			;
	MOV	AH,09H			;
	INT	21H			;
	MOV	DX,OFFSET INCFILE	;
	JMP	PRINT			;
;VOI_ERROR:
;	MOV	DX,OFFSET VOIERR	;存在しない音色ファイル
;	MOV	AX,CS			;
;	MOV	DS,AX			;
;	MOV	AH,09H			;
;	INT	21H			;
;	MOV	DX,OFFSET VOIFILE	;
;	JMP	PRINT			;
SOPEN_ERROR:
	PUSH	AX
	MOV	AH,09H
	MOV	DX,SI
	INT	21H
	POP	AX
	CMP	AX,3
	MOV	DX,OFFSET FSERR3
	JMP	PRINT
	CMP	AX,4
	MOV	DX,OFFSET FSERR4
	JMP	PRINT
	CMP	AX,5
	MOV	DX,OFFSET FSERR5
	JMP	PRINT
	JMP	OPEN_ERROR
FSERR3	DB	'無効なパス・ファイル名',0AH,0DH,24H
FSERR4	DB	'同時にオープンされているファイルが多いすぎる',0AH,0DH,24H
FSERR5	DB	'アクセスの否定',0AH,0DH,24H


